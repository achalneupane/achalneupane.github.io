<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Achal Neupane</title>
    <link>/achalneupane.github.io/</link>
      <atom:link href="/achalneupane.github.io/index.xml" rel="self" type="application/rss+xml" />
    <description>Achal Neupane</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© 2019</copyright><lastBuildDate>Sun, 15 Sep 2019 17:26:23 -0500</lastBuildDate>
    <image>
      <url>/achalneupane.github.io/img/icon-192.png</url>
      <title>Achal Neupane</title>
      <link>/achalneupane.github.io/</link>
    </image>
    
    <item>
      <title>Final assignment</title>
      <link>/achalneupane.github.io/post/final_assignment/</link>
      <pubDate>Sun, 15 Sep 2019 17:26:23 -0500</pubDate>
      <guid>/achalneupane.github.io/post/final_assignment/</guid>
      <description>


&lt;script type=&#34;text/javascript&#34; src=&#34;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML&#34;&gt;
&lt;/script&gt;
&lt;p&gt;The algorithm to do this analysis is divided into several steps as described below:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;First you have to define the path to all csv files for final under (&lt;code&gt;path.final&lt;/code&gt;) and all .csv files from midterm under &lt;code&gt;path.midterm&lt;/code&gt; in the begining of the code below.&lt;/li&gt;
&lt;li&gt;I have used some external packages like ggplot2 to make the plots.&lt;/li&gt;
&lt;li&gt;I have written several functions to analyze each individual field as well as merged field statistics that calculates cohens effect size, required replicates, and does ANOVA analysis on individual field as well as on merged data from all fields.&lt;/li&gt;
&lt;li&gt;This function &lt;code&gt;get_question_1_and_2_answers&lt;/code&gt; calculates the time spent each day on field, start and end time start and end date. observations each day, and also calculate one hour gap (more than an hour gap in consecutive rows) if present in the data. It spits out a table (&lt;code&gt;range_table&lt;/code&gt;) with all the date data required for this project. I then used this range table to plot time, and dates.&lt;/li&gt;
&lt;li&gt;I have also plotted the Moisture content in each harvest field and how it gets affected during the day, and across the range of dates.&lt;/li&gt;
&lt;li&gt;Function &lt;code&gt;calculate_field_mean_SD_and_get_RR_EffSize&lt;/code&gt; also uses mean, sd, and counts from each field to calculate cohens d and Required replicates. It also uses pooled standard deviations and Mean (mean of Means) calculated from all four fields for different control Rates to calculate cohens d and required replicates of combined field data. I have tested this function on all four fields at ControlRate level of 500, 1000, 2000 and 3000 intervals for mid-term, but this time, I have modified this function to calculate cohends d and required replicates for 1000 control rates also taking dates into consideration. This function also calculates these values for date only (neglecting control Rates).&lt;/li&gt;
&lt;li&gt;I have also shown ANOVA analysis followed by TUKEY HSD test to show which ControlRates of seeding have significant effect on Yield for each field and then for all fields (combined all four fields).&lt;/li&gt;
&lt;li&gt;Lastly, I have plotted EffectSize Vs RequiredReplicates for all combined field.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;First of all we, will set two directory paths where we have all our files we want to anlalyze. first path is &lt;code&gt;path.final&lt;/code&gt; for final data and &lt;code&gt;path.midterm&lt;/code&gt; for midterm data&lt;/p&gt;
&lt;p&gt;&lt;code&gt;all.files&lt;/code&gt; contains the file name of all csv files in our directory. I have decided to
read all files from the system rather than reading one file at a time.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# # Path to all .csv data files for final.
# path.final &amp;lt;-
# &amp;quot;/Users/owner1/Box/sdsu/statistical_programming_course/final/&amp;quot;
# 
# # Path to all .csv data files for midterm.
# path.midterm &amp;lt;-
#   &amp;quot;/Users/owner1/Box/sdsu/statistical_programming_course/midterm/&amp;quot;

# instead for local path, we can get files from git repos
library(rvest)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: xml2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;path.final &amp;lt;- read_html(&amp;quot;https://github.com//achalneupane/data&amp;quot;) %&amp;gt;% html_nodes(&amp;quot;.js-navigation-open&amp;quot;) %&amp;gt;% html_attr(&amp;quot;href&amp;quot;)

path.midterm &amp;lt;- read_html(&amp;quot;https://github.com//achalneupane/data&amp;quot;) %&amp;gt;% html_nodes(&amp;quot;.js-navigation-open&amp;quot;) %&amp;gt;% html_attr(&amp;quot;href&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, we first install and load some of the packages (“multcompView”, “ggplot2”,
“scales”, “data.table”, etc.) we will be using for this exercise.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# First, install missing packages and load them
myPackages &amp;lt;-
c(
&amp;quot;multcompView&amp;quot;,
&amp;quot;ggplot2&amp;quot;,
&amp;quot;scales&amp;quot;,
&amp;quot;data.table&amp;quot;,
&amp;quot;reshape2&amp;quot;,
&amp;quot;RColorBrewer&amp;quot;,
&amp;quot;plyr&amp;quot;,
&amp;quot;ggpmisc&amp;quot;
)
my.installed.packages &amp;lt;- installed.packages()
available.packages &amp;lt;- myPackages %in% my.installed.packages
if (sum(!available.packages) &amp;gt; 0) {
install.packages(myPackages[!available.packages])
}
# Load all required packages
lapply(myPackages, require, character.only = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: multcompView&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: ggplot2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: scales&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: data.table&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: reshape2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Attaching package: &amp;#39;reshape2&amp;#39;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following objects are masked from &amp;#39;package:data.table&amp;#39;:
## 
##     dcast, melt&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: RColorBrewer&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: plyr&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: ggpmisc&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## For news about &amp;#39;ggpmisc&amp;#39;, please, see https://www.r4photobiology.info/&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [[1]]
## [1] TRUE
## 
## [[2]]
## [1] TRUE
## 
## [[3]]
## [1] TRUE
## 
## [[4]]
## [1] TRUE
## 
## [[5]]
## [1] TRUE
## 
## [[6]]
## [1] TRUE
## 
## [[7]]
## [1] TRUE
## 
## [[8]]
## [1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Normally, I would write all functions in a separate file and use them as
source(‘function_file.r’) However, I have my functions for this project written
here.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# field_or_seed &amp;lt;- harvestB


# functions

# function for question 1 and 2
get_question_1_and_2_answers &amp;lt;- function(field_or_seed) {
# range of planting dates
field_or_seed$Date &amp;lt;- gsub(&amp;quot;T.*&amp;quot;, &amp;quot;&amp;quot;, field_or_seed$Timestamp)
field_or_seed$Time &amp;lt;- gsub(&amp;quot;.*T|Z&amp;quot;, &amp;quot;&amp;quot;, field_or_seed$Timestamp)
# Range in days
field_or_seed$date_time &amp;lt;-
as.POSIXct(paste(field_or_seed$Date, field_or_seed$Time), tz = &amp;quot;UTC&amp;quot;)
# field_or_seed$date_time &amp;lt;- paste(field_or_seed$Date, field_or_seed$Time)

# num_days &amp;lt;- round(difftime(max(as.POSIXct(field_or_seed$date_time)), min(as.POSIXct(field_or_seed$date_time))), 3)
num_days &amp;lt;-
round(difftime(max(as.POSIXct(
field_or_seed$date_time
)), min(as.POSIXct(
field_or_seed$date_time
)), units = &amp;quot;days&amp;quot;), 3)

range_from_start_to_end_date_in_days &amp;lt;-
ifelse(num_days &amp;lt;= 1,
paste0(num_days, &amp;quot; day&amp;quot;),
paste0(num_days, &amp;quot; days&amp;quot;))
# Range in span of date for the field
range_of_start_end_date &amp;lt;-
paste0(range(as.Date(field_or_seed$Date))[1], &amp;quot; to &amp;quot;, range(as.Date(field_or_seed$Date))[2])



field_or_seed$Date &amp;lt;- as.factor(field_or_seed$Date)

# time range each day
tt &amp;lt;- field_or_seed[, c(&amp;quot;Date&amp;quot;, &amp;quot;Time&amp;quot;)]




time.range.each.day &amp;lt;- aggregate(data.frame(Time = strptime(do.call(paste, tt), &amp;#39;%F %R:%OS&amp;#39;, tz = &amp;#39;UTC&amp;#39;)),
by = list(Date = tt$Date),
function(Time) {
paste(format(min(Time), &amp;#39;%T&amp;#39;),
format(max(Time), &amp;#39;%T&amp;#39;),
sep = &amp;#39; to &amp;#39;)
})

rm(tt)


# Function to find more than an hour gap in consecutive rows
about_an_hour_gap &amp;lt;- function(field_or_seed) {
one_hour_thing &amp;lt;- {
}
for (i in 1:nrow(field_or_seed)) {
# i=3
if (i == nrow(field_or_seed))
{
break
} else
time.lapse &amp;lt;-
abs(as.numeric(
difftime(field_or_seed$date_time[i + 1], field_or_seed$date_time[i]),
units = &amp;quot;mins&amp;quot;
))

# find consecutive rows where the time is more than or equal 60 minutes and
# dates are the same
if (time.lapse &amp;gt;= 60 &amp;amp;
field_or_seed$Date[i + 1] == field_or_seed$Date[i]) {
one_hour_thing.tmp &amp;lt;- field_or_seed[i:(i + 1), ]
one_hour_thing &amp;lt;- rbind(one_hour_thing, one_hour_thing.tmp)
}
}
return(one_hour_thing)
}
about_an_hour_gap(field_or_seed)
one_hour_gap_time_stamp &amp;lt;- about_an_hour_gap(field_or_seed)

# function to calculate total time spent each day
time.elapsed.each.day.function &amp;lt;- function(x) {
difftime(max(as.POSIXct(x)), min(as.POSIXct(x)), units = &amp;quot;mins&amp;quot;)
}


# time.range.each.day(tt)
time.elapsed.each.day &amp;lt;-
aggregate(date_time ~ Date, data = field_or_seed, FUN = time.elapsed.each.day.function)
colnames(time.elapsed.each.day) &amp;lt;-
c(&amp;quot;Date&amp;quot;, &amp;quot;Time_elapsed (minutes)&amp;quot;)

observations.each.day &amp;lt;- table(field_or_seed$Date)


# Elapsed Dates
dates.elapsed.each.field.function &amp;lt;- function(x){
  difftime(max(as.POSIXct(x)), min(as.POSIXct(x)), units = &amp;quot;days&amp;quot;)
}
elapsed.dates.each.field &amp;lt;- as.integer(dates.elapsed.each.field.function(field_or_seed$Date))

return(
list(
observations.each.day = observations.each.day,
range_from_start_to_end_date_in_days = range_from_start_to_end_date_in_days,
range_of_start_end_date = range_of_start_end_date,
time.elapsed.each.day = time.elapsed.each.day,
elapsed.dates.each.field = elapsed.dates.each.field, 
time.range.each.day = time.range.each.day,
one_hour_gap_time_stamp = one_hour_gap_time_stamp
)
)


}



# Functions to calculate cohen&amp;#39;s d and Required Replicates
cohen.d &amp;lt;- function(m1, s1, m2, s2) {
cohens_d &amp;lt;- (abs(m1 - m2) / sqrt((s1 ^ 2 + s2 ^ 2) / 2))
return(cohens_d)
}

required.replicates &amp;lt;-
function (m1,
s1,
m2,
s2,
alpha = 0.05,
beta = 0.2) {
n &amp;lt;-
2 * ((((sqrt((s1 ^ 2 + s2 ^ 2) / 2
)) / (m1 - m2)) ^ 2) * (qnorm((1 - alpha / 2)) + qnorm((1 - beta))) ^ 2)
return(round(n, 0))
}


# Additional functions: They do anova and also calculate required replicates for fields
# We willl also perform ANOVA analysis with Tukey Test for paired comparision of
# mean for each field data as well as merged data at different ControlRate
# intervals. This function does Tukey HSD test and generates label for
# significant outcomes.

# Create function to get the labels for Tukey HSD:
generate_label_df &amp;lt;- function(TUKEY, variable) {
# Extract labels and factor levels from Tukey post-hoc
Tukey.levels &amp;lt;- TUKEY[[variable]][, 4]
Tukey.labels &amp;lt;-
data.frame(multcompLetters(Tukey.levels)[&amp;#39;Letters&amp;#39;])

#I need to put the labels in the same order as in the boxplot :
Tukey.labels$treatment = rownames(Tukey.labels)
Tukey.labels = Tukey.labels[order(Tukey.labels$treatment) ,]
return(Tukey.labels)
}

# This function does ANOVA and makes boxplots with Tukey statistics for
# comparing Mean yield.
get_my_box_plot &amp;lt;- function (field, plot_name = &amp;quot;the Field&amp;quot;) {
field$CR.Date.Levels &amp;lt;- gsub(&amp;quot;-&amp;quot;, &amp;quot;_&amp;quot;, field$CR.Date.Levels)
field$CR.Date.Levels &amp;lt;- as.factor(field$CR.Date.Levels)
model = lm(field$Yield ~ field$CR.Date.Levels)
ANOVA = aov(model)
# If residual degrees of freedom is less than or equal 1, don&amp;#39;t do Tukey test;
# simply return ANOVA summary.
if (ANOVA$df.residual &amp;lt;= 1) {
return(summary.aov(ANOVA))
}
# Tukey test to study each pair of treatment :
TUKEY &amp;lt;-
TukeyHSD(x = ANOVA,
&amp;#39;field$CR.Date.Levels&amp;#39;,
conf.level = 0.95)

# generate labels using function
labels &amp;lt;- generate_label_df(TUKEY , &amp;quot;field$CR.Date.Levels&amp;quot;)

# rename columns for merging
names(labels) &amp;lt;- c(&amp;#39;Letters&amp;#39;, &amp;#39;CR.Date.Levels&amp;#39;)

# Obtain letter positions for y axis using means
yvalue &amp;lt;- aggregate(Yield ~ CR.Date.Levels, data = field, mean)

final &amp;lt;- merge(labels, yvalue) #merge dataframes

p &amp;lt;- ggplot(field, aes(x = CR.Date.Levels, y = Yield)) +
geom_blank() +
theme_bw() +
# theme(panel.grid.major = element_blank(),
# panel.grid.minor = element_blank()) +
labs(x = &amp;#39;CR.Date.Levels&amp;#39;, y = &amp;#39;Mean Yield&amp;#39;) +
ggtitle(paste0(&amp;quot;CR.Date.Levels Vs Mean yield for &amp;quot;, plot_name),
expression(atop(italic(
&amp;quot;(Anova:TukeyHSD)&amp;quot;
), &amp;quot;&amp;quot;))) +
# ggtitle(paste0(&amp;quot;CR.Date.Levels Vs Mean yield for &amp;quot;, plot_name)) +
theme(plot.title = element_text(hjust = 0.5, face = &amp;#39;bold&amp;#39;)) +
geom_boxplot(fill = &amp;#39;grey&amp;#39;, stat = &amp;quot;boxplot&amp;quot;) +
# coord_cartesian(clip = &amp;#39;off&amp;#39;) +
geom_text(
data = final,
aes(x = CR.Date.Levels, y = Yield, label = Letters),
vjust = -3.5,
hjust = -.5
) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
# geom_vline(aes(xintercept = 4.5), linetype = &amp;quot;dashed&amp;quot;) +
theme(plot.title = element_text(vjust = -0.6)) +
coord_cartesian(ylim = c(min(field$Yield), max(field$Yield) + 10))
print(p)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Function to calculate mean and sd for each field for a given interval of
ControlRate and then calculate Required Replicates and EffectSize. I have made
one function to do all that so I can just use this function to analyze all
four fields. To analyze single field set &lt;code&gt;Single.Field.Analysis = TRUE&lt;/code&gt;, and
to analyze all four field together, set &lt;code&gt;Single.Field.Analysis = FALSE&lt;/code&gt;,&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;calculate_field_mean_SD_and_get_RR_EffSize &amp;lt;- 
  function(
    field, intervals = 1000, Single.Field.Analysis = TRUE, Date.Only = FALSE, printplot = FALSE){
    options(warn=1)
    plot_NAME &amp;lt;- (deparse(substitute(field)))
    if(Single.Field.Analysis &amp;gt; 0){
      # removing rows with NAs in Yield
      sum(is.na(field$Yield))
      # field &amp;lt;- field[!complete.cases(field$Yield), ]
      field &amp;lt;- field[!is.na(field$Yield),]
      # as.factor(fieldA$ControlRate)
      
      
      # work on timestamp columns
      field$Date &amp;lt;- gsub(&amp;quot;T.*&amp;quot;, &amp;quot;&amp;quot;, field$Timestamp)
      field$Time &amp;lt;- gsub(&amp;quot;.*T|Z&amp;quot;, &amp;quot;&amp;quot;, field$Timestamp)
      # Range in days
      field$date_time &amp;lt;- as.POSIXct(paste(field$Date, field$Time), tz = &amp;quot;UTC&amp;quot;)
      
      
      # table.field &amp;lt;- table(as.factor(field$Date))
      field$ControlRate.Levels &amp;lt;- as.factor(intervals * ceiling(field$ControlRate/intervals))
      if(Date.Only &amp;lt; 1){
      field$CR.Date.Levels &amp;lt;- as.factor(paste(field$ControlRate.Levels, field$Date, sep = &amp;quot;*&amp;quot;))
      } else {
        field$CR.Date.Levels &amp;lt;- as.factor(field$Date)
      }
      table.field &amp;lt;- table(as.factor(field$CR.Date.Levels))
      
      
      
      
      field.Count &amp;lt;- setNames(aggregate(field$CR.Date.Levels, 
                                        by = list(field$CR.Date.Levels), FUN = length), c(&amp;quot;CR.Date.Levels&amp;quot;, &amp;quot;Count&amp;quot;))
      # # Degree of freedome = n * k - k
      # field.Count$degree.Freedom &amp;lt;- 
      #   (field.Count$Count * length(field.Count$ControlRate)) -length(field.Count$ControlRate)
      
      field.mean &amp;lt;-
        setNames(aggregate(
          field$Yield,
          by = list(field$CR.Date.Levels),
          FUN = mean
        ),
        c(&amp;quot;CR.Date.Levels&amp;quot;, &amp;quot;Mean&amp;quot;))
      
      
      field.SD &amp;lt;-
        setNames(aggregate(
          field$Yield,
          by = list(field$CR.Date.Levels),
          FUN = sd
        ),
        c(&amp;quot;CR.Date.Levels&amp;quot;, &amp;quot;SD&amp;quot;))
      
      
      if(printplot == 1 ){
        get_my_box_plot(field, plot_name = plot_NAME)
      }
      
      # plot individual fields with tukey test We will print box plot only if we
      # want for certain ControlRates intervals. Otherwise we will have too many
      # plots
    } else {
      temp.Field &amp;lt;- field
      colnames(temp.Field)[colnames(temp.Field) == &amp;quot;CR.Date.Levels&amp;quot;] &amp;lt;- &amp;quot;ControlRate.Levels&amp;quot;
      colnames(temp.Field)[colnames(temp.Field) == &amp;quot;Mean&amp;quot;] &amp;lt;- &amp;quot;Yield&amp;quot;
      # get_my_box_plot(temp.Field)
      field.SD  &amp;lt;- 
        as.data.frame(cbind(ControlRate = field[&amp;quot;CR.Date.Levels&amp;quot;], SD = field[&amp;quot;SD_pooled&amp;quot;]))
      field.mean &amp;lt;- 
        as.data.frame(cbind(ControlRate = field[&amp;quot;CR.Date.Levels&amp;quot;], Mean = field[&amp;quot;Mean&amp;quot;]))
    }
    
    # Calculate Required replicate and Effect Size from each
    # field for ControlRate i vs i+1
    
    # ReqRep_EffectSize_table &amp;lt;- function (field.mean, field.SD){
    Req.Rep.table.field &amp;lt;- {}
    for (i in 1:nrow(field.SD)){
      if(i+1 &amp;gt; nrow(field.SD) ){
        break
      }
      temp.Effect.size &amp;lt;-
        cohen.d(
          m1 = field.mean$Mean[i],
          s1 = field.SD$SD[i],
          m2 = field.mean$Mean[i + 1],
          s2 = field.SD$SD[i + 1]
        )
      
      tmp.req.reps &amp;lt;-
        required.replicates(
          m1 = field.mean$Mean[i],
          s1 = field.SD$SD[i],
          m2 = field.mean$Mean[i + 1],
          s2 = field.SD$SD[i + 1]
        )
      
      tmp.table &amp;lt;-
        cbind(
          Group = paste0(field.SD$CR.Date.Levels[i], &amp;quot; Vs &amp;quot;, field.SD$CR.Date.Levels[i + 1]),
          EffectSize = temp.Effect.size,
          RequiredReplicates = tmp.req.reps
        )
      
      Req.Rep.table.field &amp;lt;- rbind(Req.Rep.table.field, tmp.table)
    }
    if (Single.Field.Analysis &amp;gt; 0) {
      return(
        list(
          field.mean = field.mean,
          fieldSD = field.SD,
          field.Count = field.Count,
          Req.Rep.table.field = Req.Rep.table.field
        )
      )
    } else{
      return(list(Req.Rep.table.field = Req.Rep.table.field))
    }
  }&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, I am reading all files in my directory we set in the begining
(path.final). I was being a bit lazy to copy hard coded paths. I then read those
files in for loop and assigned them to their respective variable names [eg,
gsub(“.csv”,&amp;quot;&amp;quot;,filename.csv)].&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# all.files contains the file name of all csv files in our directory. I have decided to
# read all files from the system rather than reading one file at a time.

# setwd(path.final)
# if using local path
# all.files &amp;lt;- list.files(path.final)

# using from github
all.files &amp;lt;- path.final
all.files &amp;lt;- all.files[grepl(&amp;quot;*.csv&amp;quot;, all.files)]

# # selecting only required files


all.files &amp;lt;- all.files[grepl(&amp;quot;seedA.csv|seedB.csv|seedC.csv|seedD.csv|harvestA.csv|harvestB.csv|harvestC.csv|harvestD.csv&amp;quot;, all.files)]

# # Or choose specifically which data files in path to analyze
# all.files &amp;lt;- all.files &amp;lt;- c(&amp;quot;seedA.csv&amp;quot;, &amp;quot;seedB.csv&amp;quot;, &amp;quot;seedC.csv&amp;quot;, &amp;quot;seedD.csv&amp;quot;)

# Rearranging the vectors, putting seed data first and then harvest data
all.files &amp;lt;-
c(all.files[grepl(&amp;quot;seed&amp;quot;, all.files)], all.files[grepl(&amp;quot;harvest&amp;quot;, all.files)])
# all.files
# [1] &amp;quot;harvestA.csv&amp;quot; &amp;quot;harvestB.csv&amp;quot; &amp;quot;harvestC.csv&amp;quot; &amp;quot;harvestD.csv&amp;quot; &amp;quot;seedA.csv&amp;quot;    &amp;quot;seedB.csv&amp;quot;    &amp;quot;seedC.csv&amp;quot;    &amp;quot;seedD.csv&amp;quot;

#https://raw.githubusercontent.com/achalneupane/data/master/
# reading all csv files within the path and saving them to their respective names.
for (i in 1:length(all.files)) {
assign(
gsub(&amp;quot;.*master/|.csv&amp;quot;, &amp;quot;&amp;quot;, all.files)[i],
read.table(gsub(&amp;quot;blob/&amp;quot;, &amp;quot;&amp;quot;,paste0(&amp;quot;https://raw.githubusercontent.com&amp;quot;,all.files[i])),
header = TRUE,
sep = &amp;quot;,&amp;quot;)
)
print(paste0(&amp;quot;Read file &amp;quot;, all.files[i], &amp;#39; !&amp;#39;))
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Read file /achalneupane/data/blob/master/seedA.csv !&amp;quot;
## [1] &amp;quot;Read file /achalneupane/data/blob/master/seedB.csv !&amp;quot;
## [1] &amp;quot;Read file /achalneupane/data/blob/master/seedC.csv !&amp;quot;
## [1] &amp;quot;Read file /achalneupane/data/blob/master/seedD.csv !&amp;quot;
## [1] &amp;quot;Read file /achalneupane/data/blob/master/harvestA.csv !&amp;quot;
## [1] &amp;quot;Read file /achalneupane/data/blob/master/harvestB.csv !&amp;quot;
## [1] &amp;quot;Read file /achalneupane/data/blob/master/harvestC.csv !&amp;quot;
## [1] &amp;quot;Read file /achalneupane/data/blob/master/harvestD.csv !&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# head(harvestA)
# head(harvestB) # and so on..&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, I am using &lt;code&gt;get_question_1_and_2_answers&lt;/code&gt; to extract date information by
looping over all data files we just read above.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# make a table of date range
range_table &amp;lt;- {}
one.hour.time.difference &amp;lt;- data.frame()
for (i in 1:length(all.files)) {
# file.dat &amp;lt;- eval(sub(&amp;quot;.csv&amp;quot;, &amp;quot;&amp;quot;, all.files, fixed = TRUE)[i])
file.dat &amp;lt;- eval(gsub(&amp;quot;.*master/|.csv&amp;quot;, &amp;quot;&amp;quot;, all.files)[i])
# print(paste0(&amp;quot;Doing time thing for &amp;quot;, file.dat, &amp;quot;...&amp;quot;))
dat &amp;lt;- get_question_1_and_2_answers(eval(parse(text = file.dat)))
tmp.range.of.days &amp;lt;-
cbind(
data = file.dat,
range_from_start_to_end_date_in_days = dat$range_from_start_to_end_date_in_days,
elapsed.dates.each.field = dat$elapsed.dates.each.field,
range_of_start_end_date = dat$range_of_start_end_date,
time.range.each.day = dat$time.range.each.day,
time.elapsed.each.day = dat$time.elapsed.each.day
)
range_table &amp;lt;- rbind(range_table, tmp.range.of.days)

tmp.one.hour.time.difference &amp;lt;- dat$one_hour_gap_time_stamp
tmp.one.hour.time.difference$field &amp;lt;- file.dat

if (dim(as.data.frame(tmp.one.hour.time.difference))[1] &amp;gt;= 2) {
one.hour.time.difference &amp;lt;-
rbind.fill(one.hour.time.difference, tmp.one.hour.time.difference)
} else{
one.hour.time.difference &amp;lt;- one.hour.time.difference
}


}

range_table &amp;lt;- as.data.frame(range_table)
range_table$days_number &amp;lt;-
as.numeric(gsub(
&amp;#39; days|day&amp;#39;,
&amp;quot;&amp;quot;,
range_table$range_from_start_to_end_date_in_days
))

# Range table
range_table&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        data range_from_start_to_end_date_in_days elapsed.dates.each.field
## 1     seedA                            0.117 day                        0
## 2     seedB                            0.352 day                        1
## 3     seedB                            0.352 day                        1
## 4     seedC                             0.17 day                        1
## 5     seedC                             0.17 day                        1
## 6     seedD                             0.22 day                        0
## 7  harvestA                          18.824 days                       19
## 8  harvestA                          18.824 days                       19
## 9  harvestA                          18.824 days                       19
## 10 harvestB                            0.363 day                        0
## 11 harvestC                           1.085 days                        1
## 12 harvestC                           1.085 days                        1
## 13 harvestD                          43.214 days                       43
## 14 harvestD                          43.214 days                       43
## 15 harvestD                          43.214 days                       43
##     range_of_start_end_date time.range.each.day.Date
## 1  2018-05-17 to 2018-05-17               2018-05-17
## 2  2018-05-20 to 2018-05-21               2018-05-20
## 3  2018-05-20 to 2018-05-21               2018-05-21
## 4  2018-05-18 to 2018-05-19               2018-05-18
## 5  2018-05-18 to 2018-05-19               2018-05-19
## 6  2018-05-20 to 2018-05-20               2018-05-20
## 7  2018-10-27 to 2018-11-15               2018-10-27
## 8  2018-10-27 to 2018-11-15               2018-10-28
## 9  2018-10-27 to 2018-11-15               2018-11-15
## 10 2018-11-02 to 2018-11-02               2018-11-02
## 11 2018-11-11 to 2018-11-12               2018-11-11
## 12 2018-11-11 to 2018-11-12               2018-11-12
## 13 2018-10-01 to 2018-11-13               2018-10-01
## 14 2018-10-01 to 2018-11-13               2018-11-12
## 15 2018-10-01 to 2018-11-13               2018-11-13
##    time.range.each.day.Time time.elapsed.each.day.Date
## 1      15:24:19 to 18:13:06                 2018-05-17
## 2      18:50:11 to 21:53:11                 2018-05-20
## 3      02:41:49 to 03:16:59                 2018-05-21
## 4      22:24:15 to 23:59:59                 2018-05-18
## 5      00:00:00 to 02:29:27                 2018-05-19
## 6      13:20:08 to 18:36:20                 2018-05-20
## 7      21:07:30 to 23:06:33                 2018-10-27
## 8      16:22:46 to 22:13:25                 2018-10-28
## 9      16:31:55 to 16:53:40                 2018-11-15
## 10     15:01:21 to 23:43:43                 2018-11-02
## 11     15:34:34 to 23:59:59                 2018-11-11
## 12     00:00:00 to 17:37:01                 2018-11-12
## 13     17:04:25 to 17:32:04                 2018-10-01
## 14     17:42:25 to 23:55:58                 2018-11-12
## 15     15:10:12 to 22:11:56                 2018-11-13
##    time.elapsed.each.day.Time_elapsed (minutes) days_number
## 1                                    168.78665        0.117
## 2                                    183.00582        0.352
## 3                                     35.17333        0.352
## 4                                     95.73995        0.170
## 5                                    149.45087        0.170
## 6                                    316.21000        0.220
## 7                                    119.06642       18.824
## 8                                    350.63592       18.824
## 9                                     21.75020       18.824
## 10                                   522.35150        0.363
## 11                                   505.40003        1.085
## 12                                  1057.01712        1.085
## 13                                    27.65013       43.214
## 14                                   373.55237       43.214
## 15                                   421.71987       43.214&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is the range table for all fields. I have calculated the range for total
elapsed time (in terms of days) in &lt;code&gt;range_from_start_to_end_date_in_days&lt;/code&gt;
column, total dates elapsed in &lt;code&gt;elapsed.dates.each.field&lt;/code&gt; column, Range in dates
in &lt;code&gt;range_of_start_end_date&lt;/code&gt; column, time range each day (from start to end
time) in &lt;code&gt;time.range.each.day.Time&lt;/code&gt; column, total time spent in the field each
date in &lt;code&gt;time.elapsed.each.day.Time_elapsed (minutes)&lt;/code&gt; column.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# This is the list of consecutive rows with more than one hour time gap from all files:
one.hour.time.difference&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       X                Timestamp      LonM      LatM Moisture DISTANCE
## 1 27840 2018-11-12T01:51:27.071Z 208.29634 396.43056    15.33 1.075304
## 2 27849 2018-11-12T16:42:23.002Z  82.56309  62.87237    15.60 5.872164
##   VRYIELDVOL       Date         Time           date_time    field
## 1   133.3961 2018-11-12 01:51:27.071 2018-11-12 01:51:27 harvestC
## 2   119.6537 2018-11-12 16:42:23.002 2018-11-12 16:42:23 harvestC&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I was able to find more than an hour gap in consecutive rows in &lt;code&gt;harvestC&lt;/code&gt; data
only&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Plotting the total number of days for each field type
ggplot(range_table, aes(x = data, y = days_number)) + geom_point(size = 4) +
  ggtitle(&amp;quot;Plot in terms of elapsed time- \n start to end (in days)&amp;quot;) +
theme_bw() +
theme(
axis.line = element_line(colour = &amp;quot;black&amp;quot;),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank()
) +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
theme(text = element_text(size = 14)) +
scale_y_continuous(breaks = round(c(
1,
max(range_table$days_number) * 1 / 3,
max(range_table$days_number) * 2 / 3,
max(range_table$days_number)
), 2)) +
# to check if any of the data were planted/harvested within one day range
geom_hline(yintercept = 1) +
geom_text((aes(3, 1, label = &amp;quot;Within 1 day (24 hours margin)&amp;quot;, vjust = -1)))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/achalneupane.github.io/achal.github.io/post/Final_assignment_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Based on this plot, we can see that SeedA, seedB, seedC and seedD were all
planted within 24 hours span. We can also check the &lt;code&gt;range_table&lt;/code&gt; above to get
the exact timeframe for this. However, if want to see if they were planted or
harvested on the same date, then we can plot this figure below:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# If we want to see whether they were planted or harvested the same day (i.e
# Date) and (not necessarily 24 hours margin), we choose range_table$elapsed.dates.each.field


# Now plot them
ggplot(range_table, aes(x = data, y = elapsed.dates.each.field)) +
  geom_point(size = 2) +
  theme_bw() +
  ggtitle(&amp;quot;Plot in terms of elapsed dates&amp;quot;) +
  theme(axis.line = element_line(colour = &amp;quot;black&amp;quot;),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.border = element_blank(),
        panel.background = element_blank()) +
  theme(axis.text.x = element_text(angle = 90, hjust = 1)) + 
  theme(text = element_text(size=14)) +
# to check if any of the data were planted/harvested the same &amp;quot;Date&amp;quot;
geom_hline(yintercept = 1) +
  geom_hline(yintercept = 0, color=&amp;quot;blue&amp;quot;, linetype=&amp;quot;dashed&amp;quot;) +
geom_text((aes(3, 1, label = &amp;quot;Margin outside the \&amp;quot;same\&amp;quot; date&amp;quot;, vjust = -1)))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/achalneupane.github.io/achal.github.io/post/Final_assignment_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;This plot above shows that seedA and seedD were planted on the same date, and
harvestB was harvested also on the same date. Rest of the field data were
harvested/planted for multiple dates. Bubbles within the black solid line
indicates that the fields were, harvested/planted the same date. Only seedA,
seedD and harvestB are within the solid line. Here, Y axis margin of 1 means
next date. Data within the black and dashed blue lines indicate the same date.&lt;/p&gt;
&lt;p&gt;Additionally, if we want to see how many hours were spent on each field in
total, we can plot this below:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot.new &amp;lt;- range_table[, c(&amp;quot;data&amp;quot;, &amp;quot;time.elapsed.each.day.Time_elapsed (minutes)&amp;quot;, &amp;quot;time.elapsed.each.day.Date&amp;quot;)]
plot.new$time.elapsed.each.day.Time_elapsed &amp;lt;- as.numeric(plot.new$`time.elapsed.each.day.Time_elapsed (minutes)`)
plot.new$time.elapsed.each.day.Time_elapsed.in.hour &amp;lt;- plot.new$time.elapsed.each.day.Time_elapsed/60
plot.new.data &amp;lt;- setNames(aggregate(plot.new$time.elapsed.each.day.Time_elapsed.in.hour, list(range_table$data), sum), c(&amp;quot;group&amp;quot;, &amp;quot;time.spent.in.hours&amp;quot;))

ggplot(plot.new.data, aes(x = group, y = time.spent.in.hours)) +
  geom_point(size = 4) +
  theme_bw() +
  ggtitle(&amp;quot;Plot in terms of total time spent in hours&amp;quot;) +
  theme(axis.line = element_line(colour = &amp;quot;black&amp;quot;),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.border = element_blank(),
        panel.background = element_blank()) +
  theme(axis.text.x = element_text(angle = 90, hjust = 1)) + 
  theme(text = element_text(size=14)) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/achalneupane.github.io/achal.github.io/post/Final_assignment_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Based on this above plot, it looks like only harvestC and harvestD had more than
10 hours spent on them.&lt;/p&gt;
&lt;p&gt;Now, we can also plot start and end time for everyday record:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;range_table$start_date_time &amp;lt;-
as.POSIXct(paste(
range_table$time.range.each.day.Date ,
gsub(&amp;quot;to.*| &amp;quot;, &amp;quot;&amp;quot;, range_table$time.range.each.day.Time)
), tz = &amp;#39;UTC&amp;#39;)
range_table$end_date_time &amp;lt;-
as.POSIXct(paste(
range_table$time.range.each.day.Date ,
gsub(&amp;quot;.*to| &amp;quot;, &amp;quot;&amp;quot;, range_table$time.range.each.day.Time)
), tz = &amp;#39;UTC&amp;#39;)


tt &amp;lt;- range_table[, c(&amp;quot;data&amp;quot;, &amp;quot;start_date_time&amp;quot;, &amp;quot;end_date_time&amp;quot;)]

tt &amp;lt;- melt(tt, id = &amp;quot;data&amp;quot;)



# Plot for date and time

ggplot(tt, aes(
x = data,
y = as.character.Date(value),
colour = variable
)) +
geom_point(size = 4) +
ylab(&amp;quot;Dates and Time&amp;quot;) +
theme_bw() +
ggtitle(&amp;quot;Start and end time for everyday record&amp;quot;) +
theme(
axis.line = element_line(colour = &amp;quot;black&amp;quot;),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank()
) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 14)) +
theme(axis.text.y = element_text(angle = 0, hjust = 1, size = 8)) +
# theme(text = element_text(size = 14)) +
geom_hline(yintercept = 1:length(tt$value), linetype = &amp;quot;dotted&amp;quot;) +
labs(color = &amp;#39;Each Day&amp;#39;) +
scale_color_manual(labels = c(&amp;quot;START_time&amp;quot;, &amp;quot;END_time&amp;quot;),
values = c(&amp;quot;blue&amp;quot;, &amp;quot;red&amp;quot;)) &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/achalneupane.github.io/achal.github.io/post/Final_assignment_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;672&#34; /&gt;
This plot also shows similar result as with previous plot, but with both start
and end time.&lt;/p&gt;
&lt;p&gt;We can also check the moisture level differences in the fields by date and
times.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Now, let&amp;#39;s work on the effect of time/dates on moiture level
tt1 &amp;lt;- harvestA
tt2 &amp;lt;- harvestB
tt3 &amp;lt;- harvestC
tt4 &amp;lt;- harvestD

tt1$type &amp;lt;- &amp;quot;harvestA&amp;quot;
tt2$type &amp;lt;- &amp;quot;harvestB&amp;quot;
tt3$type &amp;lt;- &amp;quot;harvestC&amp;quot;
tt4$type &amp;lt;- &amp;quot;harvestD&amp;quot;

make_posixct &amp;lt;- function(x) {
  x$Date &amp;lt;- gsub(&amp;quot;T.*&amp;quot;, &amp;quot;&amp;quot;, x$Timestamp)
  x$Date &amp;lt;- as.factor(x$Date)
  x$Time &amp;lt;- gsub(&amp;quot;.*T|Z&amp;quot;, &amp;quot;&amp;quot;, x$Timestamp)
  n &amp;lt;- 2
  pat &amp;lt;- paste0(&amp;#39;^([^:]+(?::[^:]+){&amp;#39;, n - 1, &amp;#39;}).*&amp;#39;)
  x$Time  &amp;lt;- as.factor(sub(pat, &amp;#39;\\1&amp;#39;, x$Time))
  return(x)
}

tt1 &amp;lt;- make_posixct(tt1)
tt2 &amp;lt;- make_posixct(tt2)
tt3 &amp;lt;- make_posixct(tt3)
tt4 &amp;lt;- make_posixct(tt4)
colnames(tt2) &amp;lt;- colnames(tt1)


df &amp;lt;- rbind(tt1, tt2, tt3, tt4)

df$Time &amp;lt;-
  as.POSIXct(strptime(df$Time, format = &amp;quot;%H:%M&amp;quot;, tz = &amp;quot;UTC&amp;quot;))
lims &amp;lt;-
  as.POSIXct(strptime(c(&amp;quot;0:00&amp;quot;, &amp;quot;23:59&amp;quot;), format = &amp;quot;%H:%M&amp;quot;, tz = &amp;quot;UTC&amp;quot;))
p &amp;lt;-
  ggplot(data = df, aes(
    x = Time,
    y = Moisture,
    colour = as.factor(Date)
  )) +
  geom_point() +
  scale_x_datetime(
    limits = lims,
    breaks = date_breaks(&amp;quot;2 hour&amp;quot;),
    labels = date_format(&amp;quot;%H:%M&amp;quot;, tz = &amp;quot;UTC&amp;quot;)
  ) +
  labs(color = &amp;#39;Dates&amp;#39;) +
  facet_grid(. ~ type)
p + theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 8))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/achalneupane.github.io/achal.github.io/post/Final_assignment_files/figure-html/unnamed-chunk-12-1.png&#34; width=&#34;672&#34; /&gt;
Based on this figure above, we can see that the moisture content is very low
from midnight to 2:00pm, but then after, it increases substantially. I don’t
think there is so much difference in moisture in terms of harvest dates though.&lt;/p&gt;
&lt;p&gt;I tried to pull weather data for each observation, however the api I used only
allows 1000 requests per day, so I did not include that data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# We can use darksky like api&amp;#39;s to pull weather data, however it&amp;#39;s not
# possible as we have so many observations. Only allows 1000 downloads per day.

# install.packages(&amp;quot;darksky&amp;quot;)
library(darksky) darksky_api_key(force = TRUE)
#API: 60b8ca6aaece606b21c0dfec1cb7ec9f
head(seedA)
# field_or_seed &amp;lt;- seedA 
tmp &amp;lt;- get_forecast_for(10.25209, 478.4000, &amp;quot;2013-05-06T12:00:00&amp;quot;)

# Create empty columns and cbind to the field data so you can add new weather
data field_or_seed &amp;lt;- cbind(field_or_seed, setNames(lapply(get.weather.cols,
function(x) x = NA), get.weather.cols)) 
field_or_seed$Date &amp;lt;- gsub(&amp;quot;T.*&amp;quot;, &amp;quot;&amp;quot;, field_or_seed$Timestamp)
field_or_seed$Time &amp;lt;- gsub(&amp;quot;.*T|Z&amp;quot;, &amp;quot;&amp;quot;, field_or_seed$Timestamp) # Range in days field_or_seed$date_time &amp;lt;-
as.POSIXct(paste(field_or_seed$Date, field_or_seed$Time), tz = &amp;quot;UTC&amp;quot;)

field_or_seed_with_weather &amp;lt;- {}
for (i in 1:nrow(field_or_seed)) {
print(paste0(&amp;quot;My iteration is: &amp;quot;, i)) tmp.min &amp;lt;-
get_forecast_for(44.311356, -96.798386, min(field_or_seed$date_time[i]))
tmp.weather.data &amp;lt;- cbind(field_or_seed[i,], tmp.min$daily)
field_or_seed_with_weather &amp;lt;- rbind(field_or_seed_with_weather,
tmp.weather.data)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Additional work:&lt;/p&gt;
&lt;p&gt;Let’s read our csv files from midterm&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# # If using local path
#   setwd(path.midterm)
#   all.files &amp;lt;- list.files(path.midterm)
  # here, instead, I am just using the URL
  all.files &amp;lt;- path.midterm
  all.files &amp;lt;- all.files[grepl(&amp;quot;*.csv&amp;quot;, all.files)]
  # &amp;gt; all.files
  # [1] &amp;quot;fieldA.csv&amp;quot; &amp;quot;fieldB.csv&amp;quot; &amp;quot;fieldC.csv&amp;quot; &amp;quot;fieldD.csv&amp;quot;
  

all.files &amp;lt;- all.files[grepl(&amp;quot;fieldA.csv|fieldB.csv|fieldC.csv|fieldD.csv&amp;quot;, all.files)]  
  
  
# reading all csv files within the path and saving them with their respective
# names
# https://raw.githubusercontent.com/achalneupane/data/master/
# reading all csv files within the path and saving them to their respective names.
for (i in 1:length(all.files)) {
assign(
gsub(&amp;quot;.*master/|.csv&amp;quot;, &amp;quot;&amp;quot;, all.files)[i],
read.table(gsub(&amp;quot;blob/&amp;quot;, &amp;quot;&amp;quot;,paste0(&amp;quot;https://raw.githubusercontent.com&amp;quot;,all.files[i])),
header = TRUE,
sep = &amp;quot;,&amp;quot;)
)
print(paste0(&amp;quot;Read file &amp;quot;, all.files[i], &amp;#39; !&amp;#39;))
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Read file /achalneupane/data/blob/master/fieldA.csv !&amp;quot;
## [1] &amp;quot;Read file /achalneupane/data/blob/master/fieldB.csv !&amp;quot;
## [1] &amp;quot;Read file /achalneupane/data/blob/master/fieldC.csv !&amp;quot;
## [1] &amp;quot;Read file /achalneupane/data/blob/master/fieldD.csv !&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;  # Now, let&amp;#39;s merge field and seed data
  
  # head(fieldA)
  # head(seedA)
  
  dataA &amp;lt;-
  merge(
  fieldA,
  seedA,
  by.x = c(&amp;quot;Easting&amp;quot;, &amp;quot;Northing&amp;quot;),
  by.y = c(&amp;quot;LonM&amp;quot;, &amp;quot;LatM&amp;quot;)
  )
  colnames(dataA) &amp;lt;- gsub(&amp;quot;.x&amp;quot;, &amp;quot;&amp;quot;, colnames(dataA))
  dataB &amp;lt;-
  merge(
  fieldB,
  seedB,
  by.x = c(&amp;quot;Easting&amp;quot;, &amp;quot;Northing&amp;quot;),
  by.y = c(&amp;quot;LonM&amp;quot;, &amp;quot;LatM&amp;quot;)
  )
  colnames(dataB) &amp;lt;- gsub(&amp;quot;.x&amp;quot;, &amp;quot;&amp;quot;, colnames(dataB))
  dataC &amp;lt;-
  merge(
  fieldC,
  seedC,
  by.x = c(&amp;quot;Easting&amp;quot;, &amp;quot;Northing&amp;quot;),
  by.y = c(&amp;quot;LonM&amp;quot;, &amp;quot;LatM&amp;quot;)
  )
  colnames(dataC) &amp;lt;- gsub(&amp;quot;.x&amp;quot;, &amp;quot;&amp;quot;, colnames(dataC))
  dataD &amp;lt;-
  merge(
  fieldD,
  seedD,
  by.x = c(&amp;quot;Easting&amp;quot;, &amp;quot;Northing&amp;quot;),
  by.y = c(&amp;quot;LonM&amp;quot;, &amp;quot;LatM&amp;quot;)
  )
  colnames(dataD) &amp;lt;- gsub(&amp;quot;.x&amp;quot;, &amp;quot;&amp;quot;, colnames(dataD))
  
  # Taking 1000 ControlRates interval, we will also compare different dates (i.e,
  # ControlRate and date pairs) for each merged seed and field data.
  
  ControlRateInterval &amp;lt;- 1000
  # field A
  fieldA.data &amp;lt;-
  calculate_field_mean_SD_and_get_RR_EffSize(field = dataA, intervals = ControlRateInterval)
  # fieldA.data
  
  
  # field B
  fieldB.data &amp;lt;-
  calculate_field_mean_SD_and_get_RR_EffSize(field = dataB, intervals = ControlRateInterval)
  
  # fieldB.data
  
  # From midterm for fieldB, we saw significant difference between all Control Rates of
  # Seeding except between 28000 Vs 29000. The seeding rates of 28000 has the
  # highest Mean yield here.
  
  # field C
  fieldC.data &amp;lt;-
  calculate_field_mean_SD_and_get_RR_EffSize(field = dataC, intervals = ControlRateInterval)
  # fieldC.data
  
  # From midterm for fieldC, we saw all Control rates of seeding are significantly diffferent with the highest Mean yeild for 28000.
  
  # field D
  fieldD.data &amp;lt;-
  calculate_field_mean_SD_and_get_RR_EffSize(field = dataD, intervals = ControlRateInterval)
 # fieldD.data&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Based on my analysis from midterm, we saw that it is better to compare all
four fields together. Also, I do not want to clutter this report with too many
figures and tables, I am analyzing 1000 Control Rate and all four fields
merged together. This way we can compare the skewed data points if we analyze
with date and ControlRate pairs. I have done this analysis below&lt;/p&gt;
&lt;p&gt;We can now merge all four fields for SD, means and ControlRate level counts.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;  merged.SD.4.plots &amp;lt;-
  Reduce(
  function(x, y)
  merge(x, y, all = TRUE),
  list(
  fieldA.data$fieldSD,
  fieldB.data$fieldSD,
  fieldC.data$fieldSD,
  fieldD.data$fieldSD
  )
  )
  
  
  merged.Mean.4.plots &amp;lt;-
  Reduce(
  function(x, y)
  merge(x, y, all = TRUE),
  list(
  fieldA.data$field.mean,
  fieldB.data$field.mean,
  fieldC.data$field.mean,
  fieldD.data$field.mean
  )
  )
  
  
  merged.Count.4.plots &amp;lt;-
  Reduce(
  function(x, y)
  merge(x, y, all = TRUE),
  list(
  fieldA.data$field.Count,
  fieldB.data$field.Count,
  fieldC.data$field.Count,
  fieldD.data$field.Count
  )
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We need SD pooled for these levels so we can calculate Cohen’s d and Required
Replicates.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;  levels(merged.SD.4.plots$CR.Date.Levels)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] &amp;quot;23000*2018-05-17&amp;quot; &amp;quot;24000*2018-05-17&amp;quot; &amp;quot;25000*2018-05-17&amp;quot;
##  [4] &amp;quot;26000*2018-05-17&amp;quot; &amp;quot;27000*2018-05-17&amp;quot; &amp;quot;28000*2018-05-17&amp;quot;
##  [7] &amp;quot;29000*2018-05-17&amp;quot; &amp;quot;24000*2018-05-20&amp;quot; &amp;quot;25000*2018-05-20&amp;quot;
## [10] &amp;quot;25000*2018-05-21&amp;quot; &amp;quot;26000*2018-05-20&amp;quot; &amp;quot;26000*2018-05-21&amp;quot;
## [13] &amp;quot;27000*2018-05-20&amp;quot; &amp;quot;27000*2018-05-21&amp;quot; &amp;quot;28000*2018-05-20&amp;quot;
## [16] &amp;quot;28000*2018-05-21&amp;quot; &amp;quot;29000*2018-05-20&amp;quot; &amp;quot;29000*2018-05-21&amp;quot;
## [19] &amp;quot;23000*2018-05-18&amp;quot; &amp;quot;24000*2018-05-18&amp;quot; &amp;quot;25000*2018-05-18&amp;quot;
## [22] &amp;quot;26000*2018-05-18&amp;quot; &amp;quot;26000*2018-05-19&amp;quot; &amp;quot;27000*2018-05-18&amp;quot;
## [25] &amp;quot;27000*2018-05-19&amp;quot; &amp;quot;28000*2018-05-18&amp;quot; &amp;quot;28000*2018-05-19&amp;quot;
## [28] &amp;quot;23000*2018-05-20&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;  # First, we merged all merged.SD.4.plots, merged.Mean.4.plots and
  # merged.Count.4.plots from all fields.
  # Therefore, now merging all three dataframes from all four plots for SD, Mean
  # and counts by ControlRate column
  
  Mean_SD_Count.dat &amp;lt;- Reduce(function(...)
  merge(..., by = c(&amp;quot;CR.Date.Levels&amp;quot;, &amp;quot;grp&amp;quot;), all.x = TRUE),
  lapply(
  list(merged.Mean.4.plots, merged.SD.4.plots, merged.Count.4.plots),
  transform,
  grp = ave(seq_along(CR.Date.Levels), CR.Date.Levels, FUN = seq_along)
  ))
  # head(Mean_SD_Count.dat)
  
  # Now, we can also do Anova on the merged data `Mean_SD_Count.dat`
  
  Mean_SD_Count_merged_for_all_four_plots &amp;lt;- Mean_SD_Count.dat
  Mean_SD_Count_merged_for_all_four_plots$Yield &amp;lt;-
  Mean_SD_Count_merged_for_all_four_plots$Mean
  Mean_SD_Count_merged_for_all_four_plots$ControlRate.Levels &amp;lt;-
  Mean_SD_Count_merged_for_all_four_plots$ControlRate
  
  get_my_box_plot(Mean_SD_Count_merged_for_all_four_plots, plot_name = &amp;quot;all four fields&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/achalneupane.github.io/achal.github.io/post/Final_assignment_files/figure-html/unnamed-chunk-16-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Based on this plot above, from all fields, we can tell that, Control Rates of
seeding of 23000-25000 has significantly less Mean yield as compared to
26000-29000. It looks like Control Rates of Seeding between 27000 and 28000
has the highest Mean yield. I also think that there is no effect on seeding
dates, I have done some analysis to show the seeding effect only in the last
part of this report and based on that as well, I do not think there is
significant effect of Dates on Yield.&lt;/p&gt;
&lt;p&gt;We now calculate pooled SD for merged 4 plots &lt;code&gt;Mean_SD_Count.dat&lt;/code&gt; to calculate
Effect Size and Required Replicates for all fields (combined analysis) using
pooled SD.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pooled.dat &amp;lt;- Mean_SD_Count.dat


# # Pooled sd can be calculated as:
pooled.dat$df &amp;lt;- pooled.dat$Count - 1
# pooled SD is :
# pooledSD &amp;lt;- sqrt( sum(pooled.dat$sd^2 * pooled.dat$df) / sum(pooled.dat$df) )

# We can calculate our SD pooled using this formula:
#  s_{pooled} = \sqrt{\frac{\sum_i (n_i-1)s_i^2}{N-k}}
# We will derrive this in steps as below:

pooled.dat$df &amp;lt;- pooled.dat$Count - 1
pooled.dat$sd.square &amp;lt;- pooled.dat$SD ^ 2

pooled.dat$ss &amp;lt;- pooled.dat$sd.square * pooled.dat$df


# We can use convenience function (aggregate) for splitting and calculating
# the necessary sums.
ds &amp;lt;- aggregate(ss ~ CR.Date.Levels, data = pooled.dat, sum)

# Two different built-in methods for split apply, we could use aggregate for
# both if we wanted. This calculates our degrees of freedom.
ds$df &amp;lt;- tapply(pooled.dat$df, pooled.dat$CR.Date.Levels, sum)
# divide ss by df and then we get sd square
ds$sd.square &amp;lt;- ds$ss / ds$df
# Finally, we can get our sd pooled
ds$SD_pooled &amp;lt;- sqrt(ds$sd.square)
# ds

# However, we could also calculate our sd_pooled as below and get the same results :
# sd_pooled &amp;lt;- lapply( split(Mean_SD_Count.dat, Mean_SD_Count.dat$CR.Date.Levels),
# function(dd) sqrt( sum( dd$SD^2 * (dd$Count-1) )/(sum(dd$Count-1)-nrow(dd)) ) )

# Now, we calculate Mean (Mean of Means) from the merged table
# `Mean_SD_Count.dat so we can calculate Cohens d and RequiredReplicates for all
# four field combined.

ds.Mean &amp;lt;-
setNames(aggregate(
Mean_SD_Count.dat$Mean,
by = list(Mean_SD_Count.dat$CR.Date.Levels),
FUN = mean
),
c(&amp;quot;CR.Date.Levels&amp;quot;, &amp;quot;Mean&amp;quot;))

ds &amp;lt;- merge(ds, ds.Mean, by.x = &amp;quot;CR.Date.Levels&amp;quot;)
# ds

# Now we calculate the Effect Size and Cohen&amp;#39;s D for the combined 4 plots using
# mean yield and sd pooled for different ControlRate

# Now we calculate the Effect Size and Cohen&amp;#39;s D for the combined 4 plots using
# mean yield and sd pooled for different ControlRate usinf our function

RequiredReplicates_for_all_fields &amp;lt;-
calculate_field_mean_SD_and_get_RR_EffSize(
field = ds,
intervals = ControlRateInterval,
Single.Field.Analysis = FALSE
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This table gives us the required replicates and effectSize for all ControlRates-Date pairs&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;RequiredReplicates_for_all_fields&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $Req.Rep.table.field
##       Group                                  EffectSize          
##  [1,] &amp;quot;23000*2018-05-17 Vs 23000*2018-05-18&amp;quot; &amp;quot;5.76937088213814&amp;quot;  
##  [2,] &amp;quot;23000*2018-05-18 Vs 23000*2018-05-20&amp;quot; &amp;quot;1.77467806243082&amp;quot;  
##  [3,] &amp;quot;23000*2018-05-20 Vs 24000*2018-05-17&amp;quot; &amp;quot;0.319085268435178&amp;quot; 
##  [4,] &amp;quot;24000*2018-05-17 Vs 24000*2018-05-18&amp;quot; &amp;quot;2.23695386227101&amp;quot;  
##  [5,] &amp;quot;24000*2018-05-18 Vs 24000*2018-05-20&amp;quot; &amp;quot;1.4793489792455&amp;quot;   
##  [6,] &amp;quot;24000*2018-05-20 Vs 25000*2018-05-17&amp;quot; &amp;quot;0.764820441835373&amp;quot; 
##  [7,] &amp;quot;25000*2018-05-17 Vs 25000*2018-05-18&amp;quot; &amp;quot;0.749715759825526&amp;quot; 
##  [8,] &amp;quot;25000*2018-05-18 Vs 25000*2018-05-20&amp;quot; &amp;quot;0.631404233619908&amp;quot; 
##  [9,] &amp;quot;25000*2018-05-20 Vs 25000*2018-05-21&amp;quot; &amp;quot;0.0122749797874684&amp;quot;
## [10,] &amp;quot;25000*2018-05-21 Vs 26000*2018-05-17&amp;quot; &amp;quot;1.86649999718639&amp;quot;  
## [11,] &amp;quot;26000*2018-05-17 Vs 26000*2018-05-18&amp;quot; &amp;quot;0.604237639607718&amp;quot; 
## [12,] &amp;quot;26000*2018-05-18 Vs 26000*2018-05-19&amp;quot; &amp;quot;0.335012013191533&amp;quot; 
## [13,] &amp;quot;26000*2018-05-19 Vs 26000*2018-05-20&amp;quot; &amp;quot;0.294694932900609&amp;quot; 
## [14,] &amp;quot;26000*2018-05-20 Vs 26000*2018-05-21&amp;quot; &amp;quot;0.0568859046090692&amp;quot;
## [15,] &amp;quot;26000*2018-05-21 Vs 27000*2018-05-17&amp;quot; &amp;quot;0.450821573333859&amp;quot; 
## [16,] &amp;quot;27000*2018-05-17 Vs 27000*2018-05-18&amp;quot; &amp;quot;0.227990733240137&amp;quot; 
## [17,] &amp;quot;27000*2018-05-18 Vs 27000*2018-05-19&amp;quot; &amp;quot;0.212920132008121&amp;quot; 
## [18,] &amp;quot;27000*2018-05-19 Vs 27000*2018-05-20&amp;quot; &amp;quot;0.186994200485925&amp;quot; 
## [19,] &amp;quot;27000*2018-05-20 Vs 27000*2018-05-21&amp;quot; &amp;quot;0.312513439276243&amp;quot; 
## [20,] &amp;quot;27000*2018-05-21 Vs 28000*2018-05-17&amp;quot; &amp;quot;0.296577835810804&amp;quot; 
## [21,] &amp;quot;28000*2018-05-17 Vs 28000*2018-05-18&amp;quot; &amp;quot;0.114094426452159&amp;quot; 
## [22,] &amp;quot;28000*2018-05-18 Vs 28000*2018-05-19&amp;quot; &amp;quot;2.35237654983648&amp;quot;  
## [23,] &amp;quot;28000*2018-05-19 Vs 28000*2018-05-20&amp;quot; &amp;quot;0.182678706582559&amp;quot; 
## [24,] &amp;quot;28000*2018-05-20 Vs 28000*2018-05-21&amp;quot; &amp;quot;0.703554320633904&amp;quot; 
## [25,] &amp;quot;28000*2018-05-21 Vs 29000*2018-05-17&amp;quot; &amp;quot;0.983655196454225&amp;quot; 
## [26,] &amp;quot;29000*2018-05-17 Vs 29000*2018-05-20&amp;quot; &amp;quot;0.927565354976892&amp;quot; 
## [27,] &amp;quot;29000*2018-05-20 Vs 29000*2018-05-21&amp;quot; &amp;quot;0.341504648673164&amp;quot; 
##       RequiredReplicates
##  [1,] &amp;quot;0&amp;quot;               
##  [2,] &amp;quot;5&amp;quot;               
##  [3,] &amp;quot;154&amp;quot;             
##  [4,] &amp;quot;3&amp;quot;               
##  [5,] &amp;quot;7&amp;quot;               
##  [6,] &amp;quot;27&amp;quot;              
##  [7,] &amp;quot;28&amp;quot;              
##  [8,] &amp;quot;39&amp;quot;              
##  [9,] &amp;quot;104183&amp;quot;          
## [10,] &amp;quot;5&amp;quot;               
## [11,] &amp;quot;43&amp;quot;              
## [12,] &amp;quot;140&amp;quot;             
## [13,] &amp;quot;181&amp;quot;             
## [14,] &amp;quot;4851&amp;quot;            
## [15,] &amp;quot;77&amp;quot;              
## [16,] &amp;quot;302&amp;quot;             
## [17,] &amp;quot;346&amp;quot;             
## [18,] &amp;quot;449&amp;quot;             
## [19,] &amp;quot;161&amp;quot;             
## [20,] &amp;quot;178&amp;quot;             
## [21,] &amp;quot;1206&amp;quot;            
## [22,] &amp;quot;3&amp;quot;               
## [23,] &amp;quot;470&amp;quot;             
## [24,] &amp;quot;32&amp;quot;              
## [25,] &amp;quot;16&amp;quot;              
## [26,] &amp;quot;18&amp;quot;              
## [27,] &amp;quot;135&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can plot this results&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;RequiredReplicates_for_all_fields &amp;lt;-
  as.data.frame(RequiredReplicates_for_all_fields$Req.Rep.table.field)
  
  RequiredReplicates_for_all_fields$Group &amp;lt;-
  factor(RequiredReplicates_for_all_fields$Group)
  
  RequiredReplicates_for_all_fields$RequiredReplicates &amp;lt;-
  as.numeric(as.character(RequiredReplicates_for_all_fields$RequiredReplicates))
  
  RequiredReplicates_for_all_fields$EffectSize &amp;lt;-
  as.numeric(as.character(RequiredReplicates_for_all_fields$EffectSize))
  
  
  # There are one or two extreme Required replicates and extreme Effect size. We can
  # remove them to plot them, so we can properly visualize the datapoints
  
  RequiredReplicates_for_all_fields &amp;lt;-
  RequiredReplicates_for_all_fields[RequiredReplicates_for_all_fields$RequiredReplicates &amp;lt; 4000, ]
  RequiredReplicates_for_all_fields &amp;lt;-
  RequiredReplicates_for_all_fields[RequiredReplicates_for_all_fields$EffectSize &amp;lt; 1.5, ]
  
  my_levels &amp;lt;-
  length(levels(RequiredReplicates_for_all_fields$Group))
  RequiredReplicates_for_all_fields$EffectSize &amp;lt;-
  round(RequiredReplicates_for_all_fields$EffectSize, 2)
  
  # scaleFUN &amp;lt;- function(x) sprintf(&amp;quot;%.2f&amp;quot;, x)
  # Plot RequiredReplicates_for_all_fields
  
  n &amp;lt;- my_levels
  qual_col_pals = brewer.pal.info[brewer.pal.info$category == &amp;#39;qual&amp;#39;, ]
  col_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))
  
  
  ggplot(
  RequiredReplicates_for_all_fields,
  aes(
  x = EffectSize,
  y = RequiredReplicates,
  shape = as.factor(Group),
  group = 1
  )
  ) +
  ggtitle(&amp;quot;Effect size Vs Required replicates \n for all fields data \n(Combined Effect)&amp;quot;) +
  geom_point(alpha = 0.9,
  size = 3,
  stroke = 1)  +
  scale_shape_manual(values = rep(c(0:2, 5:6, 9:10, 11:12, 14), times =
  4)) +
  scale_color_manual(values = col_vector) +
  geom_line(color = &amp;quot;black&amp;quot;) +
  scale_x_continuous(&amp;quot;EffectSize&amp;quot;,
  breaks = c(0,
  0.2,
  0.5,
  1,
  max(
  as.numeric(RequiredReplicates_for_all_fields$EffectSize)
  ))) +
  theme_bw() +
  theme(
  axis.title = element_text(size = 14, face = &amp;quot;bold&amp;quot;),
  axis.text = element_text(size = 10),
  plot.title = element_text(hjust = 0.5, face = &amp;quot;bold&amp;quot;),
  axis.line = element_line(colour = &amp;quot;black&amp;quot;),
  panel.grid.major = element_blank(),
  panel.grid.minor = element_blank(),
  panel.border = element_blank(),
  panel.background = element_blank()
  ) +
  labs(shape = &amp;quot;Comparison groups&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/achalneupane.github.io/achal.github.io/post/Final_assignment_files/figure-html/unnamed-chunk-19-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Based on this plot above, we can tell that there is strong negative correlation
between EffectSize and RequiredReplicates.&lt;/p&gt;
&lt;p&gt;So far, we analyzed our data for controlRates-Date pair, now we can also do the
same analysis for Date effect only.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;######################## Date Only Analysis !! ##############################

# If we want to do Date effect only without taking ControlRates into consideration, then we do the following:
  
# field A
fieldA.data &amp;lt;-
calculate_field_mean_SD_and_get_RR_EffSize(field = dataA,
intervals = ControlRateInterval,
Date.Only = TRUE)

# fieldA.data


# field B
fieldB.data &amp;lt;-
calculate_field_mean_SD_and_get_RR_EffSize(field = dataB,
intervals = ControlRateInterval,
Date.Only = TRUE)

# fieldB.data



# field C
fieldC.data &amp;lt;-
calculate_field_mean_SD_and_get_RR_EffSize(field = dataC,
intervals = ControlRateInterval,
Date.Only = TRUE)

# fieldC.data

# field D
fieldD.data &amp;lt;-
calculate_field_mean_SD_and_get_RR_EffSize(field = dataD,
intervals = ControlRateInterval,
Date.Only = TRUE)

# fieldD.data


# We can now merge all four fields  for SD, means and ControlRate level counts.

merged.SD.4.plots &amp;lt;-
Reduce(
function(x, y)
merge(x, y, all = TRUE),
list(
fieldA.data$fieldSD,
fieldB.data$fieldSD,
fieldC.data$fieldSD,
fieldD.data$fieldSD
)
)


merged.Mean.4.plots &amp;lt;-
Reduce(
function(x, y)
merge(x, y, all = TRUE),
list(
fieldA.data$field.mean,
fieldB.data$field.mean,
fieldC.data$field.mean,
fieldD.data$field.mean
)
)


merged.Count.4.plots &amp;lt;-
Reduce(
function(x, y)
merge(x, y, all = TRUE),
list(
fieldA.data$field.Count,
fieldB.data$field.Count,
fieldC.data$field.Count,
fieldD.data$field.Count
)
)

# We need SD pooled for these levels so we can calculate Cohen&amp;#39;s d and
# Required Replicates.

levels(merged.SD.4.plots$CR.Date.Levels)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;2018-05-17&amp;quot; &amp;quot;2018-05-20&amp;quot; &amp;quot;2018-05-21&amp;quot; &amp;quot;2018-05-18&amp;quot; &amp;quot;2018-05-19&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# First, we merged all merged.SD.4.plots, merged.Mean.4.plots and
# merged.Count.4.plots from all fields.

# Therefore, now merging all three dataframes from all four plots for SD, Mean
# and counts by ControlRate column

Mean_SD_Count.dat &amp;lt;- Reduce(function(...)
merge(..., by = c(&amp;quot;CR.Date.Levels&amp;quot;, &amp;quot;grp&amp;quot;), all.x = TRUE),
lapply(
list(merged.Mean.4.plots, merged.SD.4.plots, merged.Count.4.plots),
transform,
grp = ave(seq_along(CR.Date.Levels), CR.Date.Levels, FUN = seq_along)
))

head(Mean_SD_Count.dat)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   CR.Date.Levels grp     Mean       SD Count
## 1     2018-05-17   1 234.0993 40.74205  6710
## 2     2018-05-18   1 222.4764 20.50457  3880
## 3     2018-05-19   1 229.3088 10.26760  6524
## 4     2018-05-20   1 229.8301 26.90213  7747
## 5     2018-05-20   2 230.8569 30.22076 12654
## 6     2018-05-21   1 226.4394 19.87301  1574&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Now, we can also do Anova on the merged data `Mean_SD_Count.dat`

Mean_SD_Count_merged_for_all_four_plots &amp;lt;- Mean_SD_Count.dat
Mean_SD_Count_merged_for_all_four_plots$Yield &amp;lt;-
Mean_SD_Count_merged_for_all_four_plots$Mean
Mean_SD_Count_merged_for_all_four_plots$ControlRate.Levels &amp;lt;-
Mean_SD_Count_merged_for_all_four_plots$ControlRate

Mean_SD_Count_merged_for_all_four_plots$CR.Date.Levels &amp;lt;-
as.factor(gsub(
&amp;quot;-&amp;quot;,
&amp;quot;_&amp;quot;,
Mean_SD_Count_merged_for_all_four_plots$CR.Date.Levels
))


get_my_box_plot(Mean_SD_Count_merged_for_all_four_plots, plot_name = &amp;quot;all four fields&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                      Df Sum Sq Mean Sq F value Pr(&amp;gt;F)
## field$CR.Date.Levels  4  78.66  19.665    37.3  0.122
## Residuals             1   0.53   0.527&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;From this result above, since the residuals from ANOVA model has only 1 degree
of freedom, and the global p-value is not significant, we don’t have to
plot the TUKEY pairwise test. Instead, we only show the Summary anova. This
shows that the date alone doesn’t affect our mean Yield.&lt;/p&gt;
&lt;p&gt;We now calculate pooled SD for merged 4 plots &lt;code&gt;Mean_SD_Count.dat&lt;/code&gt; to calculate
Effect Size and Required Replicates for all fields (combined analysis) using
pooled SD.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pooled.dat &amp;lt;- Mean_SD_Count.dat


# # Pooled sd can be calculated as:
pooled.dat$df &amp;lt;- pooled.dat$Count - 1
# pooled SD is :
# pooledSD &amp;lt;- sqrt( sum(pooled.dat$sd^2 * pooled.dat$df) / sum(pooled.dat$df) )


# We can calculate our SD pooled using this formula:
#  s_{pooled} = \sqrt{\frac{\sum_i (n_i-1)s_i^2}{N-k}}
# We will derrive this in steps as below:

pooled.dat$df &amp;lt;- pooled.dat$Count - 1
pooled.dat$sd.square &amp;lt;- pooled.dat$SD ^ 2

pooled.dat$ss &amp;lt;- pooled.dat$sd.square * pooled.dat$df


# We can use convenience function (aggregate) for splitting and calculating
# the necessary sums.
ds &amp;lt;- aggregate(ss ~ CR.Date.Levels, data = pooled.dat, sum)

# Two different built in methods for split apply, we could use aggregate for
# both if we wanted. This calculates our degrees of freedom.
ds$df &amp;lt;- tapply(pooled.dat$df, pooled.dat$CR.Date.Levels, sum)
# divide ss by df and then we get sd square
ds$sd.square &amp;lt;- ds$ss / ds$df
# Finally, we can get our sd pooled
ds$SD_pooled &amp;lt;- sqrt(ds$sd.square)
ds&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   CR.Date.Levels         ss    df sd.square SD_pooled
## 1     2018-05-17 11136365.7  6709 1659.9144  40.74205
## 2     2018-05-20 17161878.7 20399  841.3098  29.00534
## 3     2018-05-21   621235.0  1573  394.9364  19.87301
## 4     2018-05-18  1630876.2  3879  420.4373  20.50457
## 5     2018-05-19   687678.2  6523  105.4236  10.26760&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# However, we could also calculate our sd_pooled as below and get the same results :
sd_pooled &amp;lt;-
lapply(split(Mean_SD_Count.dat, Mean_SD_Count.dat$CR.Date.Levels),
function(dd)
sqrt(sum(dd$SD ^ 2 * (dd$Count - 1)) / (sum(dd$Count - 1) - nrow(dd))))

# Now, we calculate Mean (Mean of Means) from the merged table
# `Mean_SD_Count.dat`, so we can calculate Cohens d and RequiredReplicates for
# all four field combined.

ds.Mean &amp;lt;-
setNames(aggregate(
Mean_SD_Count.dat$Mean,
by = list(Mean_SD_Count.dat$CR.Date.Levels),
FUN = mean
),
c(&amp;quot;CR.Date.Levels&amp;quot;, &amp;quot;Mean&amp;quot;))

ds &amp;lt;- merge(ds, ds.Mean, by.x = &amp;quot;CR.Date.Levels&amp;quot;)
ds&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   CR.Date.Levels         ss    df sd.square SD_pooled     Mean
## 1     2018-05-17 11136365.7  6709 1659.9144  40.74205 234.0993
## 2     2018-05-18  1630876.2  3879  420.4373  20.50457 222.4764
## 3     2018-05-19   687678.2  6523  105.4236  10.26760 229.3088
## 4     2018-05-20 17161878.7 20399  841.3098  29.00534 230.3435
## 5     2018-05-21   621235.0  1573  394.9364  19.87301 226.4394&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Now we calculate the Effect Size and Cohen&amp;#39;s D for the combined 4 plots using
# mean yield and sd pooled for different ControlRate

# Now we calculate the Effect Size and Cohen&amp;#39;s D for the combined 4 plots using
# mean yield and sd pooled for different ControlRate usinf our function

# `calculate_field_mean_SD_and_get_RR_EffSize`.

RequiredReplicates_for_all_fields &amp;lt;-
calculate_field_mean_SD_and_get_RR_EffSize(
field = ds,
intervals = ControlRateInterval,
Single.Field.Analysis = FALSE
)

RequiredReplicates_for_all_fields&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $Req.Rep.table.field
##      Group                      EffectSize          RequiredReplicates
## [1,] &amp;quot;2018-05-17 Vs 2018-05-18&amp;quot; &amp;quot;0.360381603784739&amp;quot; &amp;quot;121&amp;quot;             
## [2,] &amp;quot;2018-05-18 Vs 2018-05-19&amp;quot; &amp;quot;0.421358834058387&amp;quot; &amp;quot;88&amp;quot;              
## [3,] &amp;quot;2018-05-19 Vs 2018-05-20&amp;quot; &amp;quot;0.047558010269331&amp;quot; &amp;quot;6940&amp;quot;            
## [4,] &amp;quot;2018-05-20 Vs 2018-05-21&amp;quot; &amp;quot;0.157027441353185&amp;quot; &amp;quot;637&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# We can plot this results for better visualization of pattern.

RequiredReplicates_for_all_fields &amp;lt;-
as.data.frame(RequiredReplicates_for_all_fields$Req.Rep.table.field)

RequiredReplicates_for_all_fields$Group &amp;lt;-
factor(RequiredReplicates_for_all_fields$Group)

RequiredReplicates_for_all_fields$RequiredReplicates &amp;lt;-
as.numeric(as.character(RequiredReplicates_for_all_fields$RequiredReplicates))

RequiredReplicates_for_all_fields$EffectSize &amp;lt;-
as.numeric(as.character(RequiredReplicates_for_all_fields$EffectSize))


# There are one or two extreme Required replicates and extreme Effect size. We can
# remove them to plot them, so we can properly visualize the datapoints

RequiredReplicates_for_all_fields &amp;lt;-
RequiredReplicates_for_all_fields[RequiredReplicates_for_all_fields$RequiredReplicates &amp;lt; 4000, ]

RequiredReplicates_for_all_fields &amp;lt;-
RequiredReplicates_for_all_fields[RequiredReplicates_for_all_fields$EffectSize &amp;lt; 1.5, ]



my_levels &amp;lt;-
length(levels(RequiredReplicates_for_all_fields$Group))
RequiredReplicates_for_all_fields$EffectSize &amp;lt;-
round(RequiredReplicates_for_all_fields$EffectSize, 2)

# Plot RequiredReplicates_for_all_fields
n &amp;lt;- my_levels
qual_col_pals = brewer.pal.info[brewer.pal.info$category == &amp;#39;qual&amp;#39;,]
col_vector = unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals)))


ggplot(
RequiredReplicates_for_all_fields,
aes(
x = EffectSize,
y = RequiredReplicates,
shape = as.factor(Group),
group = 1
)
) +
ggtitle(&amp;quot;Effect size Vs Required replicates for all fields data \n(Combined Effect)&amp;quot;) +
geom_point(alpha = 0.9,
size = 3,
stroke = 1)  +
scale_shape_manual(values = rep(c(0:2, 5:6, 9:10, 11:12, 14), times =
4)) +
scale_color_manual(values = col_vector) +
geom_line(color = &amp;quot;black&amp;quot;) +
scale_x_continuous(&amp;quot;EffectSize&amp;quot;,
breaks = c(0,
0.2,
0.5,
1,
max(
as.numeric(RequiredReplicates_for_all_fields$EffectSize)
))) +
theme_bw() +
theme(
axis.title = element_text(size = 14, face = &amp;quot;bold&amp;quot;),
axis.text = element_text(size = 10),
plot.title = element_text(hjust = 0.5, face = &amp;quot;bold&amp;quot;),
axis.line = element_line(colour = &amp;quot;black&amp;quot;),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank()
) +
labs(shape = &amp;quot;Comparison groups&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/achalneupane.github.io/achal.github.io/post/Final_assignment_files/figure-html/unnamed-chunk-21-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;################################ End of codes !! ################################&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Discussion: Based on these results, I think that the fields were planted within
24 hours margin. seedB and seedC were planted on the different dates.
Similarly, harvestB was harvested within 24 hours and on the same date, but rest
of the fields were harvested/planted for multiple dates. Additionally, I also
performed ANOVA for ControlRates paired with dates and found no significant
difference to what I found for my midterm. I analyzed these data for Date
effect also and it looks like there is no Date effect on Mean Yield. I thought
the skewned in 28000 interval from my midterm would be addressed by Date effect,
but I could not find significant effect of date here. As in the mid-term, I also
calculated the required replicated for ControlRate-Date pairs as well as Date
only observations, and in both cases, the EffectSize was inversely proportional
to RequiredReplicates.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Midterm data analysis</title>
      <link>/achalneupane.github.io/post/midterm_project/</link>
      <pubDate>Sun, 01 Sep 2019 17:26:23 -0500</pubDate>
      <guid>/achalneupane.github.io/post/midterm_project/</guid>
      <description>


&lt;script type=&#34;text/javascript&#34; src=&#34;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML&#34;&gt;
&lt;/script&gt;
&lt;p&gt;In this exercise, I will be analyzing four fields as a
statistical consultant. This data comes from four different farm fields and we try to investigate the effects of variable seeding rates in overall yeild.&lt;/p&gt;
&lt;p&gt;The table summarizes data from four corn fields. The top row are target seeding rates, in seeds per acre, the bottom row are
corn yields in bushels per acre.
This table summarizes all four fields at the Control Rate interval of 1000 which was also reproduced below in my anaysis. More importantly, we are interested in exploring the EffectSize and Required Replicates for properly examining any statistical evidence for the yield and variable seeding rates relationships.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Rate&lt;/th&gt;
&lt;th&gt;23000&lt;/th&gt;
&lt;th&gt;24000&lt;/th&gt;
&lt;th&gt;25000&lt;/th&gt;
&lt;th&gt;26000&lt;/th&gt;
&lt;th&gt;27000&lt;/th&gt;
&lt;th&gt;28000&lt;/th&gt;
&lt;th&gt;29000&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;Yield&lt;/td&gt;
&lt;td&gt;111.4216&lt;/td&gt;
&lt;td&gt;155.0326&lt;/td&gt;
&lt;td&gt;181.1176&lt;/td&gt;
&lt;td&gt;227.5800&lt;/td&gt;
&lt;td&gt;233.4623&lt;/td&gt;
&lt;td&gt;242.1753&lt;/td&gt;
&lt;td&gt;231.3890&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The algorithm to do this analysis is divided into several steps as described below:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;I have used some external packages like ggplot2 to make the plots.&lt;/li&gt;
&lt;li&gt;I have written several functions to analyze each individual field as well as merged field statistics that calculates cohens effect size, required replicates, and does ANOVA analysis on individual field as well as on merged data from all fields.&lt;/li&gt;
&lt;li&gt;Function &lt;code&gt;calculate_field_mean_SD_and_get_RR_EffSize&lt;/code&gt; also uses mean, sd, and counts from each field to calculate cohens d and Required replicates. It also uses pooled standard deviations and Mean (mean of Means) calculated from all four fields for different control Rates to calculate cohens d and required replicates of combined field data. I have tested this function on all four fields at ControlRate level of 500, 1000, 2000 and 3000 intervals, then based on the results (also merged the output of all four intervals to get the effectSize and Required Replicates compared), I have decided to choose 1000 intervals of ControlRates for further analysis for combined data from all four fields.&lt;/li&gt;
&lt;li&gt;I have also shown ANOVA analysis followed by TUKEY HSD test to show which ControlRates of seeding have significant effect on Yield for each field and then for all fields (combined all four fields).&lt;/li&gt;
&lt;li&gt;Lastly, I have plotted EffectSize Vs RequiredReplicates for each field and also for combined data from four fields.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Here, we first install ond load some of the packages (“multcompView”, “ggplot2”, “scales”, “data.table”) I will be using for this exercise.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# First, install missing packages and load them
myPackages &amp;lt;- c(&amp;quot;multcompView&amp;quot;, &amp;quot;ggplot2&amp;quot;, &amp;quot;scales&amp;quot;, &amp;quot;data.table&amp;quot;)
my.installed.packages&amp;lt;- installed.packages()
available.packages &amp;lt;- myPackages %in% my.installed.packages
if (sum(!available.packages) &amp;gt; 0){
  install.packages(myPackages[!available.packages])
}
# Load all required packages 
lapply(myPackages, require, character.only = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: multcompView&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: ggplot2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: scales&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Loading required package: data.table&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [[1]]
## [1] TRUE
## 
## [[2]]
## [1] TRUE
## 
## [[3]]
## [1] TRUE
## 
## [[4]]
## [1] TRUE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We will first write and describe our function here. We will be using these function to manipulate our data, calculate Cohen’s d, required replicates and also do ANOVA and TukeyHSD paired test, then finally to plot our data.
We can calculate EffectSize and RequiredReplicates for these data using functions from previous homework &lt;code&gt;cohen.d&lt;/code&gt; and
&lt;code&gt;required.replicates&lt;/code&gt;. These two functions are then called within another function &lt;code&gt;calculate_field_mean_SD_and_get_RR_EffSize&lt;/code&gt; that analyzes each individual field and also merged data from all four fields to calculate Effect Size, Required Replictaes and then plot the results.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cohen.d &amp;lt;- function(m1, s1, m2, s2){
  cohens_d &amp;lt;-(abs(m1-m2)/sqrt((s1^2+s2^2)/2))
  return(cohens_d)
}

required.replicates &amp;lt;- function (m1, s1, m2, s2, alpha=0.05, beta=0.2){
  n &amp;lt;- 2* ((((sqrt((s1^2 + s2^2)/2))/(m1-m2))^2) * (qnorm((1-alpha/2)) + qnorm((1-beta)))^2) 
  return(round(n,0))
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We willl also perform ANOVA analysis with Tukey Test for paired comparision of mean for each field data as well as merged data at different ControlRate intervals. This function does Tukey HSD test and generates label for significant outcomes.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Create function to get the labels for Tukey HSD:
generate_label_df &amp;lt;- function(TUKEY, variable){
  
  # Extract labels and factor levels from Tukey post-hoc 
  Tukey.levels &amp;lt;- TUKEY[[variable]][,4]
  Tukey.labels &amp;lt;- data.frame(multcompLetters(Tukey.levels)[&amp;#39;Letters&amp;#39;])
  
  #I need to put the labels in the same order as in the boxplot :
  Tukey.labels$treatment=rownames(Tukey.labels)
  Tukey.labels=Tukey.labels[order(Tukey.labels$treatment) , ]
  return(Tukey.labels)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This function does ANOVA and makes boxplots with Tukey statistics for comparing Mean yield.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;get_my_box_plot &amp;lt;- function (field, plot_name = &amp;quot;the Field&amp;quot;) {
  model = lm(field$Yield ~ field$ControlRate.Levels)
  ANOVA = aov(model)
  
  # Tukey test to study each pair of treatment :
  TUKEY &amp;lt;- TukeyHSD(x = ANOVA, &amp;#39;field$ControlRate.Levels&amp;#39;, conf.level = 0.95)
  
  # generate labels using function
  labels &amp;lt;- generate_label_df(TUKEY , &amp;quot;field$ControlRate.Levels&amp;quot;)
  
  # rename columns for merging
  names(labels) &amp;lt;- c(&amp;#39;Letters&amp;#39;, &amp;#39;ControlRate.Levels&amp;#39;)
  
  # Obtain letter positions for y axis using means
  yvalue &amp;lt;- aggregate(. ~ ControlRate.Levels, data = field, mean)
  
  final &amp;lt;- merge(labels, yvalue) #merge dataframes
  
  p &amp;lt;- ggplot(field, aes(x = ControlRate.Levels, y = Yield)) +
  geom_blank() +
  theme_bw() +
  theme(panel.grid.major = element_blank(),
  panel.grid.minor = element_blank()) +
  labs(x = &amp;#39;Control Rates&amp;#39;, y = &amp;#39;Mean Yield&amp;#39;) +
  ggtitle(paste0(&amp;quot;ControlRates Vs Mean yield for &amp;quot;, plot_name),
  expression(atop(italic(&amp;quot;(Anova:TukeyHSD)&amp;quot;), &amp;quot;&amp;quot;))) +
  theme(plot.title = element_text(hjust = 0.5, face = &amp;#39;bold&amp;#39;)) +
  geom_boxplot(fill = &amp;#39;grey&amp;#39;, stat = &amp;quot;boxplot&amp;quot;) +
  geom_text(
  data = final,
  aes(x = ControlRate.Levels, y = Yield, label = Letters),
  vjust = -3.5,
  hjust = -.5
  ) +
  geom_vline(aes(xintercept = 4.5), linetype = &amp;quot;dashed&amp;quot;) +
  theme(plot.title = element_text(vjust = -0.6))
  print(p)
  # print(TUKEY)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Function to calculate mean and sd for each field for a given interval of
ControlRate and then calculate Required Replicates and EffectSize. I have made
one function to do all that so I can just use this function to analyze all
four fields. To analyze single field set &lt;code&gt;Single.Field.Analysis = TRUE&lt;/code&gt;, and to analyze all four field together, set &lt;code&gt;Single.Field.Analysis = FALSE&lt;/code&gt;,&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;calculate_field_mean_SD_and_get_RR_EffSize &amp;lt;- 
  function(
    field, intervals, Single.Field.Analysis = TRUE, printplot = FALSE){
  plot_NAME &amp;lt;- (deparse(substitute(field)))
  if(Single.Field.Analysis &amp;gt; 0){
  # removing rows with NAs in Yield
  sum(is.na(field$Yield))
  # field &amp;lt;- field[!complete.cases(field$Yield), ]
  field &amp;lt;- field[!is.na(field$Yield),]
  # as.factor(fieldA$ControlRate)
  table.field &amp;lt;- table(as.factor(field$ControlRate))
  field$ControlRate.Levels &amp;lt;- as.factor(intervals * ceiling(field$ControlRate/intervals))
  field.Count &amp;lt;- setNames(aggregate(field$ControlRate, 
          by = list(field$ControlRate.Levels), FUN = length), c(&amp;quot;ControlRate&amp;quot;, &amp;quot;Count&amp;quot;))
  # Degree of freedome = n * k - k
  field.Count$degree.Freedom &amp;lt;- 
    (field.Count$Count * length(field.Count$ControlRate)) -length(field.Count$ControlRate)
  
  field.mean &amp;lt;-
    setNames(aggregate(
    field$Yield,
    by = list(field$ControlRate.Levels),
    FUN = mean
    ),
    c(&amp;quot;ControlRate&amp;quot;, &amp;quot;Mean&amp;quot;))
    
    field.SD &amp;lt;-
    setNames(aggregate(
    field$Yield,
    by = list(field$ControlRate.Levels),
    FUN = sd
    ),
    c(&amp;quot;ControlRate&amp;quot;, &amp;quot;SD&amp;quot;))

  # plot individual fields with tukey test We will print box plot only if we
  # want for certain ControlRates intervals. Otherwise we will have too many
  # plots
  if(printplot == 1 ){
  get_my_box_plot(field, plot_name = plot_NAME)
  }
  # Else we work on the merged data with SD pooled; no need to calculate mean
  # and SD as we will be doing it below
  
  } else {
    temp.Field &amp;lt;- field
    colnames(temp.Field)[colnames(temp.Field) == &amp;quot;ControlRate&amp;quot;] &amp;lt;- &amp;quot;ControlRate.Levels&amp;quot;
    colnames(temp.Field)[colnames(temp.Field) == &amp;quot;Mean&amp;quot;] &amp;lt;- &amp;quot;Yield&amp;quot;
    # get_my_box_plot(temp.Field)
    field.SD  &amp;lt;- 
      as.data.frame(cbind(ControlRate = field[&amp;quot;ControlRate&amp;quot;], SD = field[&amp;quot;SD_pooled&amp;quot;]))
    field.mean &amp;lt;- 
      as.data.frame(cbind(ControlRate = field[&amp;quot;ControlRate&amp;quot;], Mean = field[&amp;quot;Mean&amp;quot;]))
  }
  
# Calculate Required replicate and Effect Size from each
# field for ControlRate i vs i+1

# ReqRep_EffectSize_table &amp;lt;- function (field.mean, field.SD){
Req.Rep.table.field &amp;lt;- {}
for (i in 1:nrow(field.SD)){
  if(i+1 &amp;gt; nrow(field.SD) ){
    break
  }
  temp.Effect.size &amp;lt;-
    cohen.d(
    m1 = field.mean$Mean[i],
    s1 = field.SD$SD[i],
    m2 = field.mean$Mean[i + 1],
    s2 = field.SD$SD[i + 1]
    )
    
    tmp.req.reps &amp;lt;-
    required.replicates(
    m1 = field.mean$Mean[i],
    s1 = field.SD$SD[i],
    m2 = field.mean$Mean[i + 1],
    s2 = field.SD$SD[i + 1]
    )
 
    tmp.table &amp;lt;-
    cbind(
    Group = paste0(field.SD$ControlRate[i], &amp;quot; Vs &amp;quot;, field.SD$ControlRate[i +
    1]),
    EffectSize = temp.Effect.size,
    RequiredReplicates = tmp.req.reps
    )
      
      Req.Rep.table.field &amp;lt;- rbind(Req.Rep.table.field, tmp.table)
}
if (Single.Field.Analysis &amp;gt; 0) {
  return(
    list(
      field.mean = field.mean,
      fieldSD = field.SD,
      field.Count = field.Count,
      Req.Rep.table.field = Req.Rep.table.field
    )
  )
} else{
  return(list(Req.Rep.table.field = Req.Rep.table.field))
}
  }

###############################################End of Functions##########&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, we read four fields data:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fieldA &amp;lt;-
  read.table(
  &amp;quot;https://raw.githubusercontent.com/achalneupane/data/master/fieldA.csv&amp;quot;,
  header = TRUE,
  sep = &amp;quot;,&amp;quot;
  )
  # head(fieldA)
  dim(fieldA)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 6718    6&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;  tmp.fieldA &amp;lt;- fieldA
  tmp.fieldA$ControlRate &amp;lt;- as.factor(tmp.fieldA$ControlRate)
  # aggregate(fieldA$Yield, by = list(fieldA$ControlRate), FUN = mean)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note: There are 40 levels of Control rates in fieldA, we can reduce these levels, so what we can do is relevel them separated by ‘intervals’ of(say 1000) as used in ‘calculate_field_mean_SD’ function above. We can do the same for other fields. However, instead of checking all this one by one, we will be using the functions we described above to analyze these four fields data and get the plots.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fieldB &amp;lt;-
  read.table(
  &amp;quot;https://raw.githubusercontent.com/achalneupane/data/master/fieldB.csv&amp;quot;,
  header = TRUE,
  sep = &amp;quot;,&amp;quot;
  )
  # head(fieldB)
  dim(fieldB)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 9321    6&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;  # fieldC
  fieldC &amp;lt;-
  read.table(
  &amp;quot;https://raw.githubusercontent.com/achalneupane/data/master/fieldC.csv&amp;quot;,
  header = TRUE,
  sep = &amp;quot;,&amp;quot;
  )
  # head(fieldC)
  dim(fieldC)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 10404     6&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;  # fieldD
  fieldD &amp;lt;-
  read.table(
  &amp;quot;https://raw.githubusercontent.com/achalneupane/data/master/fieldD.csv&amp;quot;,
  header = TRUE,
  sep = &amp;quot;,&amp;quot;
  )
  # head(fieldD)
  dim(fieldD)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 12654     6&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;we can calculate EffectSize and RequiredReplicates for these four fields using previous homeworks functions Cohen’s d and
required.replicates as described in the begining of this report.&lt;/p&gt;
&lt;p&gt;Here, we can work on each individual field, first for the interval of 500, 1000,
2000 and 3000 ControlRates and decide which ControlRate interval fits the best
for our data. Then we we will work on merged data that we merge after
calculating individual fields (i.e using Mean and SD pooled for each
ControlRate from all fields)&lt;/p&gt;
&lt;p&gt;We chan check how many replicates we need for each field if we compare at
the different ControlRates intervals starting with 500 to 3000. Set &lt;code&gt;eval = TRUE&lt;/code&gt; to check this code.&lt;/p&gt;
&lt;p&gt;At ControlRates interval of 500:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Now we chan check how many replicates we need for each field if we compare at
# the different ControlRates intervals starting with 500 to 3000:

# At ControlRates interval of 500:
ControlRateInterval &amp;lt;- 500

# field A
fieldA.data &amp;lt;- 
  calculate_field_mean_SD_and_get_RR_EffSize(
    field = fieldA, interval = ControlRateInterval
    )

# field B
fieldB.data &amp;lt;- 
  calculate_field_mean_SD_and_get_RR_EffSize(
    field = fieldB, interval = ControlRateInterval
    )

# field C
fieldC.data &amp;lt;- 
  calculate_field_mean_SD_and_get_RR_EffSize(
    field = fieldC, interval = ControlRateInterval
    )

# field D
fieldD.data &amp;lt;- 
  calculate_field_mean_SD_and_get_RR_EffSize(
    field = fieldD, interval = ControlRateInterval
    )

# Now, we merge all these so we can plot them together later
my_list &amp;lt;- list(fieldA.data$Req.Rep.table.field, fieldB.data$Req.Rep.table.field, 
                fieldC.data$Req.Rep.table.field, fieldD.data$Req.Rep.table.field)

my_list_nms &amp;lt;- setNames(my_list, c(&amp;quot;fieldA&amp;quot;, &amp;quot;fieldB&amp;quot;, &amp;quot;fieldC&amp;quot;, &amp;quot;fieldD&amp;quot;))
Merged.EffectSize.500 &amp;lt;- 
  data.frame(rbindlist(lapply(my_list_nms, as.data.table), idcol = &amp;quot;id&amp;quot;))
Merged.EffectSize.500$interval &amp;lt;- 500&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At ControlRates interval of 1000:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ControlRateInterval &amp;lt;- 1000

# field A
fieldA.data &amp;lt;- 
  calculate_field_mean_SD_and_get_RR_EffSize(
    field = fieldA, interval = ControlRateInterval
    )
# field B
fieldB.data &amp;lt;- 
  calculate_field_mean_SD_and_get_RR_EffSize(
    field = fieldB, interval = ControlRateInterval
    )

# field C
fieldC.data &amp;lt;- 
  calculate_field_mean_SD_and_get_RR_EffSize(
    field = fieldC, interval = ControlRateInterval
    )

# field D
fieldD.data &amp;lt;- 
  calculate_field_mean_SD_and_get_RR_EffSize(
    field = fieldD, interval = ControlRateInterval
    )

# Now, we merge all these so we can plot them together later
my_list &amp;lt;- list(fieldA.data$Req.Rep.table.field, fieldB.data$Req.Rep.table.field, 
                fieldC.data$Req.Rep.table.field, fieldD.data$Req.Rep.table.field)

my_list_nms &amp;lt;- setNames(my_list, c(&amp;quot;fieldA&amp;quot;, &amp;quot;fieldB&amp;quot;, &amp;quot;fieldC&amp;quot;, &amp;quot;fieldD&amp;quot;))
Merged.EffectSize.1000 &amp;lt;- 
  data.frame(rbindlist(lapply(my_list_nms, as.data.table), idcol = &amp;quot;id&amp;quot;))

Merged.EffectSize.1000$interval &amp;lt;- 1000&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At ControlRates interval of 2000:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ControlRateInterval &amp;lt;- 2000

# field A
fieldA.data &amp;lt;- 
  calculate_field_mean_SD_and_get_RR_EffSize(
    field = fieldA, interval = ControlRateInterval
    )
# field B
fieldB.data &amp;lt;- 
  calculate_field_mean_SD_and_get_RR_EffSize(
    field = fieldB, interval = ControlRateInterval
    )

# field C
fieldC.data &amp;lt;- 
  calculate_field_mean_SD_and_get_RR_EffSize(
    field = fieldC, interval = ControlRateInterval
    )

# field D
fieldD.data &amp;lt;- 
  calculate_field_mean_SD_and_get_RR_EffSize(
    field = fieldD, interval = ControlRateInterval
    )

# Now, we merge all these so we can plot them together later
my_list &amp;lt;- list(fieldA.data$Req.Rep.table.field, fieldB.data$Req.Rep.table.field, 
                fieldC.data$Req.Rep.table.field, fieldD.data$Req.Rep.table.field)

my_list_nms &amp;lt;- setNames(my_list, c(&amp;quot;fieldA&amp;quot;, &amp;quot;fieldB&amp;quot;, &amp;quot;fieldC&amp;quot;, &amp;quot;fieldD&amp;quot;))
Merged.EffectSize.2000 &amp;lt;- 
  data.frame(rbindlist(lapply(my_list_nms, as.data.table), idcol = &amp;quot;id&amp;quot;))
Merged.EffectSize.2000$interval &amp;lt;- 2000&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At ControlRates interval of 3000:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ControlRateInterval &amp;lt;- 3000

# field A
fieldA.data &amp;lt;- 
  calculate_field_mean_SD_and_get_RR_EffSize(
    field = fieldA, interval = ControlRateInterval
    )
# field B
fieldB.data &amp;lt;- 
  calculate_field_mean_SD_and_get_RR_EffSize(
    field = fieldB, interval = ControlRateInterval
    )

# field C
fieldC.data &amp;lt;- 
  calculate_field_mean_SD_and_get_RR_EffSize(
    field = fieldC, interval = ControlRateInterval
    )

# field D
fieldD.data &amp;lt;- 
  calculate_field_mean_SD_and_get_RR_EffSize(
    field = fieldD, interval = ControlRateInterval
    )

# Now, we merge all these so we can plot them together later
my_list &amp;lt;- list(fieldA.data$Req.Rep.table.field, fieldB.data$Req.Rep.table.field, 
                fieldC.data$Req.Rep.table.field, fieldD.data$Req.Rep.table.field)

my_list_nms &amp;lt;- setNames(my_list, c(&amp;quot;fieldA&amp;quot;, &amp;quot;fieldB&amp;quot;, &amp;quot;fieldC&amp;quot;, &amp;quot;fieldD&amp;quot;))
Merged.EffectSize.3000 &amp;lt;- 
  data.frame(rbindlist(lapply(my_list_nms, as.data.table), idcol = &amp;quot;id&amp;quot;))
Merged.EffectSize.3000$interval &amp;lt;- 3000&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, let’s plot these data for EffectSize Vs RequiredReplicates for each Field and fordifferent ControlRate intervals&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;EffectSize.Plot &amp;lt;-
  rbind(
  Merged.EffectSize.500,
  Merged.EffectSize.1000,
  Merged.EffectSize.2000,
  Merged.EffectSize.3000
  )

EffectSize.Plot$id &amp;lt;- factor(EffectSize.Plot$id)
EffectSize.Plot$interval &amp;lt;- factor(EffectSize.Plot$interval)
EffectSize.Plot$Group &amp;lt;- factor(EffectSize.Plot$Group)
EffectSize.Plot$EffectSize &amp;lt;- as.numeric(EffectSize.Plot$EffectSize)
EffectSize.Plot$RequiredReplicates &amp;lt;- as.numeric(EffectSize.Plot$RequiredReplicates)
head(EffectSize.Plot)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       id          Group EffectSize RequiredReplicates interval
## 1 fieldA 23000 Vs 23500 1.03546848                 15      500
## 2 fieldA 23500 Vs 24000 0.73574477                 29      500
## 3 fieldA 24000 Vs 25000 1.48620683                  7      500
## 4 fieldA 25000 Vs 25500 0.41887785                 89      500
## 5 fieldA 25500 Vs 26000 1.10746983                 13      500
## 6 fieldA 26000 Vs 26500 0.07390218               2874      500&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;scaleFUN &amp;lt;- function(x) sprintf(&amp;quot;%.2f&amp;quot;, x)

# To eliminate any outliers and noise, we can plot effect Size between 0-1 and
# Required Replicates upto 5000
EffectSize.Plot &amp;lt;- EffectSize.Plot[EffectSize.Plot$RequiredReplicates&amp;lt;= 5000,]
EffectSize.Plot &amp;lt;- EffectSize.Plot[EffectSize.Plot$EffectSize&amp;lt;= 1,]

EffectSize.Plot$Group &amp;lt;- factor(EffectSize.Plot$Group)

ggplot(EffectSize.Plot, aes(x=EffectSize, y=RequiredReplicates)) + 
  ggtitle(&amp;quot;Effect size Vs Required replicates for each field data&amp;quot;) +
  geom_point(aes(shape = Group), size = 2)  + 
  scale_shape_manual(values=1:nlevels(EffectSize.Plot$Group)) +
  geom_line() + 
  scale_x_continuous(&amp;quot;EffectSize&amp;quot;, breaks=c(0,0.2,0.5,1), labels = scaleFUN) +
  theme_bw() +
  theme(axis.title = element_text(size=14,face=&amp;quot;bold&amp;quot;), axis.text = element_text(size=10), 
        plot.title = element_text(hjust = 0.5, face = &amp;quot;bold&amp;quot;)) +
  facet_wrap(~id)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/achalneupane.github.io/achal.github.io/post/Midterm_project_files/figure-html/unnamed-chunk-12-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Based on the plot we just plotted above, RequiredReplicates inccrease significantly with decreasing Effect Size.&lt;/p&gt;
&lt;p&gt;Additionally, after running all these &lt;code&gt;ControlRateInterval&lt;/code&gt;, I noticed that the Required replicates decrease for the higher ControlRate intervals. The reason I did not include this in my report is because it gives lots of output. SO, if we consider taking the ControlRate intervals of only 1000 and get the field mean and field SD for each field as below.&lt;/p&gt;
&lt;p&gt;Now, I will only limit my analysis for all fields (merged) for the Control Rates interval of 1000.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# If we consider taking the ControlRate intervals of 1000 and get the field mean and field
# SD for each field:

ControlRateInterval &amp;lt;- 1000
# field A
fieldA.data &amp;lt;- 
  calculate_field_mean_SD_and_get_RR_EffSize(
    field = fieldA, intervals = ControlRateInterval, printplot = TRUE
    )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/achalneupane.github.io/achal.github.io/post/Midterm_project_files/figure-html/unnamed-chunk-13-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fieldA.data&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $field.mean
##   ControlRate      Mean
## 1       23000  63.01258
## 2       24000 100.63078
## 3       25000 172.57527
## 4       26000 237.45902
## 5       27000 237.33206
## 6       28000 238.59221
## 7       29000 195.73072
## 
## $fieldSD
##   ControlRate       SD
## 1       23000 15.45740
## 2       24000 51.36069
## 3       25000 41.82109
## 4       26000 31.64908
## 5       27000 44.09390
## 6       28000 38.11963
## 7       29000 53.59605
## 
## $field.Count
##   ControlRate Count degree.Freedom
## 1       23000    24            161
## 2       24000    93            644
## 3       25000    44            301
## 4       26000  4381          30660
## 5       27000   786           5495
## 6       28000  1283           8974
## 7       29000    99            686
## 
## $Req.Rep.table.field
##      Group            EffectSize            RequiredReplicates
## [1,] &amp;quot;23000 Vs 24000&amp;quot; &amp;quot;0.991869049115401&amp;quot;   &amp;quot;16&amp;quot;              
## [2,] &amp;quot;24000 Vs 25000&amp;quot; &amp;quot;1.53614606065372&amp;quot;    &amp;quot;7&amp;quot;               
## [3,] &amp;quot;25000 Vs 26000&amp;quot; &amp;quot;1.74957194606738&amp;quot;    &amp;quot;5&amp;quot;               
## [4,] &amp;quot;26000 Vs 27000&amp;quot; &amp;quot;0.00330802194919998&amp;quot; &amp;quot;1434501&amp;quot;         
## [5,] &amp;quot;27000 Vs 28000&amp;quot; &amp;quot;0.0305749319500618&amp;quot;  &amp;quot;16792&amp;quot;           
## [6,] &amp;quot;28000 Vs 29000&amp;quot; &amp;quot;0.921630680790716&amp;quot;   &amp;quot;18&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Based on the plot we can see that the Mean Yield is significant between 23000 vs all ControlRates , 24000 vs all Control Rates, 25000 Vs all Control rates. Yeild has no significant effect of Seeding from Control Rate between 26000 to 28000. Infact, it starts to decline significantly from 29000 Control Seedings.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# field B
fieldB.data &amp;lt;- 
  calculate_field_mean_SD_and_get_RR_EffSize(
    field = fieldB, interval = ControlRateInterval, printplot = TRUE
    )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/achalneupane.github.io/achal.github.io/post/Midterm_project_files/figure-html/unnamed-chunk-14-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fieldB.data&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $field.mean
##   ControlRate     Mean
## 1       24000 125.8102
## 2       25000 180.9337
## 3       26000 215.8033
## 4       27000 229.8309
## 5       28000 240.5746
## 6       29000 238.9680
## 
## $fieldSD
##   ControlRate       SD
## 1       24000 33.51371
## 2       25000 33.36007
## 3       26000 28.10560
## 4       27000 19.11270
## 5       28000 14.00890
## 6       29000 14.26832
## 
## $field.Count
##   ControlRate Count degree.Freedom
## 1       24000    36            210
## 2       25000   390           2334
## 3       26000  2455          14724
## 4       27000   798           4782
## 5       28000  5173          31032
## 6       29000   469           2808
## 
## $Req.Rep.table.field
##      Group            EffectSize          RequiredReplicates
## [1,] &amp;quot;24000 Vs 25000&amp;quot; &amp;quot;1.64857878536612&amp;quot;  &amp;quot;6&amp;quot;               
## [2,] &amp;quot;25000 Vs 26000&amp;quot; &amp;quot;1.13048091635421&amp;quot;  &amp;quot;12&amp;quot;              
## [3,] &amp;quot;26000 Vs 27000&amp;quot; &amp;quot;0.583669852812804&amp;quot; &amp;quot;46&amp;quot;              
## [4,] &amp;quot;27000 Vs 28000&amp;quot; &amp;quot;0.641176026096802&amp;quot; &amp;quot;38&amp;quot;              
## [5,] &amp;quot;28000 Vs 29000&amp;quot; &amp;quot;0.113628916568796&amp;quot; &amp;quot;1216&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, we see significant difference between all Control Rates of Seeding except between 28000 Vs 29000. The seeding rates of 28000 has the highest Mean yield here.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# field C
fieldC.data &amp;lt;- 
  calculate_field_mean_SD_and_get_RR_EffSize(
    field = fieldC, interval = ControlRateInterval, printplot = TRUE
    )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/achalneupane.github.io/achal.github.io/post/Midterm_project_files/figure-html/unnamed-chunk-15-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fieldC.data&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $field.mean
##   ControlRate     Mean
## 1       23000 149.2422
## 2       24000 185.4175
## 3       25000 195.8427
## 4       26000 225.0309
## 5       27000 231.4881
## 6       28000 240.9121
## 
## $fieldSD
##   ControlRate        SD
## 1       23000 14.416699
## 2       24000 15.340123
## 3       25000 13.316623
## 4       26000 14.335465
## 5       27000 11.247829
## 6       28000  4.463365
## 
## $field.Count
##   ControlRate Count degree.Freedom
## 1       23000    28            162
## 2       24000   170           1014
## 3       25000    69            408
## 4       26000  5697          34176
## 5       27000  4419          26508
## 6       28000    21            120
## 
## $Req.Rep.table.field
##      Group            EffectSize          RequiredReplicates
## [1,] &amp;quot;23000 Vs 24000&amp;quot; &amp;quot;2.43022553971697&amp;quot;  &amp;quot;3&amp;quot;               
## [2,] &amp;quot;24000 Vs 25000&amp;quot; &amp;quot;0.725780226926124&amp;quot; &amp;quot;30&amp;quot;              
## [3,] &amp;quot;25000 Vs 26000&amp;quot; &amp;quot;2.1096712954133&amp;quot;   &amp;quot;4&amp;quot;               
## [4,] &amp;quot;26000 Vs 27000&amp;quot; &amp;quot;0.501162120939759&amp;quot; &amp;quot;63&amp;quot;              
## [5,] &amp;quot;27000 Vs 28000&amp;quot; &amp;quot;1.10136177756912&amp;quot;  &amp;quot;13&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, all Control rates of seeding are significantly diffferent with the highest Mean yeild for 28000.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# field D
fieldD.data &amp;lt;- calculate_field_mean_SD_and_get_RR_EffSize(
  field = fieldD, interval = ControlRateInterval, printplot = TRUE
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/achalneupane.github.io/achal.github.io/post/Midterm_project_files/figure-html/unnamed-chunk-16-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;fieldD.data&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $field.mean
##   ControlRate     Mean
## 1       23000 113.4783
## 2       24000 157.5754
## 3       25000 176.8111
## 4       26000 227.5933
## 5       27000 240.8722
## 6       28000 247.0608
## 7       29000 230.0359
## 
## $fieldSD
##   ControlRate       SD
## 1       23000 24.58440
## 2       24000 39.35167
## 3       25000 36.11914
## 4       26000 26.50089
## 5       27000 17.44482
## 6       28000 15.63857
## 7       29000 25.17324
## 
## $field.Count
##   ControlRate Count degree.Freedom
## 1       23000    50            343
## 2       24000   372           2597
## 3       25000   132            917
## 4       26000  8284          57981
## 5       27000  1167           8162
## 6       28000  2631          18410
## 7       29000    18            119
## 
## $Req.Rep.table.field
##      Group            EffectSize          RequiredReplicates
## [1,] &amp;quot;23000 Vs 24000&amp;quot; &amp;quot;1.34402785417073&amp;quot;  &amp;quot;9&amp;quot;               
## [2,] &amp;quot;24000 Vs 25000&amp;quot; &amp;quot;0.50928632312699&amp;quot;  &amp;quot;61&amp;quot;              
## [3,] &amp;quot;25000 Vs 26000&amp;quot; &amp;quot;1.60311540536477&amp;quot;  &amp;quot;6&amp;quot;               
## [4,] &amp;quot;26000 Vs 27000&amp;quot; &amp;quot;0.591895252495428&amp;quot; &amp;quot;45&amp;quot;              
## [5,] &amp;quot;27000 Vs 28000&amp;quot; &amp;quot;0.373564449867553&amp;quot; &amp;quot;112&amp;quot;             
## [6,] &amp;quot;28000 Vs 29000&amp;quot; &amp;quot;0.812438594873596&amp;quot; &amp;quot;24&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, all Control Rates of seeding are significantly different except for 26000-28000 Vs 29000 with the highest Mean yield for 28000.&lt;/p&gt;
&lt;p&gt;Also, to check if my calculation of Control rates and Yeild mean matches with
the table in instruction (with 1000 intervals), we can check this with the merged field data (
i.e. fieldA, fieldB, fieldC and fieldD) data. We should get the same Mean values in
the instruction table above.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;all.merged.raw.fields &amp;lt;- rbind(fieldA, fieldB, fieldC, fieldD)

check.the.instruction.table &amp;lt;-
calculate_field_mean_SD_and_get_RR_EffSize(
  field = all.merged.raw.fields, intervals = ControlRateInterval
  )

check.the.instruction.table$field.mean&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   ControlRate     Mean
## 1       23000 111.4216
## 2       24000 155.0326
## 3       25000 181.1176
## 4       26000 227.5779
## 5       27000 233.4717
## 6       28000 242.1698
## 7       29000 231.3890&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can now merge all four fields for SD, means and ControlRate level counts.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;merged.SD.4.plots &amp;lt;-
  Reduce(
  function(x, y)
  merge(x, y, all = TRUE),
  list(
  fieldA.data$fieldSD,
  fieldB.data$fieldSD,
  fieldC.data$fieldSD,
  fieldD.data$fieldSD
  )
  )
  
  
  merged.Mean.4.plots &amp;lt;-
  Reduce(
  function(x, y)
  merge(x, y, all = TRUE),
  list(
  fieldA.data$field.mean,
  fieldB.data$field.mean,
  fieldC.data$field.mean,
  fieldD.data$field.mean
  )
  )
  
  
  merged.Count.4.plots &amp;lt;-
  Reduce(
  function(x, y)
  merge(x, y, all = TRUE),
  list(
  fieldA.data$field.Count,
  fieldB.data$field.Count,
  fieldC.data$field.Count,
  fieldD.data$field.Count
  )
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We need SD pooled for these levels so we can calculate Cohen’s d and Required
Replicates.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;levels(merged.SD.4.plots$ControlRate)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;23000&amp;quot; &amp;quot;24000&amp;quot; &amp;quot;25000&amp;quot; &amp;quot;26000&amp;quot; &amp;quot;27000&amp;quot; &amp;quot;28000&amp;quot; &amp;quot;29000&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First, we merged all merged.SD.4.plots, merged.Mean.4.plots and merged.Count.4.plots from all fields.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Therefore, now merging all three dataframes from all four plots for SD, Mean
# and counts by ControlRate column
Mean_SD_Count.dat &amp;lt;- Reduce(function(...)
  merge(..., by = c(&amp;quot;ControlRate&amp;quot;, &amp;quot;grp&amp;quot;), all.x = TRUE),
  lapply(
    list(merged.Mean.4.plots, merged.SD.4.plots, merged.Count.4.plots),
    transform,
    grp = ave(seq_along(ControlRate), ControlRate, FUN = seq_along)
  ))

head(Mean_SD_Count.dat)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   ControlRate grp      Mean       SD Count degree.Freedom
## 1       23000   1  63.01258 14.41670    24            161
## 2       23000   2 113.47830 15.45740    28            162
## 3       23000   3 149.24222 24.58440    50            343
## 4       24000   1 100.63078 15.34012    36            210
## 5       24000   2 125.81017 33.51371    93            644
## 6       24000   3 157.57538 39.35167   170           1014&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, we can also do Anova on the merged data &lt;code&gt;Mean_SD_Count.dat&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Mean_SD_Count_merged_for_all_four_plots &amp;lt;- Mean_SD_Count.dat
Mean_SD_Count_merged_for_all_four_plots$Yield &amp;lt;-
Mean_SD_Count_merged_for_all_four_plots$Mean
Mean_SD_Count_merged_for_all_four_plots$ControlRate.Levels &amp;lt;-
Mean_SD_Count_merged_for_all_four_plots$ControlRate

get_my_box_plot(Mean_SD_Count_merged_for_all_four_plots, plot_name = &amp;quot;all four fields&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/achalneupane.github.io/achal.github.io/post/Midterm_project_files/figure-html/unnamed-chunk-21-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Based on this plot, from all fields, we can tell that, Control Rates of seeding of 23000-25000 has significantly less Mean yield as compared to 26000-29000. It looks like Control Rates of Seeding between 27000 and 28000 has the highest Mean yield.&lt;/p&gt;
&lt;p&gt;We now calculate pooled SD for merged 4 plots &lt;code&gt;Mean_SD_Count.dat&lt;/code&gt; to calculate Effect Size and Required Replicates for all fields (combined analysis) using pooled SD.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pooled.dat &amp;lt;- Mean_SD_Count.dat


# # Pooled sd can be calculated as: 
pooled.dat$df &amp;lt;- pooled.dat$Count-1
# pooled SD is :
# pooledSD &amp;lt;- sqrt( sum(pooled.dat$sd^2 * pooled.dat$df) / sum(pooled.dat$df) )


# We can calculate our SD pooled using this formula:
#  s_{pooled} = \sqrt{\frac{\sum_i (n_i-1)s_i^2}{N-k}}
# We will derrive this in steps as below:

pooled.dat$df &amp;lt;- pooled.dat$Count-1
pooled.dat$sd.square &amp;lt;- pooled.dat$SD^2 

pooled.dat$ss &amp;lt;- pooled.dat$sd.square * pooled.dat$df


# We can use convenience function (aggregate) for splitting and calculating the necessary sums.
ds &amp;lt;- aggregate(ss ~ ControlRate, data = pooled.dat, sum)

# Two different built in methods for split apply, we could use aggregate for
# both if we wanted. This calculates our degrees of freedom.
ds$df &amp;lt;- tapply(pooled.dat$df, pooled.dat$ControlRate, sum) 
# divide ss by df and then we get sd square
ds$sd.square &amp;lt;- ds$ss / ds$df
# Finally, we can get our sd pooled
ds$SD_pooled &amp;lt;- sqrt(ds$sd.square)
ds&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   ControlRate          ss    df sd.square SD_pooled
## 1       23000    40846.73    99  412.5933  20.31239
## 2       24000  1351941.68   667 2026.8991  45.02110
## 3       25000   934566.13   631 1481.0874  38.48490
## 4       26000 16376572.57 20813  786.8434  28.05073
## 5       27000  9357584.58  7166 1305.8309  36.13628
## 6       28000  8410659.15  9104  923.8422  30.39477
## 7       29000  1409909.69   583 2418.3700  49.17693&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# However, we could also calculate our sd_pooled as below and get the same results :
sd_pooled &amp;lt;- lapply( split(Mean_SD_Count.dat, Mean_SD_Count.dat$ControlRate),
         function(dd) sqrt( sum( dd$SD^2 * (dd$Count-1) )/(sum(dd$Count-1)-nrow(dd)) ) )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now, we calculate Mean (Mean of Means) from the merged table &lt;code&gt;Mean_SD_Count.dat&lt;/code&gt;, so we can calculate Cohen’s d and RequiredReplicates for all four field combined.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ds.Mean &amp;lt;-
  setNames(aggregate(
  Mean_SD_Count.dat$Mean,
  by = list(Mean_SD_Count.dat$ControlRate),
  FUN = mean
  ),
  c(&amp;quot;ControlRate&amp;quot;, &amp;quot;Mean&amp;quot;))

ds &amp;lt;- merge(ds, ds.Mean, by.x = &amp;quot;ControlRate&amp;quot;)
ds&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   ControlRate          ss    df sd.square SD_pooled     Mean
## 1       23000    40846.73    99  412.5933  20.31239 108.5777
## 2       24000  1351941.68   667 2026.8991  45.02110 142.3585
## 3       25000   934566.13   631 1481.0874  38.48490 181.5407
## 4       26000 16376572.57 20813  786.8434  28.05073 226.4716
## 5       27000  9357584.58  7166 1305.8309  36.13628 234.8808
## 6       28000  8410659.15  9104  923.8422  30.39477 241.7849
## 7       29000  1409909.69   583 2418.3700  49.17693 221.5782&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we calculate the Effect Size and Cohen’s D for the combined 4 plots using mean yield and sd pooled for different ControlRate&lt;/p&gt;
&lt;p&gt;Now we calculate the Effect Size and Cohen’s D for the combined 4 plots using mean yield and sd pooled for different ControlRate usinf our function &lt;code&gt;calculate_field_mean_SD_and_get_RR_EffSize&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;RequiredReplicates_for_all_fields &amp;lt;- 
  calculate_field_mean_SD_and_get_RR_EffSize(
    field = ds, intervals = ControlRateInterval, Single.Field.Analysis = FALSE
    )

RequiredReplicates_for_all_fields&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $Req.Rep.table.field
##      Group            EffectSize          RequiredReplicates
## [1,] &amp;quot;23000 Vs 24000&amp;quot; &amp;quot;0.967241180364881&amp;quot; &amp;quot;17&amp;quot;              
## [2,] &amp;quot;24000 Vs 25000&amp;quot; &amp;quot;0.935567380483301&amp;quot; &amp;quot;18&amp;quot;              
## [3,] &amp;quot;25000 Vs 26000&amp;quot; &amp;quot;1.33427570681431&amp;quot;  &amp;quot;9&amp;quot;               
## [4,] &amp;quot;26000 Vs 27000&amp;quot; &amp;quot;0.259967383137317&amp;quot; &amp;quot;232&amp;quot;             
## [5,] &amp;quot;27000 Vs 28000&amp;quot; &amp;quot;0.206777477800031&amp;quot; &amp;quot;367&amp;quot;             
## [6,] &amp;quot;28000 Vs 29000&amp;quot; &amp;quot;0.49430440628565&amp;quot;  &amp;quot;64&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can plot this results for better visualization of pattern.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;RequiredReplicates_for_all_fields &amp;lt;-
  as.data.frame(RequiredReplicates_for_all_fields$Req.Rep.table.field)
  
  RequiredReplicates_for_all_fields$Group &amp;lt;-
  factor(RequiredReplicates_for_all_fields$Group)
  
  RequiredReplicates_for_all_fields$RequiredReplicates &amp;lt;-
  as.numeric(as.character(RequiredReplicates_for_all_fields$RequiredReplicates))
  
  RequiredReplicates_for_all_fields$EffectSize &amp;lt;-
  as.numeric(as.character(RequiredReplicates_for_all_fields$EffectSize))
  
  # Plot RequiredReplicates_for_all_fields
  ggplot(RequiredReplicates_for_all_fields,
  aes(x = EffectSize, y = RequiredReplicates)) +
  ggtitle(&amp;quot;Effect size Vs Required replicates for all fields data \n(Combined Effect)&amp;quot;) +
  geom_point(aes(shape = Group), size = 2)  +
  scale_shape_manual(values = 1:nlevels(EffectSize.Plot$Group)) +
  geom_line() +
  scale_x_continuous(&amp;quot;EffectSize&amp;quot;,
  breaks = c(
  0,
  0.2,
  0.5,
  1,
  max(RequiredReplicates_for_all_fields$EffectSize)
  ),
  labels = scaleFUN) +
  theme_bw() +
  theme(
  axis.title = element_text(size = 14, face = &amp;quot;bold&amp;quot;),
  axis.text = element_text(size = 10),
  plot.title = element_text(hjust = 0.5, face = &amp;quot;bold&amp;quot;)
  )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/achalneupane.github.io/achal.github.io/post/Midterm_project_files/figure-html/unnamed-chunk-25-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Based on the combined effect size (from all four fields), we can see that the Effect size is inversely proportional to Required Replicates. We also see that for the small effect of ~0.2, we need exponentially larger replicates, for medium effect (~0.5), we need about 80 replicates and for larger effect (more than 0.8), we only need about 20 or fewer replicates. Our analysis from all fields also indicates that we have highest mean yeild for controlRates of Seeding og 27000-29000.&lt;/p&gt;
&lt;p&gt;Final discussion and suggestion:&lt;/p&gt;
&lt;p&gt;Based on the results we saw above, if we take individual field (one at a time), we would need thousands of replicates for low effect size. However, for moderate and large effect size, the required replicates number signficantly decreases even if we use individual field data separately. On the other hand, when we combine all four fields, our required replictes decreases for all low, moderate and large effect sizes (Figure: Effect size Vs Required replicates for all fields data (Combined Effect)) as compared to individual fields (Figure: Effect size Vs Required replicates for each field data). I also found that the required replicates decreases for lower rates of seeding (control Rates of 23000 Vs 24000).
Based on these results, we can also conclude that the Required replicates is inversely proportional to the Effect size as seen in all four fields data and merged data.&lt;/p&gt;
&lt;p&gt;Aditionally, the mean yield significantly increases when we increase the seeding rates at control rates of 26000 to 28000 for each individual field. This was also consistent for combined field data (Figure: ControlRates Vs Mean yield for all four fields). So, my final suggestion for this analysis is that we should used all four fields to calculate required replicates and effect size, though we could still use single field data separately to derrive the conclusion that higher seeding rates (~26000-28000) has higher mean yield which was consistent in all four fields. However, making use of all four fields data is recommended.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Additional graphs</title>
      <link>/achalneupane.github.io/post/additional_graphs/</link>
      <pubDate>Thu, 15 Aug 2019 17:26:23 -0500</pubDate>
      <guid>/achalneupane.github.io/post/additional_graphs/</guid>
      <description>


&lt;script type=&#34;text/javascript&#34; src=&#34;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML&#34;&gt;
&lt;/script&gt;
&lt;div id=&#34;general-instructions&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;General Instructions&lt;/h1&gt;
&lt;p&gt;There are 5 exercises, each is worth 10 points. You are required to solve at least one exercise in R, and at least one in SAS. You are required to provide five solutions, each solution will be worth 10 points.&lt;/p&gt;
&lt;p&gt;For this exercise, you may use whatever graphics library you desire.&lt;/p&gt;
&lt;div id=&#34;experimental&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Experimental&lt;/h4&gt;
&lt;p&gt;Again, you will be allowed to provide one solution using Python. Elaborate on the similarities and differences between Python function definitions and R or IML or Macro language.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;exercise-1.&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Exercise 1.&lt;/h1&gt;
&lt;p&gt;Load the &lt;code&gt;ncaa2018.csv&lt;/code&gt; data set and create histograms, QQ-norm and box-whisker plots for &lt;code&gt;ELO&lt;/code&gt;. Add a title to each plot, identifying the data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ncaa2018.dat = read.table(
  &amp;quot;/Users/owner1/Box/sdsu/statistical_programming_course/Week_7/ncaa2018.csv&amp;quot;,
  header = T,
  sep = &amp;quot;,&amp;quot;
)
# head(ncaa2018.dat)
# histogram
hist(ncaa2018.dat$ELO, xlab = &amp;quot;ELO&amp;quot;, main = &amp;quot;Histogram of ELO&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/achalneupane.github.io/achal.github.io/post/Additional_Graphs_files/figure-html/unnamed-chunk-1-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# QQ plot
qqnorm(ncaa2018.dat$ELO, main = &amp;quot;Normal QQ plot&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/achalneupane.github.io/achal.github.io/post/Additional_Graphs_files/figure-html/unnamed-chunk-1-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# box-whisker plot
boxplot(ncaa2018.dat$ELO, main = &amp;quot;Box-whisker of ELO&amp;quot;, ylab = &amp;quot;ELO&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/achalneupane.github.io/achal.github.io/post/Additional_Graphs_files/figure-html/unnamed-chunk-1-3.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;div id=&#34;part-b&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Part b&lt;/h3&gt;
&lt;p&gt;A common recommendation to address issues of non-normality is to transform data to correct for skewness. One common transformation is the log transform.&lt;/p&gt;
&lt;p&gt;Transform &lt;code&gt;ELO&lt;/code&gt; to &lt;code&gt;log(ELO)&lt;/code&gt; and produce histograms, box-whisker and qqnorm plots of the transformed values. Are the transformed values more or less skewed than the original? (Note - the log transform is used to correct skewness, it is less useful for correcting kurtosis).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;hist(log(ncaa2018.dat$ELO), xlab = &amp;quot;ELO&amp;quot;, main = &amp;quot;Histogram of log transformed ELO&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/achalneupane.github.io/achal.github.io/post/Additional_Graphs_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# QQ plot
qqnorm(log(ncaa2018.dat$ELO), main = &amp;quot;Normal QQ plot of log transformed ELO&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/achalneupane.github.io/achal.github.io/post/Additional_Graphs_files/figure-html/unnamed-chunk-2-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# box-whisker plot
boxplot(log(ncaa2018.dat$ELO), main = &amp;quot;Box-whisker of log transformed ELO&amp;quot;, ylab = &amp;quot;ELO&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/achalneupane.github.io/achal.github.io/post/Additional_Graphs_files/figure-html/unnamed-chunk-2-3.png&#34; width=&#34;672&#34; /&gt;
The values are less skewed now. Log transformation is a good way to display plot with skewedness in data.
# Exercise 2.&lt;/p&gt;
&lt;p&gt;Review Exercise 4, Homework 6, where you calculated skewness and kurtosis. The reference for this exercise, &lt;a href=&#34;https://www.itl.nist.gov/div898/handbook/eda/section3/eda35b.htm&#34; class=&#34;uri&#34;&gt;https://www.itl.nist.gov/div898/handbook/eda/section3/eda35b.htm&lt;/a&gt;, gives four example statistical distributions. We will reproduce the histograms, and add qqnorm and box-whisker plots.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;part-a&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Part a&lt;/h2&gt;
&lt;p&gt;Use the code below from lecture to draw 1000 samples from the normal distribution.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;norm.sample &amp;lt;- rnorm(1000, mean=0, sd=1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Look up the corresponding &lt;code&gt;r*&lt;/code&gt; functions in R for the Cauchy distribution (use location=0, scale=1), and the Weibull distribution (use shape = 1.5). For the double exponential, use you can use the &lt;code&gt;*laplace&lt;/code&gt; functions from the &lt;code&gt;rmutil&lt;/code&gt; library, or you can use &lt;code&gt;rexp(1000) - rexp(1000)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Draw 1000 samples from each of these distributions. Calculate skewness and kurtosis for each sample. You may use your own function, or use the &lt;code&gt;moments&lt;/code&gt; library.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dcauchy.1000 &amp;lt;- rcauchy(1:1000, location = 0, scale = 1)
dweibull.1000 &amp;lt;- rweibull(1:1000, shape = 1.5)
rexp.1000 &amp;lt;- rexp(1000) - rexp(1000)



# Kurtosis
library(moments)

norm.sample.kurt &amp;lt;- kurtosis(norm.sample, na.rm = TRUE)
norm.sample.kurt&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 3.186137&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dcauchy.1000.kurt &amp;lt;- kurtosis(dcauchy.1000, na.rm = TRUE)
dcauchy.1000.kurt&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 216.1207&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dweibull.1000.kurt &amp;lt;- kurtosis(dweibull.1000, na.rm = TRUE)
dweibull.1000.kurt&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 4.464365&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rexp.1000.kurt &amp;lt;- kurtosis(rexp.1000, na.rm = TRUE)
rexp.1000.kurt&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 5.153933&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;norm.sample.skew &amp;lt;- skewness(norm.sample, na.rm = TRUE)
norm.sample.skew&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] -0.06600051&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dcauchy.1000.skew &amp;lt;- skewness(dcauchy.1000, na.rm = TRUE)
dcauchy.1000.skew&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] -10.63517&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dweibull.1000.skew &amp;lt;- skewness(dweibull.1000, na.rm = TRUE)
dweibull.1000.skew&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1.108429&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rexp.1000.skew &amp;lt;- skewness(rexp.1000, na.rm = TRUE)
rexp.1000.skew&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.1488806&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;part-b-1&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Part b&lt;/h2&gt;
&lt;p&gt;Plot the histograms for each distribution. Use &lt;code&gt;par(mfrow=c(2,2))&lt;/code&gt; in your code chunk to combine the four histogram in a single plot. Add titles to the histograms indicating the distribution. Set the x-axis label to show the calculated skewness and kurtosis, i.e. &lt;code&gt;skewness = ####, kurtosis = ####&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;par(mfrow=c(2,2))
hist(norm.sample, xlab = paste0(&amp;quot;skewness = &amp;quot;, norm.sample.skew , &amp;quot;, kurtosis = &amp;quot;, norm.sample.kurt), main = &amp;quot;Histogram of Normal Distribution&amp;quot;)
hist(dcauchy.1000, xlab = paste0(&amp;quot;skewness = &amp;quot;, dcauchy.1000.skew , &amp;quot;, kurtosis = &amp;quot;, dcauchy.1000.kurt), main = &amp;quot;Histogram of Cauchy Distribution&amp;quot;)
hist(dweibull.1000, xlab = paste0(&amp;quot;skewness = &amp;quot;, dweibull.1000.kurt , &amp;quot;, kurtosis = &amp;quot;, dweibull.1000.kurt), main = &amp;quot;Histogram of Dweibull Distribution&amp;quot;)
hist(rexp.1000, xlab = paste0(&amp;quot;skewness = &amp;quot;, rexp.1000.skew , &amp;quot;, kurtosis = &amp;quot;, rexp.1000.kurt), main = &amp;quot;Histogram of double Exponential Distribution&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/achalneupane.github.io/achal.github.io/post/Additional_Graphs_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;part-c&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Part c&lt;/h2&gt;
&lt;p&gt;Repeat Part b, but with QQ-norm plots.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;par(mfrow=c(2,2))
qqnorm(norm.sample, xlab = paste0(&amp;quot;skewness = &amp;quot;, norm.sample.skew , &amp;quot;, kurtosis = &amp;quot;, norm.sample.kurt), main = &amp;quot;QQplot of Normal Distribution&amp;quot;)
qqnorm(dcauchy.1000, xlab = paste0(&amp;quot;skewness = &amp;quot;, dcauchy.1000.skew , &amp;quot;, kurtosis = &amp;quot;, dcauchy.1000.kurt), main = &amp;quot;QQplot of Cauchy Distribution&amp;quot;)
qqnorm(dweibull.1000, xlab = paste0(&amp;quot;skewness = &amp;quot;, dweibull.1000.kurt , &amp;quot;, kurtosis = &amp;quot;, dweibull.1000.kurt), main = &amp;quot;QQplot of Dweibull Distribution&amp;quot;)
qqnorm(rexp.1000, xlab = paste0(&amp;quot;skewness = &amp;quot;, rexp.1000.skew , &amp;quot;, kurtosis = &amp;quot;, rexp.1000.kurt), main = &amp;quot;QQplot of rexp Distribution&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/achalneupane.github.io/achal.github.io/post/Additional_Graphs_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;part-d&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Part d&lt;/h2&gt;
&lt;p&gt;Repeat Part b, but with box-whisker plots.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;par(mfrow=c(2,2))
boxplot(norm.sample, xlab = paste0(&amp;quot;skewness = &amp;quot;, norm.sample.skew , &amp;quot;, kurtosis = &amp;quot;, norm.sample.kurt), main = &amp;quot;Boxplot of Normal Distribution&amp;quot;)
boxplot(dcauchy.1000, xlab = paste0(&amp;quot;skewness = &amp;quot;, dcauchy.1000.skew , &amp;quot;, kurtosis = &amp;quot;, dcauchy.1000.kurt), main = &amp;quot;Boxplot of Cauchy Distribution&amp;quot;)
boxplot(dweibull.1000, xlab = paste0(&amp;quot;skewness = &amp;quot;, dweibull.1000.kurt , &amp;quot;, kurtosis = &amp;quot;, dweibull.1000.kurt), main = &amp;quot;Boxplot of Dweibull Distribution&amp;quot;)
boxplot(rexp.1000, xlab = paste0(&amp;quot;skewness = &amp;quot;, rexp.1000.skew , &amp;quot;, kurtosis = &amp;quot;, rexp.1000.kurt), main = &amp;quot;Boxplot of double rexp Distribution&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/achalneupane.github.io/achal.github.io/post/Additional_Graphs_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Hints for SAS. If you create the samples in IML, use&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Normal = j(1, 1000, .);
call randgen(Normal, &amp;quot;NORMAL&amp;quot;, 0, `);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can generate samples in the data step using&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;do i = 1 to 1000;
  Normal = rand(&amp;#39;NORMAL&amp;#39;,0,1);
  output;
end;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;RAND doesn’t provide a Laplace option, but you can create samples from this distribution by&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;rand(&amp;#39;EXPONENTIAL&amp;#39;)-rand(&amp;#39;EXPONENTIAL&amp;#39;);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To group multiple plots, use&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ods graphics / width=8cm height=8cm;
ods layout gridded columns=2;
ods region;
 ... first plot

ods region;
 ... second plot

ods layout end;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You might need to include&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ods graphics off;

ods graphics on;
ODS GRAPHICS / reset=All;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to return the SAS graphics output to normal.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;exercise-3.&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Exercise 3.&lt;/h2&gt;
&lt;p&gt;We will create a series of graphs illustrating how the Poisson distribution approaches the normal distribution with large &lt;span class=&#34;math inline&#34;&gt;\(\lambda\)&lt;/span&gt;. We will iterate over a sequence of &lt;code&gt;lambda&lt;/code&gt;, from 2 to 64, doubling &lt;code&gt;lambda&lt;/code&gt; each time. For each ‘lambda’ draw 1000 samples from the Poisson distribution.&lt;/p&gt;
&lt;p&gt;Calculate the skewness of each set of samples, and produce histograms, QQ-norm and box-whisker plots. You can use &lt;code&gt;par(mfrow=c(1,3))&lt;/code&gt; to display all three for one &lt;code&gt;lambda&lt;/code&gt; in one line. Add &lt;code&gt;lambda=##&lt;/code&gt; to the title of the histogram, and &lt;code&gt;skewness=##&lt;/code&gt; to the title of the box-whisker plot.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;part-b.&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Part b.&lt;/h2&gt;
&lt;p&gt;Remember that &lt;code&gt;lambda&lt;/code&gt; represents the mean of a discrete (counting) variable. At what size mean is Poisson data no longer skewed, relative to normally distributed data? You might run this 2 or 3 times, with different seeds; this number varies in my experience.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(moments)

rpois_skew_collect &amp;lt;- {}
mu &amp;lt;- 2

# set.seed(54321)
while(mu &amp;lt;= 64){
  
rpois_values &amp;lt;- rpois(1000, lambda = mu)
rpois_skew &amp;lt;- skewness(rpois_values, na.rm = TRUE)
rpois_skew_collect[mu-1] &amp;lt;- skewness(rpois_values)
# attaching all three plots together
par(mfrow=c(1,3))

# histogram
hist(rpois_values, main = paste0(&amp;quot;Histogram of rpois Distribution for lambda = &amp;quot;, mu))
# QQ plot
qqnorm(rpois_values, main = &amp;quot;Normal QQ plot for poisson&amp;quot;)

# box-whisker plot
boxplot(rpois_values, main = paste0(&amp;quot;Box-whisker with skewness = &amp;quot;, rpois_skew), ylab = &amp;quot;rpois_values&amp;quot;)
mu &amp;lt;- mu*2
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/achalneupane.github.io/achal.github.io/post/Additional_Graphs_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;1152&#34; /&gt;&lt;img src=&#34;/achalneupane.github.io/achal.github.io/post/Additional_Graphs_files/figure-html/unnamed-chunk-8-2.png&#34; width=&#34;1152&#34; /&gt;&lt;img src=&#34;/achalneupane.github.io/achal.github.io/post/Additional_Graphs_files/figure-html/unnamed-chunk-8-3.png&#34; width=&#34;1152&#34; /&gt;&lt;img src=&#34;/achalneupane.github.io/achal.github.io/post/Additional_Graphs_files/figure-html/unnamed-chunk-8-4.png&#34; width=&#34;1152&#34; /&gt;&lt;img src=&#34;/achalneupane.github.io/achal.github.io/post/Additional_Graphs_files/figure-html/unnamed-chunk-8-5.png&#34; width=&#34;1152&#34; /&gt;&lt;img src=&#34;/achalneupane.github.io/achal.github.io/post/Additional_Graphs_files/figure-html/unnamed-chunk-8-6.png&#34; width=&#34;1152&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(rpois_skew_collect)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/achalneupane.github.io/achal.github.io/post/Additional_Graphs_files/figure-html/unnamed-chunk-8-7.png&#34; width=&#34;1152&#34; /&gt;&lt;/p&gt;
&lt;p&gt;It looks like the skewness starts to diminish significantly after mean size 32 (lambda) for poisson data.&lt;/p&gt;
&lt;p&gt;If you do this in SAS, create a data table with data columns each representing a different &lt;span class=&#34;math inline&#34;&gt;\(\mu\)&lt;/span&gt;. You can see combined histogram, box-whisker and QQ-norm, for all columns, by calling&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;proc univariate data=Distributions plot;
run;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At what &lt;span class=&#34;math inline&#34;&gt;\(\mu\)&lt;/span&gt; is skewness of the Poisson distribution small enough to be considered normal?
It looks like after mu 60, skewness is small enough to be considered normal.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;exercise-4&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Exercise 4&lt;/h1&gt;
&lt;div id=&#34;part-a-1&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Part a&lt;/h2&gt;
&lt;p&gt;Write a function that accepts a vector &lt;code&gt;vec&lt;/code&gt;, a vector of integers, a main axis label and an x axis label. This function should
1. iterate over each element &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; in the vector of integers
2. produce a histogram for &lt;code&gt;vec&lt;/code&gt; setting the number of bins in the histogram to &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;
3. label main and x-axis with the specified parameters.
4. label the y-axis to read &lt;code&gt;Frequency, bins =&lt;/code&gt; and the number of bins.&lt;/p&gt;
&lt;p&gt;Hint:
You can simplify this function by using the parameter &lt;code&gt;...&lt;/code&gt; - see &lt;code&gt;?plot&lt;/code&gt; or ?&lt;code&gt;hist&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Writing the asked function&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# vec &amp;lt;- c(12,36,60)
# dat &amp;lt;- hidalgo.dat[,1]
# i=1

plot.histograms &amp;lt;- function(dat, vec, main, xlab){
  par(mfrow=c(1,length(vec)))
  for(i in 1:length(vec)){
  print(hist(dat, breaks = vec[i],  main = main, xlab = xlab, ylab = paste0(&amp;#39;Frequency, bins = &amp;#39;, vec[i])))

}
}

# now read the file
hidalgo.dat = read.table(&amp;quot;/Users/owner1/Box/sdsu/statistical_programming_course/Week_9/hidalgo.dat&amp;quot;,
                   header = T,
                   sep = &amp;quot;,&amp;quot;
)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;part-b-2&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Part b&lt;/h2&gt;
&lt;p&gt;Test your function with the &lt;code&gt;hidalgo&lt;/code&gt; data set (see below), using bin numbers 12, 36, and 60. You should be able to call your function with something like&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot.histograms(hidalgo.dat[,1],c(12,36,60), main=&amp;quot;1872 Hidalgo issue&amp;quot;,xlab= &amp;quot;Thickness (mm)&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $breaks
##  [1] 0.060 0.065 0.070 0.075 0.080 0.085 0.090 0.095 0.100 0.105 0.110
## [12] 0.115 0.120 0.125 0.130 0.135
## 
## $counts
##  [1]   3  35  93 131  45  24  19  35  31  32  15   8   7   5   1
## 
## $density
##  [1]  1.2396694 14.4628099 38.4297521 54.1322314 18.5950413  9.9173554
##  [7]  7.8512397 14.4628099 12.8099174 13.2231405  6.1983471  3.3057851
## [13]  2.8925620  2.0661157  0.4132231
## 
## $mids
##  [1] 0.0625 0.0675 0.0725 0.0775 0.0825 0.0875 0.0925 0.0975 0.1025 0.1075
## [11] 0.1125 0.1175 0.1225 0.1275 0.1325
## 
## $xname
## [1] &amp;quot;dat&amp;quot;
## 
## $equidist
## [1] TRUE
## 
## attr(,&amp;quot;class&amp;quot;)
## [1] &amp;quot;histogram&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $breaks
##  [1] 0.064 0.066 0.068 0.070 0.072 0.074 0.076 0.078 0.080 0.082 0.084
## [12] 0.086 0.088 0.090 0.092 0.094 0.096 0.098 0.100 0.102 0.104 0.106
## [23] 0.108 0.110 0.112 0.114 0.116 0.118 0.120 0.122 0.124 0.126 0.128
## [34] 0.130 0.132
## 
## $counts
##  [1]  4  1 33 52 21 38 34 79 33 10  4  3 19  8  9  5 12 20 17  9  9 10 18
## [24]  9  3  3  1  7  3  2  2  1  4  1
## 
## $density
##  [1]  4.132231  1.033058 34.090909 53.719008 21.694215 39.256198 35.123967
##  [8] 81.611570 34.090909 10.330579  4.132231  3.099174 19.628099  8.264463
## [15]  9.297521  5.165289 12.396694 20.661157 17.561983  9.297521  9.297521
## [22] 10.330579 18.595041  9.297521  3.099174  3.099174  1.033058  7.231405
## [29]  3.099174  2.066116  2.066116  1.033058  4.132231  1.033058
## 
## $mids
##  [1] 0.065 0.067 0.069 0.071 0.073 0.075 0.077 0.079 0.081 0.083 0.085
## [12] 0.087 0.089 0.091 0.093 0.095 0.097 0.099 0.101 0.103 0.105 0.107
## [23] 0.109 0.111 0.113 0.115 0.117 0.119 0.121 0.123 0.125 0.127 0.129
## [34] 0.131
## 
## $xname
## [1] &amp;quot;dat&amp;quot;
## 
## $equidist
## [1] TRUE
## 
## attr(,&amp;quot;class&amp;quot;)
## [1] &amp;quot;histogram&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/achalneupane.github.io/achal.github.io/post/Additional_Graphs_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;## $breaks
##  [1] 0.064 0.065 0.066 0.067 0.068 0.069 0.070 0.071 0.072 0.073 0.074
## [12] 0.075 0.076 0.077 0.078 0.079 0.080 0.081 0.082 0.083 0.084 0.085
## [23] 0.086 0.087 0.088 0.089 0.090 0.091 0.092 0.093 0.094 0.095 0.096
## [34] 0.097 0.098 0.099 0.100 0.101 0.102 0.103 0.104 0.105 0.106 0.107
## [45] 0.108 0.109 0.110 0.111 0.112 0.113 0.114 0.115 0.116 0.117 0.118
## [56] 0.119 0.120 0.121 0.122 0.123 0.124 0.125 0.126 0.127 0.128 0.129
## [67] 0.130 0.131
## 
## $counts
##  [1]  3  1  0  1  7 26 20 32 11 10 20 18 11 23 42 37 15 18  7  3  2  2  1
## [24]  2 10  9  3  5  6  3  2  3  7  5  5 15  9  8  7  2  5  4  3  7  7 11
## [47]  4  5  0  3  3  0  1  0  4  3  1  2  2  0  2  0  0  1  3  1  1
## 
## $density
##  [1]  6.198347  2.066116  0.000000  2.066116 14.462810 53.719008 41.322314
##  [8] 66.115702 22.727273 20.661157 41.322314 37.190083 22.727273 47.520661
## [15] 86.776860 76.446281 30.991736 37.190083 14.462810  6.198347  4.132231
## [22]  4.132231  2.066116  4.132231 20.661157 18.595041  6.198347 10.330579
## [29] 12.396694  6.198347  4.132231  6.198347 14.462810 10.330579 10.330579
## [36] 30.991736 18.595041 16.528926 14.462810  4.132231 10.330579  8.264463
## [43]  6.198347 14.462810 14.462810 22.727273  8.264463 10.330579  0.000000
## [50]  6.198347  6.198347  0.000000  2.066116  0.000000  8.264463  6.198347
## [57]  2.066116  4.132231  4.132231  0.000000  4.132231  0.000000  0.000000
## [64]  2.066116  6.198347  2.066116  2.066116
## 
## $mids
##  [1] 0.0645 0.0655 0.0665 0.0675 0.0685 0.0695 0.0705 0.0715 0.0725 0.0735
## [11] 0.0745 0.0755 0.0765 0.0775 0.0785 0.0795 0.0805 0.0815 0.0825 0.0835
## [21] 0.0845 0.0855 0.0865 0.0875 0.0885 0.0895 0.0905 0.0915 0.0925 0.0935
## [31] 0.0945 0.0955 0.0965 0.0975 0.0985 0.0995 0.1005 0.1015 0.1025 0.1035
## [41] 0.1045 0.1055 0.1065 0.1075 0.1085 0.1095 0.1105 0.1115 0.1125 0.1135
## [51] 0.1145 0.1155 0.1165 0.1175 0.1185 0.1195 0.1205 0.1215 0.1225 0.1235
## [61] 0.1245 0.1255 0.1265 0.1275 0.1285 0.1295 0.1305
## 
## $xname
## [1] &amp;quot;dat&amp;quot;
## 
## $equidist
## [1] TRUE
## 
## attr(,&amp;quot;class&amp;quot;)
## [1] &amp;quot;histogram&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to plot three different histograms of the &lt;code&gt;hidalgo&lt;/code&gt; data set.&lt;/p&gt;
&lt;p&gt;If you do this in SAS, write a macro that accepts a table name, a column name, a list of integers, a main axis label and an x axis label. This macro should scan over each element in the list of integers and produce a histogram for each integer value, setting the bin count to the element in the input list, and labeling main and x-axis with the specified parameters. You should label the y-axis to read &lt;code&gt;Frequency, bins =&lt;/code&gt; and the number of bins.&lt;/p&gt;
&lt;p&gt;Test your macro with the &lt;code&gt;hidalgo&lt;/code&gt; data set (see below), using bin numbers 12, 36, and 60. You should be able to call your macro with something like&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;%plot_histograms(hidalgo, y, 12 36 60, main=&amp;quot;1872 Hidalgo issue&amp;quot;, xlabel=&amp;quot;Thickness (mm)&amp;quot;);&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;to plot three different histograms of the &lt;code&gt;hidalgo&lt;/code&gt; data set.&lt;/p&gt;
&lt;p&gt;Hint:
Assume &lt;code&gt;12 36 60&lt;/code&gt; resolve to a single macro parameter and use &lt;code&gt;%scan&lt;/code&gt;. Your macro definition can look something like&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;%macro plot_histograms(table_name, column_name, number_of_bins, main=&amp;quot;Main&amp;quot;, xlabel=&amp;quot;X Label&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Data&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;hidalgo&lt;/code&gt; data set is in the file &lt;code&gt;hidalgo.dat&lt;/code&gt; These data consist of paper thickness measurements of stamps from the 1872 Hidalgo issue of Mexico. This data set is commonly used to illustrate methods of determining the number of components in a mixture (in this case, different batches of paper). See &lt;a href=&#34;https://www.jstor.org/stable/2290118&#34; class=&#34;uri&#34;&gt;https://www.jstor.org/stable/2290118&lt;/a&gt;,&lt;br /&gt;
&lt;a href=&#34;https://books.google.com/books?id=1CuznRORa3EC&amp;amp;lpg=PA95&amp;amp;pg=PA94#v=onepage&amp;amp;q&amp;amp;f=false&#34; class=&#34;uri&#34;&gt;https://books.google.com/books?id=1CuznRORa3EC&amp;amp;lpg=PA95&amp;amp;pg=PA94#v=onepage&amp;amp;q&amp;amp;f=false&lt;/a&gt; and &lt;a href=&#34;https://books.google.com/books?id=c2_fAox0DQoC&amp;amp;pg=PA180&amp;amp;lpg=PA180&amp;amp;f=false&#34; class=&#34;uri&#34;&gt;https://books.google.com/books?id=c2_fAox0DQoC&amp;amp;pg=PA180&amp;amp;lpg=PA180&amp;amp;f=false&lt;/a&gt;
.&lt;/p&gt;
&lt;p&gt;Some analysis suggest there are three different mixtures of paper used to produce the 1872 Hidalgo issue; other analysis suggest seven. Why do you think there might be disagreement about the number of mixtures?&lt;/p&gt;
&lt;p&gt;That is perhaps because of the uncontrollable variation
in paper thickness people used to have from sheet to sheet, we would expect more than three or seven mixtures, but in case of hidalgo, thickness was not that high. We can see in the histogram that the thickness was maintianed below 0.07 mm with highest frequency.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;exercise-5.&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Exercise 5.&lt;/h1&gt;
&lt;p&gt;We’ve been working with data from Wansink and Payne, Table 1:&lt;/p&gt;
&lt;div id=&#34;reproducing-part-of-wansink-table-1&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Reproducing part of Wansink Table 1&lt;/h3&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col width=&#34;16%&#34; /&gt;
&lt;col width=&#34;12%&#34; /&gt;
&lt;col width=&#34;12%&#34; /&gt;
&lt;col width=&#34;12%&#34; /&gt;
&lt;col width=&#34;12%&#34; /&gt;
&lt;col width=&#34;12%&#34; /&gt;
&lt;col width=&#34;12%&#34; /&gt;
&lt;col width=&#34;12%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;Measure&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;1936&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;1946&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;1951&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;1963&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;1975&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;1997&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;2006&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;calories per recipe (SD)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2123.8 (1050.0)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2122.3 (1002.3)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2089.9 (1009.6)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2250.0 (1078.6)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2234.2 (1089.2)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2249.6 (1094.8)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3051.9 (1496.2)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;calories per serving (SD)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;268.1 (124.8)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;271.1 (124.2)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;280.9 (116.2)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;294.7 (117.7)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;285.6 (118.3)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;288.6 (122.0)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;&lt;strong&gt;384.4&lt;/strong&gt; (168.3)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;servings per recipe (SD)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.9 (13.3)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.9 (13.3)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;13.0 (14.5)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.7 (14.6)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.4 (14.3)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.4 (14.3)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.7 (13.0)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;However, in Homework 2, we also considered the value given in the text&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The resulting increase of 168.8 calories (from 268.1 calories … to &lt;strong&gt;436.9&lt;/strong&gt; calories …) represents a 63.0% increase … in calories per serving.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There is a discrepancy between two values reported for calories per serving, 2006. We will use graphs to attempt to determine which value is most consistent.&lt;/p&gt;
&lt;p&gt;First, consider the relationship between Calories per Serving and Calories per Recipe:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Calories per Serving = Calories per Recipe / Servings per Recipe&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Since &lt;code&gt;Servings per Recipe&lt;/code&gt; is effectively constant over time (12.4-13.0), we can assume the relationship between &lt;code&gt;Calories per Serving&lt;/code&gt; and &lt;code&gt;Calories per Recipe&lt;/code&gt; is linear,&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\text{Calories per Serving} = \beta_0 + \beta_1 \times \text{Calories per Recipe}
\]&lt;/span&gt;
with &lt;span class=&#34;math inline&#34;&gt;\(\text{Servings per Recipe} = 1/\beta_1\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;We will fit a linear model, with &lt;code&gt;Calories per Recipe&lt;/code&gt; as the independent variable against two sets of values for &lt;code&gt;Calories per Serving&lt;/code&gt;, such that&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Assumption 1. The value in the table (&lt;span class=&#34;math inline&#34;&gt;\(384.4\)&lt;/span&gt;) is correct.&lt;/li&gt;
&lt;li&gt;Assumption 2. The value in the text (&lt;span class=&#34;math inline&#34;&gt;\(436.9\)&lt;/span&gt;) is correct.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We use the data:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Assumptions.dat &amp;lt;- data.frame(
  CaloriesPerRecipe = c(2123.8, 2122.3, 2089.9, 2250.0, 2234.2, 2249.6, 3051.9),
  Assumption1 = c(268.1, 271.1, 280.9, 294.7, 285.6, 288.6, 384.4),
  Assumption2 = c(268.1, 271.1, 280.9, 294.7, 285.6, 288.6, 436.9))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;and fit linear models&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Assumption1.lm &amp;lt;- lm(Assumption1 ~ CaloriesPerRecipe,data=Assumptions.dat)
Assumption2.lm &amp;lt;- lm(Assumption2 ~ CaloriesPerRecipe,data=Assumptions.dat)
summary(Assumption1.lm)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## lm(formula = Assumption1 ~ CaloriesPerRecipe, data = Assumptions.dat)
## 
## Residuals:
##       1       2       3       4       5       6       7 
## -7.0238 -3.8475  9.7610  4.7417 -2.5010 -1.3112  0.1808 
## 
## Coefficients:
##                    Estimate Std. Error t value Pr(&amp;gt;|t|)    
## (Intercept)       25.477429  17.351550   1.468    0.202    
## CaloriesPerRecipe  0.117547   0.007466  15.745 1.88e-05 ***
## ---
## Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1
## 
## Residual standard error: 6.163 on 5 degrees of freedom
## Multiple R-squared:  0.9802, Adjusted R-squared:  0.9763 
## F-statistic: 247.9 on 1 and 5 DF,  p-value: 1.879e-05&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(Assumption2.lm)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## lm(formula = Assumption2 ~ CaloriesPerRecipe, data = Assumptions.dat)
## 
## Residuals:
##       1       2       3       4       5       6       7 
## -4.1798 -0.9169 14.5608  0.3051 -6.0261 -5.7248  1.9817 
## 
## Coefficients:
##                     Estimate Std. Error t value Pr(&amp;gt;|t|)    
## (Intercept)       -99.891018  21.933161  -4.554  0.00609 ** 
## CaloriesPerRecipe   0.175238   0.009437  18.569 8.34e-06 ***
## ---
## Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1
## 
## Residual standard error: 7.79 on 5 degrees of freedom
## Multiple R-squared:  0.9857, Adjusted R-squared:  0.9828 
## F-statistic: 344.8 on 1 and 5 DF,  p-value: 8.336e-06&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;part-a.&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Part a.&lt;/h3&gt;
&lt;p&gt;Plot the regression. Use points to plot &lt;code&gt;Assumption1&lt;/code&gt; vs &lt;code&gt;CaloriesPerRecipe&lt;/code&gt;, and &lt;code&gt;Assumption2&lt;/code&gt; vs &lt;code&gt;CaloriesPerRecipe&lt;/code&gt;, on the same graph. Add lines (i.e. &lt;code&gt;abline&lt;/code&gt;) to show the fit from the regression. Use different colors for the two assumptions. Which of the two lines appears to best explain the data?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;attach(Assumptions.dat)
par(mfrow=c(1,1))
plot(Assumption1~CaloriesPerRecipe, cex = 1.5, type = &amp;#39;p&amp;#39;, col = &amp;#39;red&amp;#39;)
abline(Assumption1.lm)
points(Assumption2~CaloriesPerRecipe, cex = 1.5, col = &amp;#39;blue&amp;#39;)
abline(Assumption2.lm)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/achalneupane.github.io/achal.github.io/post/Additional_Graphs_files/figure-html/unnamed-chunk-13-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;part-b.-1&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Part b.&lt;/h3&gt;
&lt;p&gt;Produce diagnostic plots plots of the residuals from both linear models (in R, use &lt;code&gt;residuals(Assumption1.lm)&lt;/code&gt;). qqnorm or box-whisker plots will probably be the most effective; there are too few points for a histogram.&lt;/p&gt;
&lt;p&gt;Use the code below to place two plots, side by side. You can produce more than one pair of plots, if you wise.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;par(mfrow=c(1,2))
boxplot(residuals(Assumption1.lm), main = &amp;quot;Boxplot for Assumption1&amp;quot; ) 
boxplot(residuals(Assumption2.lm), main = &amp;quot;Boxplot for Assumption2&amp;quot; )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/achalneupane.github.io/achal.github.io/post/Additional_Graphs_files/figure-html/unnamed-chunk-14-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;par(mfrow=c(1,2))
qqnorm(residuals(Assumption1.lm), main = &amp;quot;QQplot for Assumption1&amp;quot; )
qqline(residuals(Assumption1.lm))
qqnorm(residuals(Assumption2.lm), main = &amp;quot;QQplot for Assumption2&amp;quot; )
qqline(residuals(Assumption2.lm))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/achalneupane.github.io/achal.github.io/post/Additional_Graphs_files/figure-html/unnamed-chunk-15-1.png&#34; width=&#34;768&#34; /&gt;&lt;/p&gt;
&lt;p&gt;From these plots, which assumption is most likely correct. That is, which assumption produces a linear model that least violates assumptions of normality of the residual errors? Which assumption produces outliers in the residuals?&lt;/p&gt;
&lt;p&gt;Answer: Based on the plots, assumption1 produces a more linear model that least violates assumption of normality of the residuals errors. Assumption2 produces the outlier/s.&lt;/p&gt;
&lt;p&gt;I’ve included similar data and linear models for SAS in the SAS template. If you choose SAS, you will need to modify the PROC GLM code to produce the appropriate diagnostic plots.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Arrays</title>
      <link>/achalneupane.github.io/post/arrays/</link>
      <pubDate>Thu, 15 Aug 2019 17:26:23 -0500</pubDate>
      <guid>/achalneupane.github.io/post/arrays/</guid>
      <description>


&lt;script type=&#34;text/javascript&#34; src=&#34;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML&#34;&gt;
&lt;/script&gt;
&lt;div id=&#34;instructions&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Instructions&lt;/h1&gt;
&lt;p&gt;There are six exercises below. You are required to provide solutions for at least four of the five. You are required to solve at least one exercise in R, and at least one in SAS. You are required to provide five solutions, each solution will be worth 10 points. Thus, you may choose to provide both R and SAS solutions for a single exercise, or you may solve all five problems, mixing the languages as you wish. The first four exercise refer to formula from the previous homework, you may reuse code as you wish.&lt;/p&gt;
&lt;div id=&#34;experimental&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Experimental&lt;/h4&gt;
&lt;p&gt;Again, you will be allowed to provide one solution using Python. Elaborate on the similarities and differences between Python arrays vs R or IML.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;exercise-1.&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Exercise 1.&lt;/h1&gt;
&lt;div id=&#34;part-a.&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Part a.&lt;/h3&gt;
&lt;p&gt;We will calculate a number of required replicates for a range of mean differences, comparable to calories per serving estimates found in Wansink, Table 1.&lt;/p&gt;
&lt;p&gt;Let &lt;span class=&#34;math inline&#34;&gt;\(m_1\)&lt;/span&gt; be a sequence of means from 320-420, incremented by 10. Let &lt;span class=&#34;math inline&#34;&gt;\(m_2\)&lt;/span&gt; be 270. Assume a pooled standard deviation of 150.&lt;/p&gt;
&lt;p&gt;Calculate Cohen’s &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt; for the pairs of means &lt;span class=&#34;math inline&#34;&gt;\({320 - 270, 330 - 270, ...., 420 - 270}\)&lt;/span&gt;, letting &lt;span class=&#34;math inline&#34;&gt;\(s_i = s_j = s_{pooled}\)&lt;/span&gt;. Calculate the required replicates for these same pairs of means. You may reuse code or functions from previous homework at your discretion.&lt;/p&gt;
&lt;p&gt;To show your results, either create and print a matrix with one colum for effect size and one column for replicates, or plot required replicates versus effect size (effect size will be the independent variable). What does this tell you about the number of observations required to detect medium-size effects? You may include reference lines in your plot to illustrate.&lt;/p&gt;
&lt;p&gt;Since we know that &lt;span class=&#34;math inline&#34;&gt;\(s_{pooled} = \sqrt{(s_1^2 + s_2^2)/2}\)&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Creating a function with constant m2, pooled sd, alpha and beta.
combined &amp;lt;- function (m1,m2 = 270, s_pooled = 150, alpha = 0.05, beta = 0.2){
  cv &amp;lt;- (s_pooled)/((m1+m2)/2)
  percent.diff &amp;lt;- ((m1-m2)/((m1+m2)/2))
  cohens_d &amp;lt;-(abs(m1-m2)/(s_pooled))
  n &amp;lt;- 2*(((cv/percent.diff)^2)*(qnorm((1-alpha/2)) + qnorm((1-beta)))^2) 
  n &amp;lt;- round(n,0)
  value &amp;lt;- (list(CV = cv, PercentDiff= percent.diff, RequiredReplicates = round(n,0), EffectSize = cohens_d))
  return(value)
  }


m1 &amp;lt;- seq(320,420,10)
m1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] 320 330 340 350 360 370 380 390 400 410 420&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;data &amp;lt;- combined(m1 = m1)
# cal.lm &amp;lt;- lm(data$RequiredReplicates ~ data$EffectSize)
# or even quadratic term
# cal.lm &amp;lt;- lm(data$RequiredReplicates ~ poly(data$EffectSize, 3, raw = TRUE))
plot(data$EffectSize, data$RequiredReplicates)
# abline(cal.lm)
# As per rule of thumb for medium-size effect, we can choose v= 0.5 as medium-size effects
# http://staff.bath.ac.uk/pssiw/stats2/page2/page14/page14.html
# Also, http://staff.bath.ac.uk/pssiw/stats2/page2/page14/page14.html
abline(v = 0.5, col= &amp;#39;red&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/achalneupane.github.io/achal.github.io/post/Arrays_files/figure-html/unnamed-chunk-1-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Note: Cohen suggested that d = 0.2 be considered a ‘small’ effect size, 0.5 represents a ‘medium’ effect size and 0.8 a ‘large’ effect size. This means that if two groups’ means don’t differ by 0.2 standard deviations or more, the difference is trivial, even if it is statistically signficant. This plot tells us that with the increasing effect-size, we need fewer replicates. Since effect-size of |0.5| or (v= 0.5) is intersects with the abline at approximately 78 replicates in the plot, it also tells us that for medium-size effect we need about 78 replicates.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;exercise-2&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Exercise 2&lt;/h1&gt;
&lt;p&gt;Create a table to show the required replicates for a range of combinations of &lt;span class=&#34;math inline&#34;&gt;\(\%Diff\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(CV\)&lt;/span&gt;. Do this in steps as follows:&lt;/p&gt;
&lt;div id=&#34;part-a.-1&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Part a.&lt;/h3&gt;
&lt;p&gt;Define two matrices, one for &lt;code&gt;CV&lt;/code&gt; and one for &lt;code&gt;Diff&lt;/code&gt;. Each will matrix will be 5 rows by 6 columns. Let the rows in CV be the sequence &lt;span class=&#34;math inline&#34;&gt;\(8, 12, ..., 28\)&lt;/span&gt; and let the columns of &lt;code&gt;Diff&lt;/code&gt; be the squence &lt;span class=&#34;math inline&#34;&gt;\(5,10, ... , 25\)&lt;/span&gt;. The matrices should look like:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned} 
 CV &amp;amp; = \left\{
 \begin{array}{cccccc}
     8 &amp;amp; 12 &amp;amp; 16 &amp;amp; 20 &amp;amp; 24 &amp;amp; 28  \\
     8 &amp;amp; 12 &amp;amp; 16 &amp;amp; 20 &amp;amp; 24 &amp;amp; 28  \\
     \vdots &amp;amp; \vdots &amp;amp; \vdots &amp;amp; \vdots &amp;amp; \vdots  &amp;amp; \vdots \\
     8 &amp;amp; 12 &amp;amp; 16 &amp;amp; 20 &amp;amp; 24 &amp;amp; 28  \\
   \end{array}
   \right\} \\
   &amp;amp; \\
 \%Diff &amp;amp; = \left\{
 \begin{array}{ccccc}
     5 &amp;amp; 5 &amp;amp; 5 &amp;amp; 5 &amp;amp; 5  \\
     10 &amp;amp; 10 &amp;amp; 10 &amp;amp; 10 &amp;amp; 10 \\
     \vdots &amp;amp; \vdots &amp;amp; \vdots &amp;amp; \vdots &amp;amp; \vdots \\
     25 &amp;amp; 25 &amp;amp; 25 &amp;amp; 25 &amp;amp; 25 \\
   \end{array}
   \right\}
\end{aligned} 
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Define and print your matrices in the code below.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# create sequence data and then matrix for CV
rep.cv &amp;lt;- rep(seq(8,28,4),5)
rep.cv&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1]  8 12 16 20 24 28  8 12 16 20 24 28  8 12 16 20 24 28  8 12 16 20 24
## [24] 28  8 12 16 20 24 28&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cv &amp;lt;- matrix(rep.cv, nrow = 5, ncol = 6, byrow = TRUE)
cv&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      [,1] [,2] [,3] [,4] [,5] [,6]
## [1,]    8   12   16   20   24   28
## [2,]    8   12   16   20   24   28
## [3,]    8   12   16   20   24   28
## [4,]    8   12   16   20   24   28
## [5,]    8   12   16   20   24   28&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# create sequence data and then matrix for %Diff
rep.Diff &amp;lt;- rep(seq(5,25,5), 6)
rep.Diff&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1]  5 10 15 20 25  5 10 15 20 25  5 10 15 20 25  5 10 15 20 25  5 10 15
## [24] 20 25  5 10 15 20 25&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Diff &amp;lt;- matrix(rep.Diff, nrow = 5, ncol = 6, byrow = FALSE)
Diff&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      [,1] [,2] [,3] [,4] [,5] [,6]
## [1,]    5    5    5    5    5    5
## [2,]   10   10   10   10   10   10
## [3,]   15   15   15   15   15   15
## [4,]   20   20   20   20   20   20
## [5,]   25   25   25   25   25   25&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;part-b.&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Part b.&lt;/h3&gt;
&lt;p&gt;Calculate require replicates for each combination of &lt;code&gt;CV&lt;/code&gt; and &lt;code&gt;Diff&lt;/code&gt;. Use the same values for &lt;span class=&#34;math inline&#34;&gt;\(z_\alpha\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(z_\beta\)&lt;/span&gt; as from Homework 2 and 3. You should be able to reuse coce from previous exercises, and you should not use iteration.&lt;/p&gt;
&lt;p&gt;Print the result below. The result should be a &lt;span class=&#34;math inline&#34;&gt;\(5 \times 6\)&lt;/span&gt; matrix.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Now vectorize the matrices CV and %Diff from above
cv.vector &amp;lt;- as.vector(cv) 
cv.vector&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1]  8  8  8  8  8 12 12 12 12 12 16 16 16 16 16 20 20 20 20 20 24 24 24
## [24] 24 24 28 28 28 28 28&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Diff.vector &amp;lt;- as.vector(Diff)
Diff.vector&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1]  5 10 15 20 25  5 10 15 20 25  5 10 15 20 25  5 10 15 20 25  5 10 15
## [24] 20 25  5 10 15 20 25&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# We can then use the function in exercise 1 by slightly modifying it as:
combined &amp;lt;- function (cv, percent.diff, alpha = 0.05, beta = 0.2){
  cv &amp;lt;- cv
  percent.diff &amp;lt;- percent.diff
  n &amp;lt;- 2*(((cv/percent.diff)^2)*(qnorm((1-alpha/2)) + qnorm((1-beta)))^2) 
  n &amp;lt;- round(n,0)
  value &amp;lt;- list(CV = cv, PercentDiff= percent.diff, RequiredReplicates = round(n,0))
  return(value)
}
value &amp;lt;- combined(cv = cv.vector, percent.diff = Diff.vector)

RequiredReplicates &amp;lt;- matrix(value$RequiredReplicates, nrow = 5, ncol = 6, byrow = FALSE)
RequiredReplicates&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      [,1] [,2] [,3] [,4] [,5] [,6]
## [1,]   40   90  161  251  362  492
## [2,]   10   23   40   63   90  123
## [3,]    4   10   18   28   40   55
## [4,]    3    6   10   16   23   31
## [5,]    2    4    6   10   14   20&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To check your work, repeat the calculations using the rule of thumb from the previous exercises. What is largest deviation of the rule of thumb from the exact calculation?&lt;/p&gt;
&lt;p&gt;For this, first we can simplify the equations as follows:
first for CV,&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(CV = \frac{sd_{pooled}}{(m_1 + m_2)/2}\)&lt;/span&gt;
&lt;span class=&#34;math inline&#34;&gt;\((m_1 + m_2)/2) = \frac{sd_{pooled}}{CV/2}\)&lt;/span&gt;
&lt;span class=&#34;math inline&#34;&gt;\((m_1 + m_2)/2) = {2} \times\frac{sd_{pooled}}{CV}\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;then, for &lt;span class=&#34;math inline&#34;&gt;\(\%diff\)&lt;/span&gt;:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math inline&#34;&gt;\(\%Diff = \frac{m_1 - m_2}{(m_1 + m_2)/2}\)&lt;/span&gt;
&lt;span class=&#34;math inline&#34;&gt;\(\%Diff\times\frac{(m_1 + m_2)}{2} = m_1-m_2\)&lt;/span&gt;
&lt;span class=&#34;math inline&#34;&gt;\(m_1-m_2 = \frac{\%Diff}{2}\times(m_1 + m_2)\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Now, if we replace &lt;span class=&#34;math inline&#34;&gt;\(m_1 + m_2\)&lt;/span&gt;, we get:
&lt;span class=&#34;math inline&#34;&gt;\(m_1-m_2 = \frac{\%Diff}{2}\times ({2} \times\frac{sd_{pooled}}{CV})\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Or, &lt;span class=&#34;math inline&#34;&gt;\(m_1-m_2 = \frac{{\%Diff } \ \times\ {sd_{pooled}}}{CV}\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;This will give us delta (&lt;span class=&#34;math inline&#34;&gt;\(\triangle\)&lt;/span&gt;):
&lt;span class=&#34;math inline&#34;&gt;\(\triangle = \frac{m_1-m_2}{sd_{pooled}} = \frac{1}{sd_{pooled}} \times \frac{{\%Diff } \ \times\ {sd_{pooled}}}{CV} = \frac{\%Diff}{CV}\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Now we can use, rule of thumb as:
&lt;span class=&#34;math inline&#34;&gt;\(n = \frac{16}{\triangle^2}\)&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# As stated in rule of thumb: http://www.nrcse.washington.edu/research/struts/chapter2.pdf
# We can then use the simplified equation
rule.of.thumb.n &amp;lt;- function (cv, percent.diff){
  cv &amp;lt;- cv
  percent.diff &amp;lt;- percent.diff
  delta &amp;lt;- percent.diff/cv
  n &amp;lt;- (16/(delta^2))
  value &amp;lt;- list(CV = cv, PercentDiff= percent.diff, RequiredReplicates = round(n,0))
  return(value)
}

value &amp;lt;- rule.of.thumb.n(cv= cv.vector, percent.diff = Diff.vector)
Rule.of.Thumb.matrix &amp;lt;- matrix(value$RequiredReplicates, nrow = 5, ncol = 6, byrow = FALSE)
colnames(Rule.of.Thumb.matrix) &amp;lt;- paste0(&amp;quot;CV&amp;quot;,unique(value$CV))
rownames(Rule.of.Thumb.matrix) &amp;lt;- paste0(&amp;quot;Diff&amp;quot;,unique(value$PercentDiff))
# This matrix gives you the combination of all pairs of CV and %Diff for rule of thumb
Rule.of.Thumb.matrix&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        CV8 CV12 CV16 CV20 CV24 CV28
## Diff5   41   92  164  256  369  502
## Diff10  10   23   41   64   92  125
## Diff15   5   10   18   28   41   56
## Diff20   3    6   10   16   23   31
## Diff25   2    4    7   10   15   20&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# We can then compare the matrix from exact calculation and required replicates
# calculated using rule of thumb method by calculating the percent difference of
# two data matrices
percent_difference_between_two_df &amp;lt;- data.frame((abs(RequiredReplicates-Rule.of.Thumb.matrix)/(abs(RequiredReplicates+Rule.of.Thumb.matrix)/2))*100)
percent_difference_between_two_df&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##              CV8     CV12      CV16     CV20     CV24     CV28
## Diff5   2.469136 2.197802  1.846154 1.972387 1.915185 2.012072
## Diff10  0.000000 0.000000  2.469136 1.574803 2.197802 1.612903
## Diff15 22.222222 0.000000  0.000000 0.000000 2.469136 1.801802
## Diff20  0.000000 0.000000  0.000000 0.000000 0.000000 0.000000
## Diff25  0.000000 0.000000 15.384615 0.000000 6.896552 0.000000&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Therefore, %Diff of 15 and CV of 8 has the highest deviation of 22.22% between calculated vs rule of thumb method for required replicates.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;exercise-3&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Exercise 3&lt;/h1&gt;
&lt;p&gt;In this exercise, we’ll use your &lt;code&gt;norm.pdf&lt;/code&gt; function to illustrate how the formula for required replicates finds a compromise between Type I and Type II error rates. This is also a way to test your normal probability function over a range of arguments.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Do not print the vectors you create for this exercise in the final typeset submission&lt;/strong&gt; We will check the results by examining the plots, and printing the vectors themselves will unnecessarily clutter your report. If you get stuck, use the built normal functions to create your plots.&lt;/p&gt;
&lt;div id=&#34;part-a.-2&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Part a.&lt;/h3&gt;
&lt;p&gt;Generate a squence of values from &lt;span class=&#34;math inline&#34;&gt;\(-3,...,4\)&lt;/span&gt; incremented by &lt;span class=&#34;math inline&#34;&gt;\(0.1\)&lt;/span&gt;; let this be &lt;code&gt;x&lt;/code&gt;.
Calculate the probability of each value of &lt;code&gt;x&lt;/code&gt; using the &lt;code&gt;norm.pdf&lt;/code&gt; function from Homework 3, letting &lt;code&gt;mu = 0&lt;/code&gt; and &lt;code&gt;sd = 1&lt;/code&gt;. Name the result &lt;code&gt;p.null&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Calculate the effect size for 1936 versus 2006, calories per serving, as in Homework 2 and 3. Repeat the calculation for the probability of &lt;code&gt;x&lt;/code&gt;, but this time use &lt;code&gt;mean=&lt;/code&gt; effect size. Name this result &lt;code&gt;p.alt&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The results will be the distribution of the expected value of the difference between means; the first is the expectation under the null hypothesis (the true effect size is 0) while the second is the expectation assuming the measured &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt; is the true &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Function to calcuate the values for log liklihood.
# First, we define the values for sigma as variance, 
# mu as mean of a normal population to be used for a liklihood of a x observation.
norm.pdf &amp;lt;- function(x,mu = 0,sigma = 1){
  l&amp;lt;-1/(sigma*sqrt(pi*2))*exp(-((x-mu)^2)/(2*sigma^2))
  return(l)
}

x &amp;lt;- seq(-3, 4, 0.1)
p.null &amp;lt;- norm.pdf(x)

#calculating effect size to be used as &amp;#39;mean= &amp;#39; for the analysis below
combined &amp;lt;- function (m1,m2,s1,s2, alpha = 0.05, beta = 0.2){
  cohens_d &amp;lt;-(abs(m1-m2)/sqrt((s1^2+s2^2)/2))
  value &amp;lt;- (list(EffectSize = cohens_d))
}

#calculate the effect size for 1936 vs 2006, calories per serving
m1 = 268.1
m2 = 384.4
s1 = 124.8
s2 = 168.3
value &amp;lt;- combined(m1 = m1, m2 = m2, s1 = s1, s2 = s2)
value$EffectSize&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.7849876&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# now repeating the calculation 
mean = value$EffectSize
mean&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.7849876&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p.alt &amp;lt;- norm.pdf(x, mu = mean)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;part-b.-1&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Part b.&lt;/h3&gt;
&lt;p&gt;Repeat the calculations of &lt;code&gt;p.null&lt;/code&gt; and &lt;code&gt;p.alt&lt;/code&gt;, but this time let &lt;code&gt;sigma =&lt;/code&gt; &lt;span class=&#34;math inline&#34;&gt;\(\sqrt{2/n}\)&lt;/span&gt; where &lt;span class=&#34;math inline&#34;&gt;\(n = 10\)&lt;/span&gt;. Name these &lt;code&gt;p.null.10&lt;/code&gt; and &lt;code&gt;p.alt.10&lt;/code&gt;. These calculations narrow the distribbutions by an amount proportional to standard error.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;n &amp;lt;- 10
norm.pdf &amp;lt;- function(x, n, mu = 0){
  sigma = (sqrt(2/n))
  l&amp;lt;-1/(sigma*sqrt(pi*2))*exp(-((x-mu)^2)/(2*sigma^2))
  return(l)
}

x &amp;lt;- seq(-3, 4, 0.1)
p.null.10 &amp;lt;- norm.pdf(x = x, n = n)

mean = value$EffectSize
mean&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.7849876&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p.alt.10 &amp;lt;- norm.pdf(x = x, n = n, mu = mean)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;part-c.&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Part c.&lt;/h3&gt;
&lt;p&gt;Repeat the calculations of &lt;code&gt;p.null&lt;/code&gt; and &lt;code&gt;p.alt&lt;/code&gt;, but this time let &lt;code&gt;sigma =&lt;/code&gt; &lt;span class=&#34;math inline&#34;&gt;\(\sqrt{2/n}\)&lt;/span&gt; where &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; is the minimun mumber of replicates for calories per recipe, 1936 versus 2006, as calculated previously. Call these &lt;code&gt;p.null.req&lt;/code&gt; and &lt;code&gt;p.alt.req&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Re-using the function to calculate minimum required replicates
required.replicates &amp;lt;- function (m1,m2, s1,s2, alpha = 0.05, beta = 0.2){
  n &amp;lt;- 2* ((((sqrt((s1^2 + s2^2)/2))/(m1-m2))^2) * (qnorm((1-alpha/2)) + qnorm((1-beta)))^2) 
  return(round(n,0))
}

m1 = 268.1
m2 = 384.4
s1 = 124.8
s2 = 168.3

n &amp;lt;- required.replicates(m1 = m1, m2 = m2, s1 = s1, s2 = s2)
n.min.replicates &amp;lt;- n
n.min.replicates&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 25&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;norm.pdf &amp;lt;- function(x, n, mu = 0){
  sigma = (sqrt(2/n))
  l&amp;lt;-1/(sigma*sqrt(pi*2))*exp(-((x-mu)^2)/(2*sigma^2))
  return(l)
}

x &amp;lt;- seq(-3, 4, 0.1)
p.null.req &amp;lt;- norm.pdf(x = x, n = n)


mean = value$EffectSize
mean&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.7849876&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p.alt.req &amp;lt;- norm.pdf(x = x, n = n, mu = mean)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;part-d.&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Part d.&lt;/h3&gt;
&lt;p&gt;Plot &lt;code&gt;p.null&lt;/code&gt; versus &lt;code&gt;x&lt;/code&gt; as a black line and in the same plot add &lt;code&gt;p.alt&lt;/code&gt; vs &lt;code&gt;x&lt;/code&gt; as a red line. Add a green vertical line at &lt;span class=&#34;math inline&#34;&gt;\(z_\alpha\)&lt;/span&gt; and a blue vertical line at &lt;span class=&#34;math inline&#34;&gt;\(z_\beta\)&lt;/span&gt;, using values as in previous exercises. The green line represents the critical value for Type I error, and the error under the black curve to the left of the green line is the probability of that error (97.5%). The area under the red curve, to the left of the green line, represents the achieved Type II error rate, the blue line represents the desired Type II rate.&lt;/p&gt;
&lt;p&gt;Repeat the plot with &lt;code&gt;p.null.10&lt;/code&gt; and &lt;code&gt;p.alt.10&lt;/code&gt;, but this time add vertical lines at &lt;span class=&#34;math inline&#34;&gt;\(z_\alpha \times \sqrt{2/10}\)&lt;/span&gt; and at &lt;span class=&#34;math inline&#34;&gt;\(z_\beta \times \sqrt{2/10}\)&lt;/span&gt;. The lines representing critical values for Type I and Type II error should move closer as the distributions narrow.&lt;/p&gt;
&lt;p&gt;Repeat the plot with &lt;code&gt;p.null.req&lt;/code&gt; and &lt;code&gt;p.alt.req&lt;/code&gt;, but this time add vertical lines at &lt;span class=&#34;math inline&#34;&gt;\(z_\alpha \times \sqrt{2/n}\)&lt;/span&gt; and at &lt;span class=&#34;math inline&#34;&gt;\(z_\beta \times \sqrt{2/n}\)&lt;/span&gt;, where &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; is the minimum replicates. Do the lines for Type I and Type II error overlap?&lt;/p&gt;
&lt;p&gt;It will improve the readability of the three plots if you plot all three in the chunk below. The arguments inside the braces specify the dimensions of the plot, while &lt;code&gt;par(mfrow = c(3,1))&lt;/code&gt; combines three plots into one graph.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;par(mfrow = c(3,1))
# using base plot function part A
alpha = 0.05; beta = 0.2
Zalpha &amp;lt;- qnorm(1-alpha/2)
Zbeta &amp;lt;- qnorm(1-beta)
plot(x,p.null,type=&amp;quot;l&amp;quot;,col=&amp;quot;black&amp;quot;)
lines(x,p.alt,col=&amp;quot;red&amp;quot;)
abline(v = Zalpha, col= &amp;#39;green&amp;#39;)
abline(v = value$EffectSize-Zbeta, col= &amp;#39;blue&amp;#39;)

### using ggplot
# plot1 &amp;lt;- ggplot()+
#   geom_line(aes(x = x, y = p.null), color = &amp;quot;black&amp;quot; ) +
#   geom_line(aes(x = x, y =  p.alt), color = &amp;quot;red&amp;quot;) +
#   geom_vline(xintercept = Zalpha, color = &amp;quot;green&amp;quot;)+
#   geom_vline(xintercept = value$EffectSize - Zbeta, color = &amp;quot;blue&amp;quot;)
# plot1

# using base plot function Part B
alpha = 0.05; beta = 0.2; n &amp;lt;- 10
Zalpha &amp;lt;- qnorm(1-alpha/2)
Zalpha &amp;lt;- Zalpha * sqrt(2/n)
Zbeta &amp;lt;- qnorm(1-beta)
Zbeta &amp;lt;- Zbeta * sqrt(2/n)
plot(x,p.null.10,type=&amp;quot;l&amp;quot;,col=&amp;quot;black&amp;quot;)
lines(x,p.alt.10,col=&amp;quot;red&amp;quot;)
abline(v = Zalpha, col= &amp;#39;green&amp;#39;)
abline(v = (value$EffectSize-Zbeta), col= &amp;#39;blue&amp;#39;)

## Using ggplot
# plot2 &amp;lt;- ggplot()+
#   geom_line(aes(x = x, y = p.null.10), color = &amp;quot;black&amp;quot; ) +
#   geom_line(aes(x = x, y =  p.alt.10), color = &amp;quot;red&amp;quot;) +
#   geom_vline(xintercept = Zalpha, color = &amp;quot;green&amp;quot;) +
#   geom_vline(xintercept = value$EffectSize - Zbeta, color = &amp;quot;blue&amp;quot;)
# plot2

# using base plot function Part C
alpha = 0.05; beta = 0.2; n &amp;lt;- n.min.replicates
Zalpha &amp;lt;- qnorm(1-alpha/2)
Zalpha &amp;lt;- Zalpha * sqrt(2/n)
Zbeta &amp;lt;- qnorm(1-beta)
Zbeta &amp;lt;- Zbeta * sqrt(2/n)
plot(x,p.null.req,type=&amp;quot;l&amp;quot;,col=&amp;quot;black&amp;quot;)
lines(x,p.alt.req,col=&amp;quot;red&amp;quot;)
abline(v = Zalpha, col= &amp;#39;green&amp;#39;)
abline(v = value$EffectSize-Zbeta, col= &amp;#39;blue&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/achalneupane.github.io/achal.github.io/post/Arrays_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;576&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## Using ggplot
# plot3 &amp;lt;- ggplot()+
#   geom_line(aes(x = x, y = p.null.req), color = &amp;quot;black&amp;quot; ) +
#   geom_line(aes(x = x, y =  p.alt.req), color = &amp;quot;red&amp;quot;) +
#   geom_vline(xintercept = Zalpha, color = &amp;quot;green&amp;quot;) +
#   geom_vline(xintercept = value$EffectSize - Zbeta, color = &amp;quot;blue&amp;quot;)
# plot3

# # Then merge all ggplots:
# library(grid)
# library(gridExtra)
# grid.newpage()
# grid.draw(arrangeGrob(plot1, plot2, plot3, heights = c(1/3, 1/3, 1/3)) )&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, The lines representing critical values for Type I and Type II error move closer as the distributions narrow. Yes, the lines for Type I and Type II error overlap.&lt;/p&gt;
&lt;p&gt;Note: z_beta should be plotted relative to the alternative hypothesis value (in this case, d), since z_beta is the critical value to control for Type II error, where we would (fail to reject)* the null hypothesis and miss a true effect. Thus, the line for z_beta needs to be plotted relative to d, and it needs to be offset to the left, so you should be plotting a line at d-z_beta, etc. The alternative hypothesis is that the effect size we measured, d, is the true effect size.
Perhaps another way to phrase this is, the right-hand distribution illustrates values of the true effect size d that are consistent with a measured effect size. There’s a big debate in statistics on the use of null hypothesis tests. Perhaps a better visualization would be to demonstrate how narrowing the distributions (2, 10, n) changes likelihood ratio or Bayes factor.&lt;/p&gt;
&lt;p&gt;If you choose to solve this with SAS, I’ve included code in the SAS template to create the graphs, since combining plots in IML is not as easy as in R.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;exercise-4&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Exercise 4&lt;/h1&gt;
&lt;p&gt;In this, we compare the normal and Poisson distributions, using the functions you’ve written previously. This is also a way to test your normal and Poisson functions over a range of arguments.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Do not print the vectors you create for this exercise in the final typeset submission&lt;/strong&gt; We will check the results by examining the plots, and printing the vectors themselves will unnecessarily clutter your report. If you get stuck, use the built functions to create your plots. However, the final submission must call your functions.&lt;/p&gt;
&lt;div id=&#34;part-a&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Part a&lt;/h3&gt;
&lt;p&gt;Create a sequence of &lt;span class=&#34;math inline&#34;&gt;\(x_a\)&lt;/span&gt; from &lt;span class=&#34;math inline&#34;&gt;\(( -5 ... 5 )\)&lt;/span&gt;, incremented by 0.1. Calculate the normal likelihood for each &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;, assuming &lt;span class=&#34;math inline&#34;&gt;\(\mu = 0\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(\sigma = 1\)&lt;/span&gt;. Also calculate Poisson probability of each &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; given a &lt;code&gt;lambda = 1&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;NOTE: The Poisson parameter Lambda (λ) is the total number of events (k) divided by the number of units (n) in the data (λ = k/n)&lt;/p&gt;
&lt;p&gt;Plot both sets of probablities against &lt;code&gt;x&lt;/code&gt; as lines, using a different color for each curve. Make sure that both curves fit in the plot; you may need to determine minimum and maximum values and set these as graphic parameters (see &lt;code&gt;ylim&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;Warning: if you do this in SAS, you may have to adjust the lower bound of &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Suppressing warnings that may be generated by Poisson function for negative values
# options(warn=-1)

x_a &amp;lt;- seq(-5, 5, 0.1)
x_a&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   [1] -5.0 -4.9 -4.8 -4.7 -4.6 -4.5 -4.4 -4.3 -4.2 -4.1 -4.0 -3.9 -3.8 -3.7
##  [15] -3.6 -3.5 -3.4 -3.3 -3.2 -3.1 -3.0 -2.9 -2.8 -2.7 -2.6 -2.5 -2.4 -2.3
##  [29] -2.2 -2.1 -2.0 -1.9 -1.8 -1.7 -1.6 -1.5 -1.4 -1.3 -1.2 -1.1 -1.0 -0.9
##  [43] -0.8 -0.7 -0.6 -0.5 -0.4 -0.3 -0.2 -0.1  0.0  0.1  0.2  0.3  0.4  0.5
##  [57]  0.6  0.7  0.8  0.9  1.0  1.1  1.2  1.3  1.4  1.5  1.6  1.7  1.8  1.9
##  [71]  2.0  2.1  2.2  2.3  2.4  2.5  2.6  2.7  2.8  2.9  3.0  3.1  3.2  3.3
##  [85]  3.4  3.5  3.6  3.7  3.8  3.9  4.0  4.1  4.2  4.3  4.4  4.5  4.6  4.7
##  [99]  4.8  4.9  5.0&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;norm.pdf &amp;lt;- function(x,mu=0,sigma=1){
  l&amp;lt;-1/(sigma*sqrt(pi*2))*exp(-((x-mu)^2)/(2*sigma^2))
  return(l)
}
normal.liklihood.x_a &amp;lt;- norm.pdf(x_a)


# The function to calculate probability mass function for poisson 
# data with a mean and variance lambda = 1. 
pois.pmf &amp;lt;- function(x, lambda){
  poisson.d &amp;lt;- exp(-lambda)*(1/(factorial(round(x,0))))*exp(round(x,0)*(log(lambda)))
  return(poisson.d)
}
lambda &amp;lt;- 1
poisson.probability.x_a &amp;lt;- pois.pmf(x=x_a, lambda = lambda)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in gamma(x + 1): NaNs produced&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(x_a,normal.liklihood.x_a,type=&amp;quot;l&amp;quot;,col=&amp;quot;black&amp;quot;)
lines(x_a,poisson.probability.x_a,col=&amp;quot;red&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/achalneupane.github.io/achal.github.io/post/Arrays_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Does this graph tell you if your Normal PDF function behaves properly? Does your Poisson handle negative or non-integer values as expected?&lt;/p&gt;
&lt;p&gt;No, based on this plot, the normal pdf does behave properly, but not the poisson as there NAs inserted for negative and non-integer values.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;part-b&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Part b&lt;/h3&gt;
&lt;p&gt;Create a sequence of &lt;span class=&#34;math inline&#34;&gt;\(x_b = \left \lfloor{\mu - 5 \times \sigma } \right \rfloor , \dots, \left \lceil{\mu+ 5 \times \sigma } \right \rceil\)&lt;/span&gt; using mean and standard deviation for servings per recipe from 1936.&lt;/p&gt;
&lt;p&gt;Calculate the normal and Poission probability for each &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; as in part a, again using mean and standard deviation from servings per recipe, 1936. The length of this vector should be the same length as the &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; vector as in part a (&lt;span class=&#34;math inline&#34;&gt;\(\pm 1\)&lt;/span&gt;), so you will need to calculate an interval based on the range &lt;code&gt;x_b&lt;/code&gt; and the number of elements in &lt;code&gt;x_a&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Show the the length of both &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; vectors are similar by calling &lt;code&gt;length&lt;/code&gt; for each.&lt;/p&gt;
&lt;p&gt;Repeat the plot from part a with this sequence.&lt;/p&gt;
&lt;p&gt;If you choose to solve this with SAS, I’ve included code in the SAS template to create the graphs, since combining plots in IML is not as easy as in R.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Using mean and standard deviation for servings per recipe from 1936:
mu = 12.9; sigma = 13.3

# Now we find the upper and lower bounds as:
x.lower &amp;lt;- floor(mu-5*sigma)
x.upper &amp;lt;- ceiling(mu+5*sigma)

# Now taking the length of x_a as a reference, we create the equeally spaced
# sequence from lower to upper bound as followed:
spacer &amp;lt;- (x.upper - x.lower)/(length(x_a) - 1)

x_b &amp;lt;- seq(x.lower, x.upper, spacer)
# To show both x_a and x_b &amp;#39;s lenghts are equal:
length(x_a)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 101&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;length(x_b)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 101&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;norm.pdf &amp;lt;- function(x, mu = 12.9, sigma = 13.3){
  l&amp;lt;-1/(sigma*sqrt(pi*2))*exp(-((x-mu)^2)/(2*sigma^2))
  return(l)
}
normal.liklihood.x_b &amp;lt;- norm.pdf(x_b)


# The function to calculate probability mass function for poisson 
# data with a mean and variance lambda = 12. 
pois.pmf &amp;lt;- function(x, lambda){
  poisson.d &amp;lt;- exp(-lambda)*(1/(factorial(round(x,0))))*exp(round(x,0)*(log(lambda)))
  return(poisson.d)
}

#using sigma = 13.3 to compare the difference with the first plot
poisson.probability.x_b &amp;lt;- pois.pmf(x=x_b, lambda = 12)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in gamma(x + 1): NaNs produced&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# plot
plot(x_b,normal.liklihood.x_b,type=&amp;quot;l&amp;quot;,col=&amp;quot;black&amp;quot;)
lines(x_b,poisson.probability.x_b,col=&amp;quot;red&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/achalneupane.github.io/achal.github.io/post/Arrays_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;To check you work, duplicate the plots by calling built in normal and Poisson functions. Does the system Poisson function handle negative &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; differently than your function?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Using base functions for part a  
base.normal.liklihood.x_a &amp;lt;- dnorm(x_a,0, 1)
base.poiss.x_a &amp;lt;- dpois(x=x_a, lambda = lambda)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = -4.900000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = -4.800000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = -4.700000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = -4.600000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = -4.500000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = -4.400000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = -4.300000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = -4.200000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = -4.100000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = -3.900000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = -3.800000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = -3.700000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = -3.600000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = -3.500000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = -3.400000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = -3.300000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = -3.200000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = -3.100000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = -2.900000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = -2.800000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = -2.700000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = -2.600000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = -2.500000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = -2.400000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = -2.300000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = -2.200000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = -2.100000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = -1.900000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = -1.800000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = -1.700000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = -1.600000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = -1.500000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = -1.400000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = -1.300000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = -1.200000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = -1.100000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = -0.900000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = -0.800000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = -0.700000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = -0.600000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = -0.500000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = -0.400000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = -0.300000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = -0.200000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = -0.100000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = 0.100000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = 0.200000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = 0.300000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = 0.400000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = 0.500000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = 0.600000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = 0.700000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = 0.800000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = 0.900000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = 1.100000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = 1.200000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = 1.300000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = 1.400000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = 1.500000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = 1.600000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = 1.700000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = 1.800000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = 1.900000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = 2.100000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = 2.200000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = 2.300000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = 2.400000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = 2.500000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = 2.600000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = 2.700000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = 2.800000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = 2.900000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = 3.100000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = 3.200000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = 3.300000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = 3.400000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = 3.500000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = 3.600000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = 3.700000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = 3.800000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = 3.900000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = 4.100000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = 4.200000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = 4.300000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = 4.400000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = 4.500000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = 4.600000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = 4.700000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = 4.800000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_a, lambda = lambda): non-integer x = 4.900000&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(x_a,base.normal.liklihood.x_a,type=&amp;quot;l&amp;quot;,col=&amp;quot;black&amp;quot;)
lines(x_a,base.poiss.x_a,col=&amp;quot;red&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/achalneupane.github.io/achal.github.io/post/Arrays_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Using base functions for part b
base.normal.liklihood.x_b &amp;lt;- dnorm(x_b,0, 1)
base.poiss.x_b &amp;lt;- dpois(x=x_b, lambda = 12)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = -52.660000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = -51.320000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = -49.980000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = -48.640000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = -47.300000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = -45.960000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = -44.620000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = -43.280000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = -41.940000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = -40.600000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = -39.260000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = -37.920000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = -36.580000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = -35.240000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = -33.900000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = -32.560000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = -31.220000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = -29.880000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = -28.540000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = -27.200000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = -25.860000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = -24.520000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = -23.180000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = -21.840000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = -20.500000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = -19.160000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = -17.820000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = -16.480000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = -15.140000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = -13.800000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = -12.460000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = -11.120000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = -9.780000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = -8.440000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = -7.100000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = -5.760000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = -4.420000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = -3.080000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = -1.740000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = -0.400000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = 0.940000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = 2.280000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = 3.620000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = 4.960000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = 6.300000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = 7.640000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = 8.980000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = 10.320000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = 11.660000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = 14.340000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = 15.680000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = 17.020000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = 18.360000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = 19.700000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = 21.040000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = 22.380000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = 23.720000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = 25.060000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = 26.400000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = 27.740000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = 29.080000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = 30.420000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = 31.760000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = 33.100000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = 34.440000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = 35.780000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = 37.120000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = 38.460000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = 39.800000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = 41.140000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = 42.480000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = 43.820000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = 45.160000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = 46.500000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = 47.840000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = 49.180000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = 50.520000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = 51.860000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = 53.200000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = 54.540000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = 55.880000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = 57.220000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = 58.560000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = 59.900000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = 61.240000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = 62.580000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = 63.920000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = 65.260000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = 66.600000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = 67.940000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = 69.280000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = 70.620000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = 71.960000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = 73.300000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = 74.640000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = 75.980000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = 77.320000&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in dpois(x = x_b, lambda = 12): non-integer x = 78.660000&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(x_b,base.normal.liklihood.x_b,type=&amp;quot;l&amp;quot;,col=&amp;quot;black&amp;quot;)
lines(x_b,base.poiss.x_b,col=&amp;quot;red&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/achalneupane.github.io/achal.github.io/post/Arrays_files/figure-html/unnamed-chunk-11-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Yes, the system Poisson function handles negative values and non-integers differently (inserts zero’s) whereas the function we wrote inserts NAs for negative and non-integer values.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;exercise-5&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Exercise 5&lt;/h1&gt;
&lt;p&gt;Consider the table:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Rate&lt;/th&gt;
&lt;th&gt;23000&lt;/th&gt;
&lt;th&gt;24000&lt;/th&gt;
&lt;th&gt;25000&lt;/th&gt;
&lt;th&gt;26000&lt;/th&gt;
&lt;th&gt;27000&lt;/th&gt;
&lt;th&gt;28000&lt;/th&gt;
&lt;th&gt;29000&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;Yield&lt;/td&gt;
&lt;td&gt;111.4216&lt;/td&gt;
&lt;td&gt;155.0326&lt;/td&gt;
&lt;td&gt;181.1176&lt;/td&gt;
&lt;td&gt;227.5800&lt;/td&gt;
&lt;td&gt;233.4623&lt;/td&gt;
&lt;td&gt;242.1753&lt;/td&gt;
&lt;td&gt;231.3890&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Suppose we wish to determine the linear relationship between per Rate and Yield. We can determine this by solving a system of linear equations, of the form&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
111.4216 &amp;amp; = \beta_1 + \beta_2 \times 23000 \\
155.0326 &amp;amp; = \beta_1 + \beta_2 \times 24000  \\
\vdots &amp;amp; = \vdots \\
231.3890 &amp;amp; = \beta_1 + \beta_2 \times 29000 \\
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;We write this in matrix notation as&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\left(\begin{array}{c}
111.4216 \\
155.0326 \\
\vdots \\
231.3890 
 \end{array}\right) 
 =
 \left(\begin{array}{rr}
 1 &amp;amp; 23000 \\
 1 &amp;amp; 24000  \\
\vdots &amp;amp; \vdots \\
 1 &amp;amp; 29000
 \end{array}\right) 
 \left(\begin{array}{c}
 \beta_1 \\
 \beta_2
 \end{array}\right)^t
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;We might write this as&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\mathbf{y} = \mathbf{X} \mathbf{\beta}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;and find a solution by computing &lt;span class=&#34;math inline&#34;&gt;\(\mathbf{\hat{\beta}} = \mathbf{X}^{- 1}\mathbf{y}\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;However, an exact solution for the inverse, &lt;span class=&#34;math inline&#34;&gt;\(\mathbf{X}^{- 1}\)&lt;/span&gt; require square matrices, so commonly we use the &lt;em&gt;normal&lt;/em&gt; equations,&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[ \mathbf{X}^{t}  \mathbf{y} = \mathbf{X}^{t} \mathbf{X}  \mathbf{\beta} \]&lt;/span&gt;
(where &lt;span class=&#34;math inline&#34;&gt;\(\mathbf{X}^{t}\)&lt;/span&gt; is the transpose of &lt;span class=&#34;math inline&#34;&gt;\(\mathbf{X}\)&lt;/span&gt;). We then find &lt;span class=&#34;math inline&#34;&gt;\(\hat{\mathbf{\beta}} = \mathbf{X}^{t} \mathbf{X} ^{-1} \mathbf{X}^{t} \mathbf{y}\)&lt;/span&gt;&lt;/p&gt;
&lt;div id=&#34;answer&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Answer&lt;/h3&gt;
&lt;p&gt;Define appropriate &lt;code&gt;X&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; matrices (&lt;code&gt;y&lt;/code&gt; can be a vector in R) in the chunk below.&lt;/p&gt;
&lt;p&gt;Multiply the transpose of &lt;code&gt;X&lt;/code&gt; by &lt;code&gt;X&lt;/code&gt;, then use &lt;code&gt;solve&lt;/code&gt; (R) or &lt;code&gt;inv&lt;/code&gt; (IML) to find the inverse. Multiply this by the product of transpose &lt;code&gt;X&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; to find &lt;code&gt;hat.beta&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Print your &lt;code&gt;hat.beta&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;y &amp;lt;- matrix( c(111.4216, 155.0326, 181.1176, 227.5800, 233.4623, 242.1753, 231.3890), byrow = FALSE)
y&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##          [,1]
## [1,] 111.4216
## [2,] 155.0326
## [3,] 181.1176
## [4,] 227.5800
## [5,] 233.4623
## [6,] 242.1753
## [7,] 231.3890&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#creating a matrix for bias term
bias=rep(1:1, length.out=length(y))
bias&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1 1 1 1 1 1 1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cx &amp;lt;- c(23000, 24000, 25000, 26000 , 27000, 28000, 29000)
X=matrix(c(bias,cx), ncol = 2)
X&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      [,1]  [,2]
## [1,]    1 23000
## [2,]    1 24000
## [3,]    1 25000
## [4,]    1 26000
## [5,]    1 27000
## [6,]    1 28000
## [7,]    1 29000&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#multplication of transpose of x and x
tX=t(X)
tX&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]
## [1,]     1     1     1     1     1     1     1
## [2,] 23000 24000 25000 26000 27000 28000 29000&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Xm=tX%*%X
Xm&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        [,1]     [,2]
## [1,]      7 1.82e+05
## [2,] 182000 4.76e+09&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;A=solve(Xm)

hat.beta=A%*%(tX%*%y)
hat.beta&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##               [,1]
## [1,] -347.18307857
## [2,]    0.02094758&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To check your work, calculate the values predicted by your statistical model. Compute &lt;code&gt;hat.y&lt;/code&gt; by multiplying &lt;code&gt;X&lt;/code&gt; and &lt;code&gt;hat.beta&lt;/code&gt;,
&lt;span class=&#34;math display&#34;&gt;\[\hat{y} = \mathbf{X}  \hat{\beta}\]&lt;/span&gt;
Plot &lt;code&gt;y&lt;/code&gt; vs the independent variable (the second column of &lt;code&gt;X&lt;/code&gt;) as points, and &lt;code&gt;hat.y&lt;/code&gt; vs independent variable as a line, preferably a different colors. The &lt;code&gt;hat.y&lt;/code&gt; values should fall a straight line that interpolates &lt;code&gt;y&lt;/code&gt; values.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# compute hat.y 
hat.y &amp;lt;- X %*% hat.beta
# plot
plot(X[,2], y, type = &amp;#39;l&amp;#39;, col = &amp;quot;black&amp;quot;)
lines(X[,2], hat.y, col = &amp;quot;blue&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/achalneupane.github.io/achal.github.io/post/Arrays_files/figure-html/unnamed-chunk-13-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;You can also compare your result to the R function (set &lt;code&gt;eval = TRUE&lt;/code&gt;).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(lm(y~X))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## Call:
## lm(formula = y ~ X)
## 
## Residuals:
##        1        2        3        4        5        6        7 
## -23.1897  -0.5263   4.6111  30.1259  15.0607   2.8261 -28.9078 
## 
## Coefficients: (1 not defined because of singularities)
##               Estimate Std. Error t value Pr(&amp;gt;|t|)   
## (Intercept) -3.472e+02  1.110e+02  -3.127   0.0260 * 
## X1                  NA         NA      NA       NA   
## X2           2.095e-02  4.257e-03   4.920   0.0044 **
## ---
## Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1
## 
## Residual standard error: 22.53 on 5 degrees of freedom
## Multiple R-squared:  0.8288, Adjusted R-squared:  0.7946 
## F-statistic: 24.21 on 1 and 5 DF,  p-value: 0.004396&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Based on my calculation the beta estimates are similar to the beta estimates from the liner model&lt;/p&gt;
&lt;div id=&#34;alternative-methods&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Alternative methods&lt;/h4&gt;
&lt;p&gt;You can also compute &lt;span class=&#34;math inline&#34;&gt;\(\hat{\beta}\)&lt;/span&gt; by passing both &lt;span class=&#34;math inline&#34;&gt;\(\mathbf{X}^{t} \mathbf{X} ^{-1}\)&lt;/span&gt; and
&lt;span class=&#34;math inline&#34;&gt;\(\mathbf{X}^{t} \mathbf{y}\)&lt;/span&gt; as arguments to &lt;code&gt;solve&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Alternatively, you can install the &lt;code&gt;MASS&lt;/code&gt; library and use &lt;code&gt;ginv&lt;/code&gt; to compute a generalized inverse &lt;span class=&#34;math inline&#34;&gt;\(\mathbf{X}^{- 1}\)&lt;/span&gt;. Use this to compute &lt;span class=&#34;math inline&#34;&gt;\(\mathbf{\hat{\beta}} = \mathbf{X}^-\mathbf{y}\)&lt;/span&gt; in the chunk below:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(MASS)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;exercise-6&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Exercise 6&lt;/h1&gt;
&lt;p&gt;Given a vector of mean estimates &lt;span class=&#34;math inline&#34;&gt;\(x = x_1, x_2, \dots, x_k\)&lt;/span&gt;, a vector of standard deviations &lt;span class=&#34;math inline&#34;&gt;\(s = s_1, s_2, \dots, s_k\)&lt;/span&gt; and a vector of sample sizes &lt;span class=&#34;math inline&#34;&gt;\(n = n_1, n_2, \dots, n_k\)&lt;/span&gt;, we can calculate a one-way analysis of variance by&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
MSB = \frac{n_1(x_1-\bar{x})^2 + n_2(x_2-\bar{x})^2 + \dots + n_k(x_k-\bar{x})^2} {k-1} = \frac{\sum_i n_i(x_i-\bar{x})^2}{k-1}
\]&lt;/span&gt;
and&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
MSW = \frac{(n_1-1)s_1^2 + (n_2-1)s_2^2 + \dots (n_k-1)s_k^2 }{N-k} = \frac{\sum_i (n_i-1)s_i^2}{N-k}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;where &lt;span class=&#34;math inline&#34;&gt;\(\bar{x}\)&lt;/span&gt; is the mean of &lt;span class=&#34;math inline&#34;&gt;\(x_i\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(N = \sum_i n_i\)&lt;/span&gt;. The test statistic is &lt;span class=&#34;math inline&#34;&gt;\(F = \frac{MSB}{MSW}\)&lt;/span&gt; which is distributed as &lt;span class=&#34;math inline&#34;&gt;\(F_{\alpha,k-1,N-k}\)&lt;/span&gt;&lt;/p&gt;
&lt;div id=&#34;part-a-1&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Part a&lt;/h3&gt;
&lt;p&gt;Calculate MSW and MSB for Calories per Serving from Wansink Table 1. You can use the variables &lt;code&gt;CaloriesPerServingMean&lt;/code&gt; and &lt;code&gt;CaloriesPerServingSD&lt;/code&gt; defined below. Let &lt;span class=&#34;math inline&#34;&gt;\(n_1 = n_2 ... = n_k = 18\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Use array functions and arithmetic for your calculations, you should not need iteration (for loops). Do not hard code values for &lt;span class=&#34;math inline&#34;&gt;\(N\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt;, calculate these from the &lt;code&gt;CaloriesPerServingMean&lt;/code&gt; or &lt;code&gt;CaloriesPerServingSD&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Print both MSB and MSW.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;CaloriesPerServingMean &amp;lt;- c(268.1, 271.1, 280.9, 294.7, 285.6, 288.6, 384.4)
CaloriesPerServingSD &amp;lt;- c(124.8, 124.2, 116.2, 117.7, 118.3, 122.0, 168.3)
#mean for servingperrecipe
mean = mean(CaloriesPerServingMean)
mean&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 296.2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;k &amp;lt;- length(CaloriesPerServingMean)
k&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 7&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# We have 18 samples in each year group; so our N is:
n &amp;lt;- rep(18, k)
N &amp;lt;- sum(n)
#calculating MSB 
mean.CaloriesPerServingMean &amp;lt;- mean(CaloriesPerServingMean)
MSB = (sum(n*(CaloriesPerServingMean-mean.CaloriesPerServingMean)^2))/(k-1)
MSB&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 28815.96&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;MSW &amp;lt;- sum((n-1) * CaloriesPerServingSD^2)/(N-k)
MSW&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 16508.6&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;part-b-1&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Part b&lt;/h3&gt;
&lt;p&gt;Calculate an F-ratio and a &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; for this &lt;span class=&#34;math inline&#34;&gt;\(F\)&lt;/span&gt;, using the &lt;span class=&#34;math inline&#34;&gt;\(F\)&lt;/span&gt; distribution with &lt;span class=&#34;math inline&#34;&gt;\(k-1\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(N-k\)&lt;/span&gt; degrees of freedom. Use &lt;span class=&#34;math inline&#34;&gt;\(\alpha = 0.05\)&lt;/span&gt;. Compare these values to the corresponding values reported in Wansink Table 1.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Calculating F.ratio
F.ratio &amp;lt;- MSB/MSW
df1 &amp;lt;- k-1
df2 &amp;lt;- N-k
p.value &amp;lt;- pf(F.ratio, df1, df2, lower.tail = FALSE)
p.value&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.1163133&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can check your results by entering appropriate values in an online calculator like &lt;a href=&#34;http://statpages.info/anova1sm.html&#34; class=&#34;uri&#34;&gt;http://statpages.info/anova1sm.html&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;Group Name N(count) Mean Std.Dev
Group1 18 268.1 124.8
Group2 18 271.1 124.2
Group3 18 280.9 116.2
.
.
.
Group7 18 384.4 168.3&lt;/p&gt;
&lt;p&gt;Then set Desired confidence level for post-hoc confidence intervals: 5&lt;/p&gt;
&lt;p&gt;Finally, cross-check your answers!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Calculations</title>
      <link>/achalneupane.github.io/post/calculations/</link>
      <pubDate>Thu, 15 Aug 2019 17:26:23 -0500</pubDate>
      <guid>/achalneupane.github.io/post/calculations/</guid>
      <description>


&lt;script type=&#34;text/javascript&#34; src=&#34;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML&#34;&gt;
&lt;/script&gt;
&lt;div id=&#34;general-instructions.&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;General instructions.&lt;/h1&gt;
&lt;p&gt;There are 5 exercises below. You are required to provide solutions for at least four of the five. You are required to solve at least one exercise in R, and at least one in SAS. You are required to provide five solutions, each solution will be worth 10 points. Thus, you may choose to provide both R and SAS solutions for a single exercise, or you may solve all five problems, mixing the languages as you wish. Warning - we will be reusing the formulas from the first three exercises in later homework, so if you implement them now later exercises will be easier.&lt;/p&gt;
&lt;div id=&#34;experimental&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Experimental&lt;/h4&gt;
&lt;p&gt;I’ve been arguing that this course should also include Python. To explore this idea, I’ll allow one solution (10 of your 50 points) to be implemented in Python. To get full credit for a Python solution :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Solve one of the first three exercises.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Explain how the Python solution differs from the corresonding R or SAS solution. Note the differences in the languages. For example, does Python use the same assignment operator? Are all math operators the same as R or SAS? Are the math or statistics functions loaded by default? For the first exercise, I’ve found three important differences between R and Python.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;You can include Python in RMarkdown by replacing &lt;code&gt;r&lt;/code&gt; with &lt;code&gt;python&lt;/code&gt; in the code chunk prefix.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;I won’t be teaching Python this summer, but if you’re familiar with Python, this may help understand the inner workings of R or SAS.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;exercise-1&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Exercise 1&lt;/h1&gt;
&lt;p&gt;Cohen gives a formula for effect size, &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt;, for the difference between two means &lt;span class=&#34;math inline&#34;&gt;\(m_1\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(m_2\)&lt;/span&gt;, as&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
d = \frac{|m_1-m_2|}{s_{pooled}}
\]&lt;/span&gt;
where &lt;span class=&#34;math inline&#34;&gt;\(s_{pooled}\)&lt;/span&gt; is a pooled standard deviation. Use the formula &lt;span class=&#34;math inline&#34;&gt;\(s_{pooled} = \sqrt{(s_1^2 + s_2^2)/2}\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Calculate the effect size &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt; for the differences among calories per serving, 1936 versus 2006, 1936 vs 1997 and 1997 vs 2006. Use the values from Wansink, Table 1 as given in Homework 1 or in the course outline.&lt;/p&gt;
&lt;div id=&#34;answer&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Answer&lt;/h2&gt;
&lt;p&gt;Enter the R code in the chunks below. If you choose SAS for this exercise, use the marked portion in the SAS homework template.&lt;/p&gt;
&lt;div id=&#34;versus-2006&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;1936 versus 2006&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#calories per serving
#for this calcuation, m1 and m2 are mean for calories per serving for 1936 and 2006 respectively. s1 and s2 are standard deviation for 1936 vs 2006.
m1=268.1
m2=384.4
s1=124.8
s2=168.3
d_1936_2006 &amp;lt;- (abs(m1-m2)/sqrt((s1^2+s2^2)/2))
d_1936_2006&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.7849876&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;versus-1997&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;1936 versus 1997&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#calories per serving
#for this calcuation, m1 and m2 are mean for calories per serving for 1936 and 1997 respectively. s1 and s2 are standard deviation for 1936 and 1997.
m1=268.1
m2=288.6
s1=124.8
s2=122.0
d_1936_1997 &amp;lt;- (abs(m1-m2)/sqrt((s1^2+s2^2)/2))
d_1936_1997&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.1661157&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;versus-2006-1&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;1997 versus 2006&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#calories per serving
#for this calcuation, m1 and m2 are mean for calories per serving for 1997 and 2006 respectively. s1 and s2 are standard deviation for 1997 vs 2006.
m1=288.6
m2=384.4
s1=122.0
s2=168.3
d_1997_2006 &amp;lt;- (abs(m1-m2)/sqrt((s1^2+s2^2)/2))
d_1997_2006&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.6517694&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To check your work, consider that Cohen recommends that &lt;span class=&#34;math inline&#34;&gt;\(d=0.2\)&lt;/span&gt; be considered a small effect, &lt;span class=&#34;math inline&#34;&gt;\(d=0.5\)&lt;/span&gt; a medium effect and &lt;span class=&#34;math inline&#34;&gt;\(d=0.8\)&lt;/span&gt; a large effect. I don’t find any of these to be fully large effects.&lt;/p&gt;
&lt;p&gt;Here, I also found none of these to be of larger effect.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;exercise-2.&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Exercise 2.&lt;/h1&gt;
&lt;p&gt;Suppose you are planning an experiment and you want to determine how many observations you should make for each experimental condition. One simple formula (see Kuehl, “Design of Experiments : Statistical Principles of Research Design and Analysis”) for the required replicates &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; is given by&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
n \ge 2\times \left( \frac{CV}{\%Diff} \right)^2 \times \left(z_{\alpha/2}+ z_\beta \right)^2
\]&lt;/span&gt;
where &lt;span class=&#34;math inline&#34;&gt;\(\%Diff = \frac{m_1 - m_2}{(m_1 + m_2)/2}\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(CV = \frac{sd_{pooled}}{(m_1 + m_2)/2}\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Use this formula to calculate the number of replicates required to detect differences between calories per serving, 1936 versus 2006, 1936 vs 1997 and 1997 vs 2006. You will need to research how to use the normal distribution functions (&lt;code&gt;*norm&lt;/code&gt; in R, ). Use &lt;span class=&#34;math inline&#34;&gt;\(\alpha=0.05\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(\beta = 0.8\)&lt;/span&gt; for probabilities, and let &lt;code&gt;mean = 0&lt;/code&gt; and &lt;code&gt;sd = 1&lt;/code&gt; (both &lt;span class=&#34;math inline&#34;&gt;\(z\)&lt;/span&gt; should be positive).&lt;/p&gt;
&lt;p&gt;Since &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; must be an integer, you will need to round up. Look up the built in functions for this.&lt;/p&gt;
&lt;div id=&#34;answer-1&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Answer&lt;/h2&gt;
&lt;p&gt;Enter the R code in the chunks below. If you choose SAS for this exercise, use the marked portion in the SAS homework template.&lt;/p&gt;
&lt;div id=&#34;versus-2006-2&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;1936 versus 2006&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;alpha = 0.05
beta = 0.8
m1=268.1
m2=384.4
s1=124.8
s2=168.3
z.half.alpha=abs(qnorm(alpha/2, 0, 1 ))
z.half.alpha&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1.959964&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;z.beta=abs(qnorm(beta, 0, 1))
z.beta&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.8416212&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;n &amp;lt;- 2* (((sqrt((s1^2 + s2^2)/2))/(m1-m2))^2) * ((z.half.alpha + z.beta)^2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;```&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;versus-1997-1&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;1936 versus 1997&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;m1=268.1
m2=288.6
s1=124.8
s2=122.0
z.half.alpha=abs(qnorm(alpha/2, 0, 1 ))
z.half.alpha&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1.959964&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;z.beta=abs(qnorm(beta, 0, 1))
z.beta&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.8416212&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;n &amp;lt;- 2* (((sqrt((s1^2 + s2^2)/2))/(m1-m2))^2) * ((z.half.alpha + z.beta)^2)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;versus-2006-3&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;1997 versus 2006&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;m1=288.6
m2=384.4
s1=122.0
s2=168.3
z.half.alpha=abs(qnorm(alpha/2, 0, 1 ))
z.half.alpha&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1.959964&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;z.beta=abs(qnorm(beta, 0, 1))
z.beta&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.8416212&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;n &amp;lt;- 2* (((sqrt((s1^2 + s2^2)/2))/(m1-m2))^2) * ((z.half.alpha + z.beta)^2)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To check your work, use the rule of thumb suggested by van Belle (“Statistical Rules of Thumb”), where&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
n= \frac{16}{\Delta^2}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;with &lt;span class=&#34;math inline&#34;&gt;\(\Delta = \frac{\mu_1 - \mu_2}{\sigma}\)&lt;/span&gt;. How does this compare with your results? Why does this rule of thumb work? How good is this rule of thumb?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# rule of thumb
sigma=1
# Here, use either s1 or s2 or pooled sd for the sake of estimating. Comment from the instructor: Can we agree that the formula given in to check your work will be an approximation, and not an exact answer? If so, then does it matter if the approximate answer is based on the larger of two sd, the smaller of two sd, or some pooled value?
Delta=(m1 - m2)/s2

n= 16/Delta^2
n&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 49.38069&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;exercise-3&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Exercise 3&lt;/h1&gt;
&lt;p&gt;The probablity of an observation &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt;, when taken from a normal population with mean &lt;span class=&#34;math inline&#34;&gt;\(\mu\)&lt;/span&gt; and variance &lt;span class=&#34;math inline&#34;&gt;\(\sigma^2\)&lt;/span&gt; is calculated by&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
L (x ; \mu, \sigma^2) = \frac{1}{\sigma \sqrt{2 \pi}^{}} e^{- \frac{(x - \mu)^2}{2 \sigma^2}}
\]&lt;/span&gt;
For values of &lt;span class=&#34;math inline&#34;&gt;\(x = \{-0.1, 0.0, 0.1 \}\)&lt;/span&gt;, write code to calculate &lt;span class=&#34;math inline&#34;&gt;\(L (x ; \mu = 0, \sigma = 1)\)&lt;/span&gt;.&lt;/p&gt;
&lt;div id=&#34;answer-2&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Answer&lt;/h2&gt;
&lt;p&gt;Enter the R code in the chunks below. If you choose SAS for this exercise, use the marked portion in the SAS homework template.&lt;/p&gt;
&lt;div id=&#34;x-0.1&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;span class=&#34;math inline&#34;&gt;\(x=-0.1\)&lt;/span&gt;&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# to calcuate the values for l_1 from above equation, first we define the values for sigma, mu and x as below and the code for the formula is shown. 
sigma=1
mu=0
x=-0.1
l_1 &amp;lt;- 1/ (sigma*sqrt(2*pi))*exp(-(x-mu)^2/2*sigma^2)
l_1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.3969525&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;x0.0&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;span class=&#34;math inline&#34;&gt;\(x=0.0\)&lt;/span&gt;&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# to calcuate the values for l_2 from above equation, first we define the values for sigma, mu and x as below and the code for the formula is shown. 
sigma=1
mu=0
x=0.0
l_2 &amp;lt;- 1/ (sigma*sqrt(2*pi))*exp(-(x-mu)^2/2*sigma^2)
l_2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.3989423&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;x0.1&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;span class=&#34;math inline&#34;&gt;\(x=0.1\)&lt;/span&gt;&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# to calcuate the values for l_3 from above equation, first we define the values for sigma, mu and x as below and the code for the formula is shown. 
sigma=1
mu=0
x=0.1
l_3 &amp;lt;- 1/ (sigma*sqrt(2*pi))*exp(-(x-mu)^2/2*sigma^2)
l_3&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.3969525&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can confirm your results using the built in normal distribution function. Look up &lt;code&gt;dnorm&lt;/code&gt; in R help and use the same values for &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;mean&lt;/code&gt; and &lt;code&gt;sigma&lt;/code&gt; as above. You should get matching results to at least 12 decimal places.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;if(abs(l_1 -dnorm(-0.1,0, 1))&amp;lt;1e-12) {
  print(&amp;quot;likelihood for x = -0.1 correct&amp;quot;)
}else{
  print(&amp;quot;likelihood for x = -0.1 incorrect&amp;quot;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;likelihood for x = -0.1 correct&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;if(abs(l_2 -dnorm(0,0, 1))&amp;lt;1e-12) {
  print(&amp;quot;likelihood for x = 0.0 correct&amp;quot;)
}else{
  print(&amp;quot;likelihood for x = 0.0 incorrect&amp;quot;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;likelihood for x = 0.0 correct&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;if(abs(l_3 -dnorm(0.1,0, 1))&amp;lt;1e-12) {
  print(&amp;quot;likelihood for x = 0.1 correct&amp;quot;)
} else {
  print(&amp;quot;likelihood for x = 0.1 incorrect&amp;quot;)
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;likelihood for x = 0.1 correct&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Thus, this shows that the matching resuls are less than 12 decimal places.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;exercise-4&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Exercise 4&lt;/h1&gt;
&lt;div id=&#34;part-a&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Part a&lt;/h2&gt;
&lt;p&gt;Write code to compute&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[7 - 1 \times 0 + 3 \div 3\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Type this in verbatim, using only numbers, &lt;code&gt;-&lt;/code&gt;,&lt;code&gt;*&lt;/code&gt; and &lt;code&gt;/&lt;/code&gt;, with no parenthesis. Do you agree with the result? Explain why, one or two sentences.&lt;/p&gt;
&lt;div id=&#34;answer-3&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Answer&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;a=7-1*0+3/3
a&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 8&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Yes I agree with the results because it follows BODMAS rule. The order of calculation should be brackets, Order, Division/Multiplication, Addition/Subtraction.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;part-b&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Part b&lt;/h2&gt;
&lt;p&gt;According to “Why Did 74% of Facebook Users Get This Wrong?” (&lt;a href=&#34;https://profpete.com/blog/2012/11/04/why-did-74-of-facebook-users-get-this-wrong/&#34; class=&#34;uri&#34;&gt;https://profpete.com/blog/2012/11/04/why-did-74-of-facebook-users-get-this-wrong/&lt;/a&gt;), most people would compute the result as 1.
Use parenthesis &lt;code&gt;( )&lt;/code&gt; to produce this result.&lt;/p&gt;
&lt;div id=&#34;answer-4&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Answer&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#For this, we can get 1 if we do the substraction at first and then the multiplication later by addition and division. Therefore, the value would be wrong as it doesnot follow the rule of calculations (BODMAS). 
a=(7-1)*0+3/3
a&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;part-c&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Part c&lt;/h2&gt;
&lt;p&gt;Several respondents to the survey cited in Part 2 gave the answer 6. Add &lt;em&gt;one&lt;/em&gt; set of parenthesis to produce this result.&lt;/p&gt;
&lt;div id=&#34;answer-5&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Answer&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;a=7-1*(0+3/3)
a&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 6&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;exercise-5.&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Exercise 5.&lt;/h1&gt;
&lt;div id=&#34;part-a-1&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Part a&lt;/h3&gt;
&lt;p&gt;Quoting from Wansink and Payne&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Because of changes in ingredients, the mean average calories in a recipe increased by 928.1 (from
2123.8 calories … to 3051.9 calories … ), representing a 43.7% increase.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Show how 43.7% is calculated from 2123.8 and 3051.9, and confirm W&amp;amp;P result.&lt;/p&gt;
&lt;div id=&#34;answer-6&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Answer&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#here we define the variable m1 and m2 as mean for total caloires for 1936 and 2006 respectively
m1=2123.8
m2=3051.9
percentchange=(m2-m1)/m1*100
round(percentchange, 2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 43.7&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# 43.7&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;The resulting increase of 168.8 calories (from 268.1 calories … to 436.9 calories …) represents a 63.0% increase … in calories per serving.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;part-b-1&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Part b&lt;/h3&gt;
&lt;p&gt;Repeat the calculations from above and confirm the reported 63.0% increase in calories per serving. Why is there such a difference between the change in calories per recipe and in calories per serving?&lt;/p&gt;
&lt;div id=&#34;answer-7&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Answer&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#let m1 and m2 be the mean for calories per serving for 1936 and 2006 respectively. 
m1=268.1
m2=436.9
percentchange=abs(m1-m2)/m1*100
round(percentchange, 1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 63&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# 63.0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The value for the percentage change in average calories per recipe from 1936 to 2006 is 43.7% which is lower than the percent change in average calories per serving (63.0 %) because the percent change for the year 1936 to 2006 is higher for average calories per serving compared to average calories per recipe.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;part-c-1&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Part c&lt;/h3&gt;
&lt;p&gt;Calculate an average calories per serving by dividing average calories per recipe by average servings per recipe, for years 1936 and 2006, then calculate a percent increase. Which of the two reported increases (a or b) are consistent with this result?&lt;/p&gt;
&lt;div id=&#34;answer-8&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Answer&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Here, we divide average calories per recipe by average servings per recipe to get m1 and m2 (average calories per serving for year 1936 and 2006, respectively).
m1=2123.8/12.9
m2=3051.9/12.7
percentchange=abs(m1-m2)/m1*100
round(percentchange, 2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 45.96&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The reported percent change here (45.96%) is somewhat consistent with 43.7 %. So it is somewhat consistent with a.&lt;/p&gt;
&lt;p&gt;Finally, I choose to work on exercise 1, 3, 4 and 5 using R and also excercise 1 using SAS.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Control Structures</title>
      <link>/achalneupane.github.io/post/control_structures/</link>
      <pubDate>Thu, 15 Aug 2019 17:26:23 -0500</pubDate>
      <guid>/achalneupane.github.io/post/control_structures/</guid>
      <description>


&lt;script type=&#34;text/javascript&#34; src=&#34;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML&#34;&gt;
&lt;/script&gt;
&lt;p&gt;There are six exercises below. You are required to provide solutions for at least four of the five. You are required to solve at least one exercise in R, and at least one in SAS. You are required to provide five solutions, each solution will be worth 10 points. Thus, you may choose to provide both R and SAS solutions for a single exercise, or you may solve five of the sixth problems, mixing the languages as you wish.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Warning&lt;/em&gt; I will continue restricting the use of external libraries in R, particularly &lt;code&gt;tidyverse&lt;/code&gt; libraries. You may choose to use &lt;code&gt;ggplot2&lt;/code&gt;, but take care that the plots you produce are at least as readable as the equivalent plots in base R. You will be allowed to use whatever libraries tickle your fancy in the midterm and final projects.&lt;/p&gt;
&lt;div id=&#34;experimental&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;Experimental&lt;/h4&gt;
&lt;p&gt;Again, you will be allowed to provide one solution using Python. Elaborate on the similarities and differences between Ptyhon function definitions and R or IML or Macro language.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;reuse&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Reuse&lt;/h2&gt;
&lt;p&gt;For many of these exercises, you may be able to reuse functions written in prior homework. Define those functions here. I’m also including data vectors that can be used in some exercises.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;CaloriesPerServingMean &amp;lt;- c(268.1, 271.1, 280.9, 294.7, 285.6, 288.6, 384.4)
CaloriesPerServingSD &amp;lt;- c(124.8, 124.2, 116.2, 117.7, 118.3, 122.0, 168.3)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;exercise-1&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Exercise 1&lt;/h1&gt;
&lt;p&gt;Write a general Cohen &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt; function to be more generally useful, accepting a wider range of arguments. For convenience, name this &lt;code&gt;general.d&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The new function should accept two parameters, &lt;code&gt;m&lt;/code&gt;, &lt;code&gt;s&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In your function, check for these condititions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If &lt;code&gt;m&lt;/code&gt; is of length 1 and &lt;code&gt;s&lt;/code&gt; is length 1, then simply divide &lt;code&gt;m/s&lt;/code&gt; - that is, proceed with the calculations as if &lt;code&gt;m = %Diff&lt;/code&gt; and &lt;code&gt;s = CV&lt;/code&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;If &lt;code&gt;m&lt;/code&gt; is of length 2, then calculate the difference and proceed with the calculations.&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If &lt;code&gt;m&lt;/code&gt; is of length greater than 2, find the difference between the min and max of &lt;code&gt;m&lt;/code&gt; and proceed with the calculations.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;If s is of length greater than 1 calculate pooled sd as&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
s^2_{pooled} = \sqrt{\frac{\sum_i^k s_i^2}{k}}
\]&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Creating the general.d function with all possible combinations for m and s
# conditions:
general.d &amp;lt;- function(m, s){
  if(length(m) == 1 &amp;amp;&amp;amp; length(s) == 1){
    Diff = m
    CV = s
    print(&amp;quot;EffectSize calculated for length(m) == 1, and length(s) == 1&amp;quot;)
  }else if (length(m) == 2 &amp;amp;&amp;amp; length(s) &amp;gt; 1){
    Diff = abs(m[1]-m[2])
    CV = sqrt(sum((s^2))/length(s))
    print(&amp;quot;EffectSize calculated for length(m) == 2, and length(s) &amp;gt; 1&amp;quot;)
  }else if (length(m) == 2 &amp;amp;&amp;amp; length(s) == 1){
    Diff = abs(m[1]-m[2])
    CV = s
    print(&amp;quot;EffectSize calculated for length(m) == 2, and length(s) == 1&amp;quot;)
  }else if (length(m) &amp;gt; 2 &amp;amp;&amp;amp; length(s) &amp;gt; 1){
    Diff = max(m)-min(m)
    CV = sqrt(sum((s^2))/length(s))
    print(&amp;quot;EffectSize calculated for length(m) &amp;gt; 2, and length(s) &amp;gt; 1&amp;quot;)
  }else if (length(m) &amp;gt; 2 &amp;amp;&amp;amp; length(s) == 1){
  Diff = max(m)-min(m)
  CV = s
  print(&amp;quot;EffectSize calculated for length(m) &amp;gt; 2, and length(s) == 1&amp;quot;)
}
  EffectSize &amp;lt;- Diff/CV
  return(EffectSize)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Test your function with the three cases:&lt;/p&gt;
&lt;div id=&#34;effect-size&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;1936 Effect Size&lt;/h4&gt;
&lt;p&gt;Use just the mean from 1936 and the associated standard deviation&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;general.d(268.1, 124.8)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;EffectSize calculated for length(m) == 1, and length(s) == 1&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 2.148237&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;versus-2006&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;1936 versus 2006&lt;/h4&gt;
&lt;p&gt;This should duplicate results from prior exercises.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;general.d(c(268.1,384.4), c(124.8,168.3))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;EffectSize calculated for length(m) == 2, and length(s) &amp;gt; 1&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.7849876&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Yes, it matches the result from Homework 4&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;all-of-calories-per-serving.&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;All of Calories per Serving.&lt;/h4&gt;
&lt;p&gt;Use the vectors from the Reuse chunk.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;general.d(CaloriesPerServingMean,CaloriesPerServingSD)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;EffectSize calculated for length(m) &amp;gt; 2, and length(s) &amp;gt; 1&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.9051585&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Are these three scenarios sufficient to test every path through &lt;code&gt;general.d&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;Yes, these three scenarious are sufficient to test for all conditions mentioned above.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;exercise-2&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Exercise 2&lt;/h1&gt;
&lt;p&gt;Previously, we’ve calculated required replicates based on the &lt;span class=&#34;math inline&#34;&gt;\(z\)&lt;/span&gt; distribution. In this exercise, you will calculate required replicates based on the &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; disttibution. You must implement one of two algorithms given below. For both algorithmss, alculate degrees of freedom as &lt;span class=&#34;math inline&#34;&gt;\(\nu = n*k-k\)&lt;/span&gt; where &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; is the current estimate for required replicates and let &lt;span class=&#34;math inline&#34;&gt;\(k=2\)&lt;/span&gt;&lt;/p&gt;
&lt;div id=&#34;algorithm-1-from-cochran-and-cox&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Algorithm 1 (from Cochran and Cox, )&lt;/h3&gt;
&lt;p&gt;Use the formula:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
n \ge 2\times \left( \frac{CV}{\%Diff} \right)^2 \times \left(t_{\alpha/2,\nu}+ t_{\beta,\nu} \right)^2
\]&lt;/span&gt;&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Start with a small &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt;, say, 2.&lt;/li&gt;
&lt;li&gt;Calculate critical &lt;span class=&#34;math inline&#34;&gt;\(t_\alpha/2\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(t_\beta\)&lt;/span&gt; quantiles with &lt;span class=&#34;math inline&#34;&gt;\(\nu\)&lt;/span&gt; d.f, then calculate required replicates. Label this &lt;span class=&#34;math inline&#34;&gt;\(n_{current}\)&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Update &lt;span class=&#34;math inline&#34;&gt;\(\nu\)&lt;/span&gt; using &lt;span class=&#34;math inline&#34;&gt;\(n_{current}\)&lt;/span&gt;, then recalculate critical values and required replicates.
Label this &lt;span class=&#34;math inline&#34;&gt;\(n_{next}\)&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;If &lt;span class=&#34;math inline&#34;&gt;\(n_{current}=n_{next}\)&lt;/span&gt; then the algorithm has converged.
Otherwise, set &lt;span class=&#34;math inline&#34;&gt;\(n_{current}\)&lt;/span&gt; to &lt;span class=&#34;math inline&#34;&gt;\(n_{next}\)&lt;/span&gt;, and repeat 2-3.&lt;/li&gt;
&lt;li&gt;If after some sufficiently large number (say, 20), the algorithm hasn’t converged, print a message and return the largest of &lt;span class=&#34;math inline&#34;&gt;\(n_{current}\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(n_{next}\)&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;required.replicates.t &amp;lt;- function (m1, s1, m2, s2,n = 2, k = 2, alpha = 0.05, beta = 0.20){
  temp.required.replicates.t &amp;lt;- function(...){
    sd.pooled &amp;lt;- function(...){
    sqrt((s1^2 + s2^2)/2)
    }
    d &amp;lt;- (sd.pooled(s1,s2))/abs(m1-m2)
    ceiling(2*d^2*(qt(1-alpha/2, n*k-k) + qt(1-beta, n*k-k))^2)
  }
  
  
  # n &amp;lt;- 2
  i &amp;lt;- 1
  ncurrent.indexed &amp;lt;- {
  }
  nnext.indexed &amp;lt;- {
  }
  success &amp;lt;- FALSE
  # while (!success) {
  while (i &amp;lt; 20 &amp;amp;&amp;amp; !success) {
    ncurrent &amp;lt;- n
    ncurrent.indexed[i] &amp;lt;- ncurrent # so we can keep track of ncurrent
    nnext &amp;lt;- temp.required.replicates.t(m1, s1, m2, s2, n = ncurrent)
    nnext.indexed[i] &amp;lt;- nnext # so we can keep track of nnext
    success &amp;lt;- nnext == ncurrent
    if (!success &amp;amp;&amp;amp; i == 20) {
      # if (success ){
      print(&amp;quot;The algorithm DO NOT converge!!!!!&amp;quot;)
      print(paste0(&amp;quot;The largest of ncurrent is : &amp;quot;, max(ncurrent.indexed)))
      print(paste0(&amp;quot;The nnext is: &amp;quot;, nnext))
    } else if (success) {
      print(paste0(&amp;quot;The algorithm DO converge at iteration &amp;quot; , i , &amp;quot; !!!!!&amp;quot;))
      break
    }
    n &amp;lt;- nnext
    i &amp;lt;- i + 1
  }
  values &amp;lt;-
    list(n.current = ncurrent.indexed, n.next = nnext.indexed)
  return(values)
}

# Copying required.replicates function from last homework
required.replicates &amp;lt;- function (m1,m2, s1,s2, alpha=0.05, beta=0.2){
  n &amp;lt;- 2* ((((sqrt((s1^2 + s2^2)/2))/(m1-m2))^2) * (qnorm((1-alpha/2)) + qnorm((1-beta)))^2) 
  return(round(n,0))
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;algorithm-2&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Algorithm 2&lt;/h3&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Start with a small &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt;, say, 2.&lt;/li&gt;
&lt;li&gt;Calculate critical &lt;span class=&#34;math inline&#34;&gt;\(t_\alpha\)&lt;/span&gt; quantile using the central &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; distribution with &lt;span class=&#34;math inline&#34;&gt;\(\nu\)&lt;/span&gt; d.f.&lt;/li&gt;
&lt;li&gt;Estimate Type IIShow in New WindowClear OutputExpand/Collapse Output error (p-value) under the alternate hypothesis using the non-central &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; distribution with &lt;span class=&#34;math inline&#34;&gt;\(\nu\)&lt;/span&gt; d.f, at the critical &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; from 2. Calculate non-centrality parameter as
&lt;span class=&#34;math display&#34;&gt;\[
NCP = \frac{\%Diff}{CV} \sqrt{\frac{n}{2}}
\]&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;If the resulting error is less than &lt;span class=&#34;math inline&#34;&gt;\(1-\beta\)&lt;/span&gt;, accept the current value of &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt;. Otherwise increment &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; and repeate 2-3.&lt;/li&gt;
&lt;li&gt;If desired power is not achieved after a large number of iterations (say, 1000), terminate the calculations and return NA.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Implement the algorithm as a function or macro named &lt;code&gt;required.replicates.t&lt;/code&gt;, with parameters &lt;code&gt;mu&lt;/code&gt;, &lt;code&gt;sigma&lt;/code&gt; and an optional parameter &lt;code&gt;k&lt;/code&gt;. Test your function by comoparing with required replicates from prior exercises for calories per serving, 1936 versus 2006, 1936 vs 1997 and 1997 vs 2006.&lt;/p&gt;
&lt;p&gt;For either algoorithm, you might consider starting with an initial value of &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; calculated using the &lt;span class=&#34;math inline&#34;&gt;\(z\)&lt;/span&gt; critical values as before. Can you be certain that the &lt;span class=&#34;math inline&#34;&gt;\(z\)&lt;/span&gt; formula will not estimate more required replicates than the &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; algorithm?&lt;/p&gt;
&lt;div id=&#34;versus-2006-1&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;1936 versus 2006&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;required.replicates(268.1, 124.8, 384.4, 168.3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 67&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;required.replicates.t(268.1, 124.8, 384.4, 168.3)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;The algorithm DO converge at iteration 4 !!!!!&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $n.current
## [1]  2 94 26 27
## 
## $n.next
## [1] 94 26 27 27&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;versus-1997&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;1936 versus 1997&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;required.replicates(268.1, 124.8, 288.6, 122.0)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 38&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;required.replicates.t(268.1, 124.8, 288.6, 122.0)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;The algorithm DO converge at iteration 3 !!!!!&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $n.current
## [1]    2 2085  570
## 
## $n.next
## [1] 2085  570  570&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;versus-2006-2&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;1997 versus 2006&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;required.replicates(384.4,168.3,288.6,122.0)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 17&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;required.replicates.t(384.4,168.3,288.6,122.0)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;The algorithm DO converge at iteration 3 !!!!!&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $n.current
## [1]   2 136  38
## 
## $n.next
## [1] 136  38  38&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You might find it useful to reproduce the plots from Homework 4, Ex. 3. Plot the central and non-central &lt;span class=&#34;math inline&#34;&gt;\(t\)&lt;/span&gt; distributions over the range &lt;span class=&#34;math inline&#34;&gt;\(-3,4\)&lt;/span&gt;, and produce plots for seledted &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;exercise-3&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Exercise 3&lt;/h1&gt;
&lt;p&gt;Calculate a cumulative probability value from the normal pdf, using the Newton-Cotes formula&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\int _{x_0} ^{x_n} f(x) dx \approx \sum _{i=0} ^n h f(x_i)
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;where &lt;span class=&#34;math inline&#34;&gt;\(x_1, ..., x_n\)&lt;/span&gt; are a sequence of evenly spaced numbers from &lt;span class=&#34;math inline&#34;&gt;\(-2 \dots 2\)&lt;/span&gt;, with &lt;span class=&#34;math inline&#34;&gt;\(x_i = x_0 + h i\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; is the number of &lt;span class=&#34;math inline&#34;&gt;\(x_i\)&lt;/span&gt; in the sequence and step size &lt;span class=&#34;math inline&#34;&gt;\(h = (x_n -x_0)/n\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;We will calculate this integral by calculating successive approximations of &lt;span class=&#34;math inline&#34;&gt;\(f = L(x;0,1)\)&lt;/span&gt; &lt;code&gt;= norm.pdf&lt;/code&gt; over series of &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; with increasingly smaller step sizes.&lt;/p&gt;
&lt;div id=&#34;part-a.&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Part a.&lt;/h2&gt;
&lt;p&gt;Calculate &lt;span class=&#34;math inline&#34;&gt;\(L_0\)&lt;/span&gt; by summing over &lt;span class=&#34;math inline&#34;&gt;\(L(\bf{X_0})\)&lt;/span&gt;, where &lt;span class=&#34;math inline&#34;&gt;\(X_0\)&lt;/span&gt; is a series from &lt;span class=&#34;math inline&#34;&gt;\(x_0=-2, \dots, x_n=2\)&lt;/span&gt; incremented by &lt;span class=&#34;math inline&#34;&gt;\(h_0=0.1\)&lt;/span&gt;. Multiply this sum by &lt;span class=&#34;math inline&#34;&gt;\(h_0\)&lt;/span&gt; for an approximate &lt;span class=&#34;math inline&#34;&gt;\(\int _{x_0} ^{x_n} L(x) dx\)&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;h0_val &amp;lt;- 0.1
x0_val&amp;lt;-{}
x0_val &amp;lt;- seq(-2,2,h0_val)
result0 &amp;lt;- sum(x0_val)
result0 &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 4.662937e-15&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;normal.pdf.0 &amp;lt;- result0 *h0_val
normal.pdf.0&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 4.662937e-16&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Think of this as the sum of a series of rectangles, each &lt;span class=&#34;math inline&#34;&gt;\(h\)&lt;/span&gt; wide and a height given by the normal pdf.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;part-b.&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Part b.&lt;/h2&gt;
&lt;p&gt;Create a second series &lt;span class=&#34;math inline&#34;&gt;\(X_1\)&lt;/span&gt; by setting &lt;span class=&#34;math inline&#34;&gt;\(h_1 = h_0/2\)&lt;/span&gt;. Compute &lt;span class=&#34;math inline&#34;&gt;\(L_1\)&lt;/span&gt; from this series as in part a. Let &lt;span class=&#34;math inline&#34;&gt;\(i=1\)&lt;/span&gt;
You now have the are of twice as many rectangles as part a, but each is half as wide.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Now, Create a second series  X_1
h1_val &amp;lt;- h0_val/2
x1_val&amp;lt;-{}
x1_val &amp;lt;- seq(-2,2,h1_val)
result1 &amp;lt;- sum(x1_val)
result1 &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 8.881784e-15&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;normal.pdf.1 &amp;lt;- result1 *h1_val
normal.pdf.1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 4.440892e-16&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;part-c.&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Part c.&lt;/h2&gt;
&lt;p&gt;Compute &lt;span class=&#34;math inline&#34;&gt;\(\delta=|L_i - L_{i-1}|\)&lt;/span&gt;. If &lt;span class=&#34;math inline&#34;&gt;\(\delta &amp;lt; 0.0001\)&lt;/span&gt;, your sequence of iterations has converged on a solution for &lt;span class=&#34;math inline&#34;&gt;\(L\)&lt;/span&gt;. Finish with Part d. Otherwise, increment &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;, let &lt;span class=&#34;math inline&#34;&gt;\(h_i = h_{i-1}/2\)&lt;/span&gt;. Create the next series &lt;span class=&#34;math inline&#34;&gt;\(X_i\)&lt;/span&gt; and compute the next &lt;span class=&#34;math inline&#34;&gt;\(L_i\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Hint: code this first as a for loop of a small number of &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; until you know your code will converge toward a solution.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;h_val&amp;lt;- 0
seq1&amp;lt;-{}
seq2&amp;lt;-{}
for (x in 1:10){
  
  if (x == 1 ){
    hx &amp;lt;- 0.1
    h_val[x] &amp;lt;- hx
  }
  
  else {
    hx &amp;lt;- h_val[x]
  }
  
  y &amp;lt;- x +1
  hy &amp;lt;- hx/2
  h_val[y] &amp;lt;- hy
  
  seq1 &amp;lt;- seq(-2,2,hx)
  sumSeq1 &amp;lt;- sum(seq1)
  pdf1 &amp;lt;- sumSeq1*hx
  seq2 &amp;lt;- seq(-2,2,hy)
  sumSeq2 &amp;lt;- sum(seq2)
  pdf2 &amp;lt;- sumSeq2*hy  
  del &amp;lt;- abs(sumSeq2 - sumSeq1)  
  if (del &amp;lt; 0.0001){
    print(&amp;quot;The sequence has been converged&amp;quot;)
    break
  }
  
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;The sequence has been converged&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;part-d&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Part d&lt;/h1&gt;
&lt;p&gt;Report &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(h\)&lt;/span&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;h_val[y]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.05&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;length(seq2)-length(seq1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 40&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To check your results, compare your final &lt;span class=&#34;math inline&#34;&gt;\(L_i\)&lt;/span&gt; to&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pnorm(-2, lower.tail = TRUE)-pnorm(-2, lower.tail = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Is your estimate within &lt;span class=&#34;math inline&#34;&gt;\(0.0001\)&lt;/span&gt; of this value?&lt;/p&gt;
&lt;p&gt;You might find it useful to produce staircase plots for the first 2-4 iterations (plot &lt;span class=&#34;math inline&#34;&gt;\(L_i\)&lt;/span&gt; vs &lt;span class=&#34;math inline&#34;&gt;\(X_i\)&lt;/span&gt; on one graph). You might also find it interesting to plot &lt;span class=&#34;math inline&#34;&gt;\(\delta\)&lt;/span&gt; or &lt;span class=&#34;math inline&#34;&gt;\(L\)&lt;/span&gt; versus &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; or &lt;span class=&#34;math inline&#34;&gt;\(h\)&lt;/span&gt;. You can create vectors to hold the intermediate steps - 10 iterations should be enough. How many iterations might it take to get within 0.000001 of the expected value from R?&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;exercise-4&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Exercise 4&lt;/h1&gt;
&lt;div id=&#34;part-a.-1&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Part a.&lt;/h2&gt;
&lt;p&gt;Write a function to compute mean, standard deviation, skewness and kurtosis from a single vector of numeric values. You can use the built-in mean function, but must use one (and only one) for loop to compute the rest. Be sure to include a check for missing values. Note that computationally efficient implementations of moments calculations take advantage of &lt;span class=&#34;math inline&#34;&gt;\((Y_i-\bar{Y})^4 = (Y_i-\bar{Y}) \times (Y_i-\bar{Y})^3\)&lt;/span&gt;, etc.&lt;/p&gt;
&lt;p&gt;See &lt;a href=&#34;https://www.itl.nist.gov/div898/handbook/eda/section3/eda35b.htm&#34; class=&#34;uri&#34;&gt;https://www.itl.nist.gov/div898/handbook/eda/section3/eda35b.htm&lt;/a&gt; for formula for skewness and kurtosis. This reference gives several definitions for both skewness and kurtosis, you only need to implement one formula for each. Note that for computing skewness and kurtosis, standard deviation is computed using &lt;span class=&#34;math inline&#34;&gt;\(N\)&lt;/span&gt; as a divisor, not &lt;span class=&#34;math inline&#34;&gt;\(N-1\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Your function should return a list with &lt;code&gt;Mean&lt;/code&gt;, &lt;code&gt;SD&lt;/code&gt;, &lt;code&gt;Skewness&lt;/code&gt; and &lt;code&gt;Kurtosis&lt;/code&gt;. If you use IML, you will need to implement this as a subroutie and use call by reference; include these variables in parameter list.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt; ss_x=0 
  temp.kurtosis=0
  temp.skewness=0
  i=1
  k=0
  # length.x=length(x)
  # creating a function for calculating mean, sd, skewness and kurtosis
  kurtskw=function(x){
    # while (i &amp;lt;= length.x) {
    for (i in 1:length(x)){
      if(!is.na(x[i])){
        meanX=mean(x,na.rm = TRUE)
        ss_x=ss_x + ((x[i]- meanX)^2)
        temp.kurtosis= temp.kurtosis + ((x[i] - meanX)^4)
        temp.skewness=temp.skewness + ((x[i] - meanX)^3)
        k=k+1
      }
      # i=i+1
    }   
    meanX=mean(x,na.rm = TRUE)
    Sd=sqrt(ss_x/k)
    kurtosis = temp.kurtosis/(k*(Sd^4))
    skewness =  temp.skewness/((Sd^3)*k)
    return(list(meanX=meanX,Sd=Sd,kurtosis=kurtosis,skewness=skewness))
  }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;part-b.-1&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Part b.&lt;/h2&gt;
&lt;p&gt;Test your function by computing moments for &lt;code&gt;Price&lt;/code&gt; from &lt;code&gt;pumpkins.csv&lt;/code&gt;, for &lt;code&gt;ELO&lt;/code&gt; from &lt;code&gt;elo.csv&lt;/code&gt; or the combine observations from &lt;code&gt;SiRstvt&lt;/code&gt;. If find that &lt;code&gt;ELO&lt;/code&gt; shows both skewness and kurtosis, &lt;code&gt;Price&lt;/code&gt; is kurtotic but not skewed, while &lt;code&gt;SiRstvt&lt;/code&gt; are approximately normal.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pumpkins.dat =read.table(&amp;quot;https://raw.githubusercontent.com/achalneupane/data/master/pumpkins.csv&amp;quot;, header = T, sep = &amp;quot;,&amp;quot;)
ELO.dat =read.table(&amp;quot;https://raw.githubusercontent.com/achalneupane/data/master/elo.csv&amp;quot;, header = T, sep = &amp;quot;,&amp;quot;)
SiRstvt.dat &amp;lt;- read.table(&amp;quot;https://raw.githubusercontent.com/achalneupane/data/master//SiRstvt.dat&amp;quot;, header = FALSE, skip = 59)
x = pumpkins.dat$Price
y = ELO.dat$ELO
# z = vector(SiRstvt.dat)
library(reshape2)
SiRstvt.dat &amp;lt;- suppressWarnings(melt(SiRstvt.dat))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## No id variables; using all as measure variables&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;z = SiRstvt.dat$value
print(kurtskw(x))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $meanX
## [1] 178.0667
## 
## $Sd
## [1] 40.33438
## 
## $kurtosis
## [1] 1.670802
## 
## $skewness
## [1] -0.04981076&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(kurtskw(y))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $meanX
## [1] 1378.776
## 
## $Sd
## [1] 56.42003
## 
## $kurtosis
## [1] 3.684744
## 
## $skewness
## [1] 0.6822352&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(kurtskw(z))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $meanX
## [1] 196.1892
## 
## $Sd
## [1] 0.1034955
## 
## $kurtosis
## [1] 2.337141
## 
## $skewness
## [1] -0.1456679&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I also found that &lt;code&gt;ELO&lt;/code&gt; shows both skewness and kurtosis, &lt;code&gt;Price&lt;/code&gt; is kurtotic but not skewed, while &lt;code&gt;SiRstvt&lt;/code&gt; are approximately normal.&lt;/p&gt;
&lt;p&gt;Note:
&lt;a href=&#34;https://www.itl.nist.gov/div898/handbook/eda/section3/eda35b.htm&#34; class=&#34;uri&#34;&gt;https://www.itl.nist.gov/div898/handbook/eda/section3/eda35b.htm&lt;/a&gt;
A fundamental task in many statistical analyses is to characterize the location and variability of a data set. A further characterization of the data includes skewness and kurtosis.
Skewness is a measure of symmetry, or more precisely, the lack of symmetry. A distribution, or data set, is symmetric if it looks the same to the left and right of the center point.&lt;/p&gt;
&lt;p&gt;Kurtosis is a measure of whether the data are heavy-tailed or light-tailed relative to a normal distribution. That is, data sets with high kurtosis tend to have heavy tails, or outliers. Data sets with low kurtosis tend to have light tails, or lack of outliers. A uniform distribution would be the extreme case.
The values for asymmetry and kurtosis between -2 and +2 are considered acceptable in order to prove normal univariate distribution (George &amp;amp; Mallery, 2010). George, D., &amp;amp; Mallery, M. (2010). SPSS for Windows Step by Step: A Simple Guide and Reference, 17.0 update (10a ed.) Boston: Pearson.&lt;/p&gt;
&lt;p&gt;Also,
If skewness is not close to zero, then your data set is not normally distributed.
If skewness is less than -1 or greater than 1, the distribution is highly skewed.
If skewness is between -1 and -0.5 or between 0.5 and 1, the distribution is moderately skewed.
If skewness is between -0.5 and 0.5, the distribution is approximately symmetric.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(moments)
kurtosis(x, na.rm = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1.670802&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;skewness(x, na.rm = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] -0.04981076&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;kurtosis(y, na.rm = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 3.684744&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;skewness(y, na.rm = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.6822352&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;kurtosis(z, na.rm = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 2.337141&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;skewness(z, na.rm = TRUE)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] -0.1456679&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;exercise-5&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Exercise 5&lt;/h1&gt;
&lt;p&gt;In this exercise, we will use run-time profiling and timing to compare the speed of execution for different functons or calculations. In the general, the algorithm will be&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;Write a loop to execute a large number of iterations.
I find &lt;span class=&#34;math inline&#34;&gt;\(10^6\)&lt;/span&gt; to be useful; you might start with a smaller number as you develop your code.&lt;/li&gt;
&lt;li&gt;In this loop, call a function or perform a calculation.
You don’t need to use or print the results, just assign the result to a local variable.&lt;/li&gt;
&lt;li&gt;Repeat 1 and 2, but with a different function or formula.&lt;/li&gt;
&lt;li&gt;Repeat steps 1-3 10 times, saving the time of execution for each pair of the 10 tests. Calculate mean, standard deviation and effect size for the two methods tested.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;If you choose R, I’ve included framework code using &lt;code&gt;Rprof&lt;/code&gt;; I’ve included framework code for IML in the SAS template.&lt;/p&gt;
&lt;p&gt;Test options
- In homework 3, you were given two formula for the Poisson pmf,&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
f(x;\lambda) &amp;amp; = \frac{e^{-\lambda} \lambda^x}{x!} \\
             &amp;amp; = exp(-\lambda)(\frac{1}{x!}) exp[x\times log(\lambda)] \\
\end{aligned}
\]&lt;/span&gt;
Compare the computationally efficiency of these two formula.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a sequence &lt;code&gt;x&lt;/code&gt; of numbers -3 to 3 of length &lt;span class=&#34;math inline&#34;&gt;\(10^6\)&lt;/span&gt; or so. In the first test, detetermine the amoung of time it takes to compute &lt;span class=&#34;math inline&#34;&gt;\(10^5\)&lt;/span&gt; estimates of &lt;code&gt;norm.pdf&lt;/code&gt; by visiting each element of &lt;code&gt;x&lt;/code&gt; in a loop. In the second test, simply pass &lt;code&gt;x&lt;/code&gt; as an argument to &lt;code&gt;norm.pdf&lt;/code&gt;. Does R or IML optimize vector operations?&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# A
x0 = -2
xn = 2
h0 &amp;lt;- 0.1 # spaced by 0.1
# Xi = x_0+h
X0 &amp;lt;- seq(x0,xn,h0)
X0&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] -2.0 -1.9 -1.8 -1.7 -1.6 -1.5 -1.4 -1.3 -1.2 -1.1 -1.0 -0.9 -0.8 -0.7
## [15] -0.6 -0.5 -0.4 -0.3 -0.2 -0.1  0.0  0.1  0.2  0.3  0.4  0.5  0.6  0.7
## [29]  0.8  0.9  1.0  1.1  1.2  1.3  1.4  1.5  1.6  1.7  1.8  1.9  2.0&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;L0 &amp;lt;- sum(X0)
L0&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 4.662937e-15&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;normal_pdf0 &amp;lt;- L0*h0
normal_pdf0&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 4.662937e-16&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# B



h1 &amp;lt;- h0/2
X1 &amp;lt;- seq(-2,2,h1)

L1 &amp;lt;- sum(X1)
L1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 8.881784e-15&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;normal_pdf1 &amp;lt;- L1*h1
normal_pdf1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 4.440892e-16&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# C 



# Computing delta to meet the condition
H &amp;lt;- 0

for (i in 1:1){
  
  if (i == 1 ){
    hi &amp;lt;- 0.1
    H[i] &amp;lt;- hi
  } else {
    hi &amp;lt;- H[i]
  }
  # Set j as i+1
  j &amp;lt;- i +1
  
  hj &amp;lt;- hi/2
  H[j] &amp;lt;- hj
  
  Xi &amp;lt;- seq(-2,2,hi)
  Li &amp;lt;- sum(Xi)
  normal_pdf.i &amp;lt;- Li*hi
  
  xj &amp;lt;- seq(-2,2,hj)
  Lj &amp;lt;- sum(xj)
  normal_pdf.j &amp;lt;- Lj*hj
  
  delta &amp;lt;- abs(Lj - Li)
  
  # If converge print
  if (delta &amp;lt; 0.0001){
    print(paste0(&amp;quot;The sequence has converged at iteration i: &amp;quot;, i, &amp;quot; and iteration j: &amp;quot;, j))
    break
  }
  
}&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;The sequence has converged at iteration i: 1 and iteration j: 2&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;The mathematical statement &lt;span class=&#34;math inline&#34;&gt;\(\sqrt{x}\)&lt;/span&gt; can be coded as either &lt;code&gt;sqrt(x)&lt;/code&gt; or &lt;code&gt;x^(1/2)&lt;/code&gt;. Similarly, &lt;span class=&#34;math inline&#34;&gt;\(e^x\)&lt;/span&gt; can be written as &lt;span class=&#34;math inline&#34;&gt;\(exp(1)^x\)&lt;/span&gt; or &lt;span class=&#34;math inline&#34;&gt;\(exp(x)\)&lt;/span&gt;. These pairs are mathematically equivalent, but are they computationally equivalent. Write two test loops to compare formula with either &lt;span class=&#34;math inline&#34;&gt;\(\sqrt{x}\)&lt;/span&gt; or &lt;span class=&#34;math inline&#34;&gt;\(e^x\)&lt;/span&gt; of some form (the normal pdf, perhaps).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I find &lt;span class=&#34;math inline&#34;&gt;\(10^5 - 10^7\)&lt;/span&gt; give useful results, and that effect size increases with the number iterations; there is some overhead in the loop itself that contributes relatively less with increasing interations.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Rprof(&amp;quot;test1&amp;quot;)
## iteration code 1
Rprof(NULL)
Rprof(&amp;quot;test2&amp;quot;)
## iteration code 2
Rprof(NULL)
#execution time for test 1
summaryRprof(&amp;quot;test1&amp;quot;)$sampling.time
#execution time for test 2
summaryRprof(&amp;quot;test2&amp;quot;)$sampling.time
#functions called in test 1
summaryRprof(&amp;quot;test1&amp;quot;)$by.self
#functions called in test 2
summaryRprof(&amp;quot;test2&amp;quot;)$by.self&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;exercise-6&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Exercise 6&lt;/h1&gt;
&lt;p&gt;Write an improved Poisson pmf function, call this function &lt;code&gt;smart.pois&lt;/code&gt;, using the same parameters &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;lamba&lt;/code&gt; as before, but check &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; for the following conditions.
1. If &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; is negative, return a missing value (&lt;code&gt;NA&lt;/code&gt;, &lt;code&gt;.&lt;/code&gt;).
2. If &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; is non-integer, truncate &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; then proceed.
3. If &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; is too large for the factorial function, return the smallest possible numeric value for your machine. What &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; is too large? You could test the return value of &lt;code&gt;factorial&lt;/code&gt; against &lt;code&gt;Inf&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;You can reuse previously tested code writing this function as a wrapper for a previously written &lt;code&gt;pois.pmf&lt;/code&gt; and call that function only after testing the for specified conditions.&lt;/p&gt;
&lt;p&gt;Test this function by repeating the plots from Homework 4, Ex 4. How is the function different than &lt;code&gt;dpois&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt; You may not be able to call this new function exactly as in the last exercise (Hint - what are the rules for conditions in &lt;code&gt;if&lt;/code&gt; statements?). Instead, you might need to create a matrix or data table and use &lt;code&gt;apply&lt;/code&gt; functions, or write a loop for visit each element in a vector of &lt;code&gt;x&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;options(warn=-1)

smart.pois &amp;lt;- function(x, lambda){
  if(x&amp;lt;0){
    poisson.d &amp;lt;- NA
    # poisson.d &amp;lt;- &amp;quot;NA check&amp;quot;
  }else if(class(x) != &amp;quot;integer&amp;quot; &amp;amp; suppressWarnings(factorial(x)) != Inf){
    x &amp;lt;- trunc(x)
    poisson.d &amp;lt;- exp(-lambda)*(1/(factorial(round(x,0))))*exp(round(x,0)*(log(lambda)))
    # poisson.d &amp;lt;- &amp;quot;integer.check&amp;quot;
  }else if(suppressWarnings(factorial(x)) == Inf){
    smallest.value &amp;lt;- .Machine
    poisson.d &amp;lt;- smallest.value$double.xmin
    # poisson.d &amp;lt;- &amp;quot;factorial.check&amp;quot;
  }
  return(poisson.d)
}



x_a &amp;lt;- seq(-5, 5, 0.1)

smart.poisson.probability.x_a &amp;lt;- {}
lambda &amp;lt;- 1
for(i in 1:length(x_a)){
out &amp;lt;- smart.pois(x_a[i], lambda)
smart.poisson.probability.x_a &amp;lt;- c(smart.poisson.probability.x_a, out)
}
smart.poisson.probability.x_a&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   [1]          NA          NA          NA          NA          NA
##   [6]          NA          NA          NA          NA          NA
##  [11]          NA          NA          NA          NA          NA
##  [16]          NA          NA          NA          NA          NA
##  [21]          NA          NA          NA          NA          NA
##  [26]          NA          NA          NA          NA          NA
##  [31]          NA          NA          NA          NA          NA
##  [36]          NA          NA          NA          NA          NA
##  [41]          NA          NA          NA          NA          NA
##  [46]          NA          NA          NA          NA          NA
##  [51] 0.367879441 0.367879441 0.367879441 0.367879441 0.367879441
##  [56] 0.367879441 0.367879441 0.367879441 0.367879441 0.367879441
##  [61] 0.367879441 0.367879441 0.367879441 0.367879441 0.367879441
##  [66] 0.367879441 0.367879441 0.367879441 0.367879441 0.367879441
##  [71] 0.183939721 0.183939721 0.183939721 0.183939721 0.183939721
##  [76] 0.183939721 0.183939721 0.183939721 0.183939721 0.183939721
##  [81] 0.061313240 0.061313240 0.061313240 0.061313240 0.061313240
##  [86] 0.061313240 0.061313240 0.061313240 0.061313240 0.061313240
##  [91] 0.015328310 0.015328310 0.015328310 0.015328310 0.015328310
##  [96] 0.015328310 0.015328310 0.015328310 0.015328310 0.015328310
## [101] 0.003065662&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;norm.pdf &amp;lt;- function(x,mu=0,sigma=1){
  l&amp;lt;-1/(sigma*sqrt(pi*2))*exp(-((x-mu)^2)/(2*sigma^2))
  return(l)
}
normal.liklihood.x_a &amp;lt;- norm.pdf(x_a)


plot(x_a,normal.liklihood.x_a,type=&amp;quot;l&amp;quot;,col=&amp;quot;black&amp;quot;)
lines(x_a,smart.poisson.probability.x_a,col=&amp;quot;red&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/achalneupane.github.io/achal.github.io/post/Control_Structures_files/figure-html/unnamed-chunk-22-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# using base functions for norm.pdf and poisson probability for x_a
base.normal.liklihood.x_a &amp;lt;- dnorm(x_a,0, 1)
base.poiss.x_a &amp;lt;- dpois(x=x_a, lambda = lambda)

plot(x_a,base.normal.liklihood.x_a,type=&amp;quot;l&amp;quot;,col=&amp;quot;black&amp;quot;)
lines(x_a,base.poiss.x_a,col=&amp;quot;red&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/achalneupane.github.io/achal.github.io/post/Control_Structures_files/figure-html/unnamed-chunk-22-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Now
# Using mean and standard deviation for servings per recipe from 1936:
mu = 12.9; sigma = 13.3

# Now we find the upper and lower bounds as:
x.lower &amp;lt;- floor(mu-5*sigma)
x.upper &amp;lt;- ceiling(mu+5*sigma)

# Now taking the length of x_a as a reference, we create the equeally spaced
# sequence from lower to upper bound as followed:
spacer &amp;lt;- (x.upper - x.lower)/(length(x_a) - 1)

x_b &amp;lt;- seq(x.lower, x.upper, spacer)
# To show both x_a and x_b &amp;#39;s lenghts are equal:
length(x_a)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 101&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;length(x_b)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 101&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;norm.pdf &amp;lt;- function(x, mu = 12.9, sigma = 13.3){
  l&amp;lt;-1/(sigma*sqrt(pi*2))*exp(-((x-mu)^2)/(2*sigma^2))
  return(l)
}
normal.liklihood.x_b &amp;lt;- norm.pdf(x_b)


# Calculate poisson probability for x_b using smart.pois
#using sigma = 13.3 to compare the difference with the first plot

smart.poisson.probability.x_b &amp;lt;- {}
lambda &amp;lt;- 12
for(i in 1:length(x_a)){
  out &amp;lt;- smart.pois(x_a[i], lambda)
  smart.poisson.probability.x_b &amp;lt;- c(smart.poisson.probability.x_b, out)
}
# # smart.pois output for x_b
# smart.poisson.probability.x_b


# Repeating the plot from homework 4 Ex 4
plot(x_b,normal.liklihood.x_b,type=&amp;quot;l&amp;quot;,col=&amp;quot;black&amp;quot;)
lines(x_b,smart.poisson.probability.x_b,col=&amp;quot;red&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/achalneupane.github.io/achal.github.io/post/Control_Structures_files/figure-html/unnamed-chunk-22-3.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Using base functions for x_b
base.normal.liklihood.x_b &amp;lt;- dnorm(x_b,0, 1)
base.poiss.x_b &amp;lt;- dpois(x=x_b, lambda = 12)

plot(x_b,base.normal.liklihood.x_b,type=&amp;quot;l&amp;quot;,col=&amp;quot;black&amp;quot;)
lines(x_b,base.poiss.x_b,col=&amp;quot;red&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/achalneupane.github.io/achal.github.io/post/Control_Structures_files/figure-html/unnamed-chunk-22-4.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# FInally, we can also check how smart.pois and dpois functions behave for the following numerical values
# Testing three conditions with smart.pois
smart.pois(-1, 12)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] NA&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;smart.pois(2, 12) &lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.0004423833&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;smart.pois(2.233, 12)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.0004423833&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;smart.pois(300, 12)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 2.225074e-308&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#comparing same parameters with dpois
dpois(-1, 12)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dpois(2, 12)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.0004423833&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dpois(2.233, 12)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;dpois(300, 12)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1.140347e-296&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Smart pois is different from dpois as smart.pois gives NAs for negative values and dpois gives, zero. In other word, we can say that dpois cannot handle non-integer, but smart.pois can.Also, for non-integer, dpois gives zero. Also, I couldn’t find any similar pattern in the output of smart.poisson.probability.x_a and base.poiss.x_a&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Data manipulation</title>
      <link>/achalneupane.github.io/post/data_manipulation/</link>
      <pubDate>Thu, 15 Aug 2019 17:26:23 -0500</pubDate>
      <guid>/achalneupane.github.io/post/data_manipulation/</guid>
      <description>


&lt;script type=&#34;text/javascript&#34; src=&#34;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML&#34;&gt;
&lt;/script&gt;
&lt;p&gt;There are six exercises below. You are required to provide solutions for at least four of the five. You are required to solve at least one exercise in R, and at least one in SAS. You are required to provide five solutions, each solution will be worth 10 points. Thus, you may choose to provide both R and SAS solutions for a single exercise, or you may solve five of the sixth problems, mixing the languages as you wish.&lt;/p&gt;
&lt;p&gt;If you choose SAS for an exercise, you may use &lt;code&gt;IML&lt;/code&gt;, &lt;code&gt;DATA&lt;/code&gt; operations or &lt;code&gt;PROC SQL&lt;/code&gt; at your discretion.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Warning&lt;/em&gt; I will continue restricting the use of external libraries in R, particularly &lt;code&gt;tidyverse&lt;/code&gt; libraries. You may choose to use &lt;code&gt;ggplot2&lt;/code&gt;, but take care that the plots you produce are at least as readable as the equivalent plots in base R. You will be allowed to use whatever libraries tickle your fancy in the midterm and final projects.&lt;/p&gt;
&lt;div id=&#34;reuse&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Reuse&lt;/h2&gt;
&lt;p&gt;For many of these exercises, you may be able to reuse functions written in prior homework. Define those functions here.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;exercise-1.&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Exercise 1.&lt;/h1&gt;
&lt;div id=&#34;part-a.&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Part a.&lt;/h3&gt;
&lt;p&gt;Repeat the table from Homework 5, Exercise 2. The table will contain 30 rows, each corresponding to a unique combination of CV from &lt;span class=&#34;math inline&#34;&gt;\(8, 12, ..., 28\)&lt;/span&gt; and Diff from &lt;span class=&#34;math inline&#34;&gt;\(5,10, ... , 25\)&lt;/span&gt;. However, for this exercise you only need to calculate one column for required replicates (&lt;span class=&#34;math inline&#34;&gt;\(\alpha=0.05\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(\beta=0.2\)&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;Define the table in the space below. &lt;em&gt;Do not print this table&lt;/em&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;newdata.dat &amp;lt;- data.frame(CV = rep(seq(8,28,4), each = 5), Diff = rep(seq(5,25,5),6))
newdata.dat&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    CV Diff
## 1   8    5
## 2   8   10
## 3   8   15
## 4   8   20
## 5   8   25
## 6  12    5
## 7  12   10
## 8  12   15
## 9  12   20
## 10 12   25
## 11 16    5
## 12 16   10
## 13 16   15
## 14 16   20
## 15 16   25
## 16 20    5
## 17 20   10
## 18 20   15
## 19 20   20
## 20 20   25
## 21 24    5
## 22 24   10
## 23 24   15
## 24 24   20
## 25 24   25
## 26 28    5
## 27 28   10
## 28 28   15
## 29 28   20
## 30 28   25&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;combined &amp;lt;- function (cv, percent.diff, alpha = 0.05, beta = 0.2){
  cv &amp;lt;- cv
  percent.diff &amp;lt;- percent.diff
  n &amp;lt;- 2*(((cv/percent.diff)^2)*(qnorm((1-alpha/2)) + qnorm((1-beta)))^2) 
  n &amp;lt;- round(n,0)
  value &amp;lt;- list(CV = cv, PercentDiff= percent.diff, RequiredReplicates = round(n,0))
  return(value)
}
value &amp;lt;- combined(cv = newdata.dat$CV, percent.diff = newdata.dat$Diff)

# Adding RequiredReplicates column
newdata.dat$RequiredReplicates &amp;lt;- value$RequiredReplicates
# Print the table
# newdata.dat&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;part-b.&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Part b.&lt;/h3&gt;
&lt;p&gt;Create two subset tables, one that contains the combinations of CV and Diff that require the five largest number of replicates and one the contains the combinations of CV and Diff the five smallest number of replicates. You can determine the subset by ranking or sorting by required replicates. You can add a rank column to your table if you wish. Call one table &lt;code&gt;LargestFive&lt;/code&gt; and one table &lt;code&gt;SmallestFive&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Sort the table by decreasing Replicate values
ordered.new.dat &amp;lt;- newdata.dat[order(newdata.dat$RequiredReplicates,decreasing = TRUE),]

# Creating the required subset tables
LargestFive &amp;lt;- head(ordered.new.dat, 5)


# Now for smallest
SmallestFive &amp;lt;- tail(ordered.new.dat, 5)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;part-c.&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Part c.&lt;/h3&gt;
&lt;p&gt;Print &lt;code&gt;LargestFive&lt;/code&gt; sorted by required replicates in descending order, and print &lt;code&gt;SmallestFive&lt;/code&gt; in ascending order.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# adding rank for LargestFive table. Largest value gets rank 1
LargestFive$Rank &amp;lt;- rank(order(LargestFive$RequiredReplicates, decreasing = TRUE))
# printing larget five in descending order, Largest value gets the first rank
LargestFive&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    CV Diff RequiredReplicates Rank
## 26 28    5                492    1
## 21 24    5                362    2
## 16 20    5                251    3
## 11 16    5                161    4
## 27 28   10                123    5&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# adding rank for SmallestFive table. Smallest value gets rank 1
SmallestFive &amp;lt;- SmallestFive[order(SmallestFive$RequiredReplicates, decreasing = FALSE),]
SmallestFive$Rank &amp;lt;- rank((SmallestFive$RequiredReplicates),ties.method=&amp;quot;min&amp;quot;)
# printing smallest five in ascending order, smallest value gets the first rank
SmallestFive&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    CV Diff RequiredReplicates Rank
## 5   8   25                  2    1
## 4   8   20                  3    2
## 3   8   15                  4    3
## 10 12   25                  4    3
## 15 16   25                  6    5&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;exercise-2&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Exercise 2&lt;/h1&gt;
&lt;div id=&#34;part-a&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Part a&lt;/h3&gt;
&lt;p&gt;Go to &lt;a href=&#34;http://www.itl.nist.gov/div898/strd/anova/SiRstv.html&#34; class=&#34;uri&#34;&gt;http://www.itl.nist.gov/div898/strd/anova/SiRstv.html&lt;/a&gt; and use the data listed under &lt;code&gt;Data File in Table Format&lt;/code&gt; (&lt;a href=&#34;https://www.itl.nist.gov/div898/strd/anova/SiRstvt.dat&#34; class=&#34;uri&#34;&gt;https://www.itl.nist.gov/div898/strd/anova/SiRstvt.dat&lt;/a&gt;). You may reuse the file from Homework 6. Load the data into a table below.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;SiRstvt.dat &amp;lt;- read.table(&amp;quot;https://raw.githubusercontent.com/achalneupane/data/master/SiRstvt.dat&amp;quot;,
                          header = FALSE, skip = 59)
SiRstvt.dat&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##         V1       V2       V3       V4       V5
## 1 196.3052 196.3042 196.1303 196.2795 196.2119
## 2 196.1240 196.3825 196.2005 196.1748 196.1051
## 3 196.1890 196.1669 196.2889 196.1494 196.1850
## 4 196.2569 196.3257 196.0343 196.1485 196.0052
## 5 196.3403 196.0422 196.1811 195.9885 196.2090&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;part-b&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Part b&lt;/h3&gt;
&lt;p&gt;Reshape or transpose this table from the wide format to the long format. Make sure the resulting table has two columns - &lt;code&gt;Resistance&lt;/code&gt; and &lt;code&gt;Instrument&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;long.SiRstvt.dat &amp;lt;- with(reshape(SiRstvt.dat, idvar = &amp;quot;id&amp;quot;, varying = list(1:5),
             v.names = &amp;quot;Resistance&amp;quot;, timevar = &amp;quot;Instrument&amp;quot;, direction = &amp;quot;long&amp;quot;), 
             data.frame(Instrument, Resistance))

# the desired table in two column format:
long.SiRstvt.dat&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Instrument Resistance
## 1           1   196.3052
## 2           1   196.1240
## 3           1   196.1890
## 4           1   196.2569
## 5           1   196.3403
## 6           2   196.3042
## 7           2   196.3825
## 8           2   196.1669
## 9           2   196.3257
## 10          2   196.0422
## 11          3   196.1303
## 12          3   196.2005
## 13          3   196.2889
## 14          3   196.0343
## 15          3   196.1811
## 16          4   196.2795
## 17          4   196.1748
## 18          4   196.1494
## 19          4   196.1485
## 20          4   195.9885
## 21          5   196.2119
## 22          5   196.1051
## 23          5   196.1850
## 24          5   196.0052
## 25          5   196.2090&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;part-c&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Part c&lt;/h3&gt;
&lt;p&gt;To confirm that the table was reshaped correctly, use &lt;code&gt;aggregate&lt;/code&gt; or &lt;code&gt;tapply&lt;/code&gt; to calculate mean &lt;code&gt;Resistance&lt;/code&gt; grouped by &lt;code&gt;Instrument&lt;/code&gt; from the long table, and use &lt;code&gt;apply&lt;/code&gt; or &lt;code&gt;colMeans&lt;/code&gt; to calculate column means from the wide table. Print and compare the results.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Resistance mean grouped by Instrument from long format
tapply(long.SiRstvt.dat$Resistance, long.SiRstvt.dat$Instrument, mean)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        1        2        3        4        5 
## 196.2431 196.2443 196.1670 196.1481 196.1432&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# aggregate(long.SiRstvt.dat$Resistance, by = list(long.SiRstvt.dat$Instrument), mean)

# Resistance mean from wide format
colMeans(SiRstvt.dat)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       V1       V2       V3       V4       V5 
## 196.2431 196.2443 196.1670 196.1481 196.1432&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that the reshaped table should be equivalent to the file linked under ‘Data File in Two-Column Format’.&lt;/p&gt;
&lt;p&gt;Yes, the reshaped table is equivalent to the linked data file in Two-column format&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;exercise-3&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Exercise 3&lt;/h1&gt;
&lt;p&gt;Create an ordered treatment pairs table from the &lt;code&gt;pumpkin.csv&lt;/code&gt;. In the submitted work print the table only once at the end of the exercise.&lt;/p&gt;
&lt;div id=&#34;part-a.-1&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Part a.&lt;/h3&gt;
&lt;p&gt;Read the pumpkin data and compute mean &lt;span class=&#34;math inline&#34;&gt;\(m_i\)&lt;/span&gt;, standard deviation &lt;span class=&#34;math inline&#34;&gt;\(s_i\)&lt;/span&gt; and count &lt;span class=&#34;math inline&#34;&gt;\(n_i\)&lt;/span&gt; for each level &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; of &lt;code&gt;Class&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pumpkins.dat =read.table(&amp;quot;https://raw.githubusercontent.com/achalneupane/data/master/pumpkins.csv&amp;quot;,
                         header = T, sep = &amp;quot;,&amp;quot;)
# pumpkin.table &amp;lt;- aggregate(pumpkins.dat$Price, by = list(pumpkins.dat$Class),
# FUN = function(x) c(Mean = mean(x), SD = sd(x), Count.n = length(x)))

pumpkin.mean &amp;lt;- setNames(aggregate(pumpkins.dat$Price, 
       by = list(pumpkins.dat$Class), FUN =  mean), c(&amp;quot;Class&amp;quot;, &amp;quot;Mean&amp;quot;))
pumpkin.sd &amp;lt;- setNames(aggregate(pumpkins.dat$Price, 
       by = list(pumpkins.dat$Class), FUN =  sd), c(&amp;quot;Class&amp;quot;, &amp;quot;SD&amp;quot;))
pumpkin.count &amp;lt;- setNames(aggregate(pumpkins.dat$Price, 
       by = list(pumpkins.dat$Class), FUN =  length), c(&amp;quot;Class&amp;quot;, &amp;quot;Counts&amp;quot;))


merged.class &amp;lt;- Reduce(function(x, y) merge(x, y, all=TRUE), 
                 list(pumpkin.mean, pumpkin.sd, pumpkin.count))

# This table includes mean, sd and counts for all Class
merged.class&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        Class     Mean        SD Counts
## 1       Blue 175.0000  0.000000      6
## 2 Cinderella 218.4286 17.924445      7
## 3     Howden 127.9000  3.695342     10
## 4        Pie 212.0000 18.565200      7&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;part-b-1&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Part b&lt;/h3&gt;
&lt;p&gt;Create a table over all possible pairs &lt;span class=&#34;math inline&#34;&gt;\(i,j\)&lt;/span&gt; of &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; Classes from these data. Let one table column be &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; and another column be &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt;. Let &lt;span class=&#34;math inline&#34;&gt;\(i = 1, 2, \dots (k-1)\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(j = i+1, i+2, \dots k\)&lt;/span&gt;. There will be &lt;span class=&#34;math inline&#34;&gt;\((k \times (k-1))/2\)&lt;/span&gt; rows in this table. I usually create an empty table, then fill the table using a pair of nested loops, the outer loop over &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; and the inner loop over &lt;span class=&#34;math inline&#34;&gt;\(j\)&lt;/span&gt;. Use a counter variable to keep track of the current row and increment the counter in each step of the inner loop.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# There are 4 classes, 4 choose 2:
class.level &amp;lt;- levels(pumpkins.dat$Class)
comb.matrix &amp;lt;- as.data.frame(t(combn(4,2)))
# This is how the combination matrix would look like
comb.matrix&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   V1 V2
## 1  1  2
## 2  1  3
## 3  1  4
## 4  2  3
## 5  2  4
## 6  3  4&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Creating an empty matrix so we could fill in with the required values
collect &amp;lt;- data.frame(col1 = numeric(6), col2 = numeric(6))
for (i in 1:length(comb.matrix$V1)){
collect$col1[i] &amp;lt;-   class.level[comb.matrix$V1[i]]
collect$col2[i] &amp;lt;-   class.level[comb.matrix$V2[i]]
}
# The possible pairs table
collect&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##         col1       col2
## 1       Blue Cinderella
## 2       Blue     Howden
## 3       Blue        Pie
## 4 Cinderella     Howden
## 5 Cinderella        Pie
## 6     Howden        Pie&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Now we merge the possible pairs (collect) table with the merged.class table with mean,
# sd and counts values we created above
collect &amp;lt;- merge(collect, merged.class, by.x = &amp;quot;col1&amp;quot;, by.y = &amp;quot;Class&amp;quot; )
collect &amp;lt;- merge(collect, merged.class, by.x = &amp;quot;col2&amp;quot;, by.y = &amp;quot;Class&amp;quot; )
collect&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##         col2       col1   Mean.x      SD.x Counts.x   Mean.y      SD.y
## 1 Cinderella       Blue 175.0000  0.000000        6 218.4286 17.924445
## 2     Howden       Blue 175.0000  0.000000        6 127.9000  3.695342
## 3     Howden Cinderella 218.4286 17.924445        7 127.9000  3.695342
## 4        Pie       Blue 175.0000  0.000000        6 212.0000 18.565200
## 5        Pie Cinderella 218.4286 17.924445        7 212.0000 18.565200
## 6        Pie     Howden 127.9000  3.695342       10 212.0000 18.565200
##   Counts.y
## 1        7
## 2       10
## 3       10
## 4        7
## 5        7
## 6        7&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;part-c.-1&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Part c.&lt;/h3&gt;
&lt;p&gt;Calculate Cohen’s &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt; for each Class pair in this table. Use a pooled standard deviation given by&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
s_{pooled} = \sqrt{\frac{\sum_i (n_i-1)s_i^2}{N-k}}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;You may add Class means to the table if you wish. Sort the table by &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt; in descending order and print the table.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cohen.d &amp;lt;- function(m1,s1,m2,s2){
  cohens_d &amp;lt;-(abs(m1-m2)/sqrt((s1^2+s2^2)/2))
return(cohens_d)
}


for(i in 1:nrow(collect)) {
  collect$cohens_d[i] &amp;lt;-
  cohen.d(
  m1 = collect$Mean.x[i],
  s1 = collect$SD.x[i],
  m2 = collect$Mean.y[i],
  s2 = collect$SD.y[i]
  )
}

collect &amp;lt;- collect[order(collect$cohens_d, decreasing = TRUE),]
# This  is the final table we need
collect&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##         col2       col1   Mean.x      SD.x Counts.x   Mean.y      SD.y
## 2     Howden       Blue 175.0000  0.000000        6 127.9000  3.695342
## 3     Howden Cinderella 218.4286 17.924445        7 127.9000  3.695342
## 6        Pie     Howden 127.9000  3.695342       10 212.0000 18.565200
## 1 Cinderella       Blue 175.0000  0.000000        6 218.4286 17.924445
## 4        Pie       Blue 175.0000  0.000000        6 212.0000 18.565200
## 5        Pie Cinderella 218.4286 17.924445        7 212.0000 18.565200
##   Counts.y   cohens_d
## 2       10 18.0252467
## 3       10  6.9954609
## 6        7  6.2831022
## 1        7  3.4264534
## 4        7  2.8184938
## 5        7  0.3522961&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;exercise-4.&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Exercise 4.&lt;/h1&gt;
&lt;div id=&#34;part-a.-2&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Part a.&lt;/h3&gt;
&lt;p&gt;Download the two files from D2L &lt;code&gt;ncaa2018.csv&lt;/code&gt; and &lt;code&gt;ncaa2019.csv&lt;/code&gt;, and read into data frames or tables. &lt;code&gt;ncaa2018.csv&lt;/code&gt; comes from the same source as &lt;code&gt;elo.csv&lt;/code&gt; from Homework 5, while &lt;code&gt;ncaa2019.csv&lt;/code&gt; is the corresponding more recent data. These tables do not contain identical sets of columns, but we will be able to merge &lt;code&gt;Finish&lt;/code&gt; by individual wrestlers. &lt;em&gt;Do not print these tables&lt;/em&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ncaa2018.dat =read.table(&amp;quot;https://raw.githubusercontent.com/achalneupane/data/master/ncaa2018.csv&amp;quot;,
                         header = T, sep = &amp;quot;,&amp;quot;)
head(ncaa2018.dat)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   Weight     Last  First Conference  Finish     ELO
## 1    125   Atkins Thayer        ACC      NQ 1297.06
## 2    125  Bentley     LJ        ACC      NQ 1343.66
## 3    125    Fausz   Sean        ACC cons 24 1380.84
## 4    125    Hayes  Louie        ACC cons 12 1404.51
## 5    125 Norstrem   Kyle        ACC cons 24 1348.79
## 6    125  Bianchi   Paul     Big 12 cons 32 1312.73&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ncaa2019.dat =read.table(&amp;quot;https://raw.githubusercontent.com/achalneupane/data/master/ncaa2019.csv&amp;quot;,
                         header = T, sep = &amp;quot;,&amp;quot;)
head(ncaa2019.dat)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   Weight       Last     First Finish
## 1    125        Lee   Spencer      1
## 2    125    Mueller      Jack      2
## 3    125     Rivera Sebastian      3
## 4    125     Arujau    Vitali      4
## 5    125 Piccininni  Nicholas      5
## 6    125      Glory       Pat      6&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;merged.ncaa &amp;lt;- merge(ncaa2018.dat, ncaa2019.dat, by = c(&amp;quot;Last&amp;quot;, &amp;quot;First&amp;quot;), all = FALSE)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;part-b.-1&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Part b.&lt;/h3&gt;
&lt;p&gt;The tables list the wrestlers qualifying for the NCAA 2018 and 2019 National Champions, respectively. Merge the tables into a single table that contains only those wrestlers who qualified for both tournaments. Use the columns &lt;code&gt;Last&lt;/code&gt; and &lt;code&gt;First&lt;/code&gt; to merge on; neither is unique for all wrestlers.&lt;/p&gt;
&lt;p&gt;The merged table should have columns corresponding to &lt;code&gt;Finish&lt;/code&gt; 2018 and &lt;code&gt;Finish&lt;/code&gt; 2019 - you can leave the column names as the defaults produced by R or SAS. To check the merge, print the number of rows in the table, and determine if there are any missing values in either &lt;code&gt;Finish&lt;/code&gt; column (&lt;code&gt;sum&lt;/code&gt; or &lt;code&gt;any&lt;/code&gt; are sufficient. &lt;em&gt;Do not print the table&lt;/em&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;merged.common.players &amp;lt;- merge(ncaa2018.dat, ncaa2019.dat, by=c(&amp;quot;Last&amp;quot;,&amp;quot;First&amp;quot;), all = FALSE) 
# numer of rows
print(nrow(merged.common.players))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 198&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sum(is.na(merged.common.players$Finish.x))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;part-c.-2&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Part c.&lt;/h3&gt;
&lt;p&gt;Print a contingency table comparing &lt;code&gt;Weight&lt;/code&gt; for 2018 and &lt;code&gt;Weight&lt;/code&gt; for 2019. The sum of all cells in this table will be equal to the total number of wrestlers that competed in both tournaments; the sum of the main diagonal will be the number of wrestlers that competed in the same weight class for both. How many wrestlers changed weight classes?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;weight_contingency &amp;lt;-
  table(
  merged.common.players$Weight.x,
  merged.common.players$Weight.y,
  dnn = c(&amp;quot;Weight for 2018&amp;quot;, &amp;quot;Weight for 2019&amp;quot;)
  )

weight_contingency&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                Weight for 2019
## Weight for 2018 125 133 141 149 157 165 174 184 197 285
##             125  20   2   0   0   0   0   0   0   0   0
##             133   2  17   6   0   0   0   0   0   0   0
##             141   0   2  14   5   0   0   0   0   0   0
##             149   0   0   2  12   4   0   0   0   0   0
##             157   0   0   0   3  12   2   0   0   0   0
##             165   0   0   0   0   1  17   3   0   0   0
##             174   0   0   0   0   0   1  18   1   0   0
##             184   0   0   0   0   0   0   0  14   4   0
##             197   0   0   0   0   0   0   0   4  15   0
##             285   0   0   0   0   0   0   0   0   0  17&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# The sum of all cells in this table will be equal to the total number of
# wrestlers that competed in both tournaments
sum(weight_contingency)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 198&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Diagonal sum
sum(diag(weight_contingency))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 156&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# How many wrestlers changed weight classes? This gives:
sum(weight_contingency)-sum(diag(weight_contingency))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 42&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The sum of all cells in this table will be equal to the total number of wrestlers that competed in both tournaments: which is 198&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;exercise-5&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Exercise 5&lt;/h1&gt;
&lt;div id=&#34;background&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Background&lt;/h3&gt;
&lt;p&gt;I’m working on software that produces a repeated measures analysis. To test my code, I use published data and compare results. For one analysis, I used data from &lt;strong&gt;Contemporary Statistical Models for the Plant and Soil Sciences&lt;/strong&gt;, Oliver Schabenberger and Francis J. Pierce, 2001. These data are measurements of the diameter of individual apples from selected apple trees.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;part-a.-3&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Part a.&lt;/h2&gt;
&lt;p&gt;Download the &lt;code&gt;AppleData.csv&lt;/code&gt; if you choose R, the SAS data is included in the SAS template. Note the file include comments for the data; you may need to specify comment character in import. &lt;em&gt;Do not print this table&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;To simplify this exercise, create a subset of the &lt;code&gt;AppleData&lt;/code&gt; including only trees number 3, 7 and 10.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;AppleData=read.csv(&amp;quot;https://raw.githubusercontent.com/achalneupane/data/master/AppleData.csv&amp;quot;, 
                   header = TRUE, comment.char = &amp;#39;#&amp;#39;)

#subsetting data to include tree 3, 7 and 10
AppleData&amp;lt;- AppleData[AppleData$tree %in% c(3,7,10),]
AppleData&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     tree apple time diam
## 111    3     1    1 2.91
## 112    3     1    2 3.00
## 113    3     1    3 3.02
## 114    3     1    4 3.03
## 115    3    10    1 2.81
## 116    3    10    2 2.89
## 117    3    10    3 2.87
## 118    3    10    4 2.93
## 119    3    10    5 2.93
## 120    3    10    6 2.94
## 121    3    16    1 2.95
## 122    3    16    2 3.00
## 123    3    16    3 3.03
## 124    3    16    4 3.03
## 125    3    16    5 3.06
## 126    3    16    6 3.08
## 127    3    17    1 2.79
## 128    3    17    2 2.83
## 129    3    17    3 2.86
## 130    3    17    4 2.87
## 131    3    17    5 2.87
## 132    3    17    6 2.93
## 133    3    18    1 2.98
## 134    3    18    2 3.03
## 135    3    18    3 3.06
## 136    3    18    4 3.09
## 137    3    18    5 3.09
## 138    3    18    6 3.09
## 139    3    20    1 2.76
## 140    3    20    2 2.82
## 141    3    20    3 2.83
## 142    3    20    4 2.85
## 143    3    20    5 2.86
## 144    3    20    6 2.88
## 145    3    22    1 2.76
## 146    3    22    2 2.82
## 147    3    22    3 2.85
## 148    3    22    4 2.87
## 149    3    22    5 2.90
## 150    3    22    6 2.90
## 151    3    23    1 2.76
## 152    3    23    2 2.78
## 153    3    23    3 2.77
## 154    3    23    4 2.79
## 155    3    23    5 2.79
## 156    3    23    6 2.79
## 157    3    24    1 2.80
## 158    3    24    2 2.85
## 159    3    24    3 2.87
## 160    3    24    4 2.87
## 161    3    24    5 2.89
## 162    3    24    6 2.92
## 317    7     2    1 2.79
## 318    7     2    2 2.89
## 319    7     2    3 2.89
## 320    7     2    4 2.91
## 321    7     2    5 2.91
## 322    7     2    6 2.95
## 323    7     4    1 2.80
## 324    7     4    2 2.81
## 325    7     4    3 2.85
## 326    7     4    4 2.91
## 327    7     4    5 2.92
## 328    7     4    6 2.96
## 329    7     9    1 3.06
## 330    7     9    2 3.15
## 331    7     9    3 3.15
## 332    7     9    4 3.23
## 333    7     9    5 3.27
## 334    7     9    6 3.31
## 335    7    25    1 2.84
## 336    7    25    2 2.86
## 337    7    25    3 2.88
## 338    7    25    4 2.93
## 339    7    25    5 2.93
## 340    7    25    6 2.96
## 399   10     2    1 2.92
## 400   10     2    2 2.95
## 401   10     2    3 3.00
## 402   10     2    4 3.01
## 403   10     2    5 3.07
## 404   10     5    1 2.87
## 405   10     5    2 2.89
## 406   10     5    3 2.94
## 407   10     5    4 2.95
## 408   10     5    5 3.01
## 409   10     5    6 3.02
## 410   10     8    1 2.76
## 411   10     8    2 2.81
## 412   10     8    3 2.86
## 413   10     8    4 2.90
## 414   10     9    1 2.91
## 415   10     9    2 3.01
## 416   10     9    3 3.07
## 417   10     9    4 3.09
## 418   10     9    5 3.11
## 419   10    10    1 2.88
## 420   10    10    2 2.88
## 421   10    10    3 2.92
## 422   10    10    4 2.97
## 423   10    10    5 2.97
## 424   10    10    6 2.99
## 425   10    17    1 3.00
## 426   10    17    2 3.05
## 427   10    17    3 3.05
## 428   10    17    4 3.06
## 429   10    17    5 3.11
## 430   10    18    1 2.85
## 431   10    18    2 2.87
## 432   10    18    3 2.91
## 433   10    18    4 2.95
## 434   10    18    5 2.98
## 435   10    18    6 3.00
## 436   10    21    1 2.76
## 437   10    21    2 2.83
## 438   10    21    3 2.84
## 439   10    21    4 2.87
## 440   10    21    5 2.88
## 441   10    21    6 2.91
## 442   10    22    1 3.25
## 443   10    22    2 3.34
## 444   10    22    3 3.34
## 445   10    22    4 3.38
## 446   10    22    5 3.47
## 447   10    23    1 3.00
## 448   10    23    2 3.06
## 449   10    23    3 3.08
## 450   10    23    4 3.14
## 451   10    23    5 3.18&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;part-b.-2&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Part b.&lt;/h2&gt;
&lt;p&gt;Reshape or transpose this data from the long form to the wide form. Call this data &lt;code&gt;AppleWide&lt;/code&gt;. This table should have one column for &lt;code&gt;Tree&lt;/code&gt;, one column for &lt;code&gt;Apple&lt;/code&gt; and six columns, &lt;code&gt;diam.1&lt;/code&gt; - &lt;code&gt;diam.6&lt;/code&gt;. The values in the time columns come from &lt;code&gt;diam&lt;/code&gt; in &lt;code&gt;AppleData&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;AppleData1&amp;lt;- as.data.frame(AppleData)

AppleWide&amp;lt;- reshape(AppleData1, direction = &amp;quot;wide&amp;quot;, idvar = c(&amp;quot;apple&amp;quot;,&amp;quot;tree&amp;quot;), timevar = &amp;quot;time&amp;quot;)
AppleWide&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     tree apple diam.1 diam.2 diam.3 diam.4 diam.5 diam.6
## 111    3     1   2.91   3.00   3.02   3.03     NA     NA
## 115    3    10   2.81   2.89   2.87   2.93   2.93   2.94
## 121    3    16   2.95   3.00   3.03   3.03   3.06   3.08
## 127    3    17   2.79   2.83   2.86   2.87   2.87   2.93
## 133    3    18   2.98   3.03   3.06   3.09   3.09   3.09
## 139    3    20   2.76   2.82   2.83   2.85   2.86   2.88
## 145    3    22   2.76   2.82   2.85   2.87   2.90   2.90
## 151    3    23   2.76   2.78   2.77   2.79   2.79   2.79
## 157    3    24   2.80   2.85   2.87   2.87   2.89   2.92
## 317    7     2   2.79   2.89   2.89   2.91   2.91   2.95
## 323    7     4   2.80   2.81   2.85   2.91   2.92   2.96
## 329    7     9   3.06   3.15   3.15   3.23   3.27   3.31
## 335    7    25   2.84   2.86   2.88   2.93   2.93   2.96
## 399   10     2   2.92   2.95   3.00   3.01   3.07     NA
## 404   10     5   2.87   2.89   2.94   2.95   3.01   3.02
## 410   10     8   2.76   2.81   2.86   2.90     NA     NA
## 414   10     9   2.91   3.01   3.07   3.09   3.11     NA
## 419   10    10   2.88   2.88   2.92   2.97   2.97   2.99
## 425   10    17   3.00   3.05   3.05   3.06   3.11     NA
## 430   10    18   2.85   2.87   2.91   2.95   2.98   3.00
## 436   10    21   2.76   2.83   2.84   2.87   2.88   2.91
## 442   10    22   3.25   3.34   3.34   3.38   3.47     NA
## 447   10    23   3.00   3.06   3.08   3.14   3.18     NA&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;part-c.-3&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Part c.&lt;/h2&gt;
&lt;p&gt;To confirm that you’ve reshaped correctly, print column means for the wide data set and use an aggregate or apply function to compute &lt;code&gt;time&lt;/code&gt; means for the long format.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;meanWide= colMeans(AppleWide, na.rm = T)
meanWide&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      tree     apple    diam.1    diam.2    diam.3    diam.4    diam.5 
##  6.739130 14.173913  2.878696  2.931304  2.953913  2.983913  3.009524 
##    diam.6 
##  2.976875&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;meanLong = tapply(AppleData1$diam, AppleData1$time, mean, na.rm=T)
meanLong&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        1        2        3        4        5        6 
## 2.878696 2.931304 2.953913 2.983913 3.009524 2.976875&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;part-d.&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Part d.&lt;/h2&gt;
&lt;p&gt;I choose this example for a test case because it shows a case where the best repeated measures model is an auto-regressive model - each measure is correlated with the preceding measure. We can estimate the degree of using the following R code. You don’t need to evaluate this code for this exercise; it’s provided as a motivation for reshaping the data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mult.lm &amp;lt;- lm(cbind(diam.1, diam.2, diam.3, diam.4, diam.5, diam.6) ~ tree, data=AppleWide)
mult.manova &amp;lt;- manova(mult.lm)
print(cov2cor(estVar(mult.lm)))&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;exercise-6&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Exercise 6&lt;/h1&gt;
&lt;p&gt;This is an exercise in computing the Wilcoxon Signed Rank test. We will be using an example from NIST (&lt;code&gt;NATR332.DAT&lt;/code&gt;). See &lt;a href=&#34;https://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/signrank.htm&#34; class=&#34;uri&#34;&gt;https://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/signrank.htm&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;The data are provided:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;NATR332.DAT &amp;lt;- data.frame(
  Y1 = c(146,141,135,142,140,143,138,137,142,136),
  Y2 = c(141,143,139,139,140,141,138,140,142,138)
)&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;part-a.-4&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Part a.&lt;/h2&gt;
&lt;p&gt;Add a column &lt;code&gt;Difference&lt;/code&gt; that is the difference between &lt;code&gt;Y1&lt;/code&gt; and &lt;code&gt;Y2&lt;/code&gt;. For further analysis, exclude any rows where the difference is 0.&lt;/p&gt;
&lt;p&gt;Next add add the column &lt;code&gt;Rank&lt;/code&gt;, which will be the rank of the absolute value of &lt;code&gt;Difference&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#adding column Difference in the data frame 
NATR332.DAT$Difference &amp;lt;- NATR332.DAT$Y1-NATR332.DAT$Y2
NATR332.DAT&amp;lt;- NATR332.DAT[NATR332.DAT$Difference != 0,]
NATR332.DAT&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     Y1  Y2 Difference
## 1  146 141          5
## 2  141 143         -2
## 3  135 139         -4
## 4  142 139          3
## 6  143 141          2
## 8  137 140         -3
## 10 136 138         -2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Next, we rank and add a column in the data frame 
NATR332.DAT$Rank &amp;lt;- rank(abs(NATR332.DAT$Difference))
NATR332.DAT&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     Y1  Y2 Difference Rank
## 1  146 141          5  7.0
## 2  141 143         -2  2.0
## 3  135 139         -4  6.0
## 4  142 139          3  4.5
## 6  143 141          2  2.0
## 8  137 140         -3  4.5
## 10 136 138         -2  2.0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;part-c.-4&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Part c.&lt;/h2&gt;
&lt;p&gt;Add the column &lt;code&gt;SignedRank&lt;/code&gt; by applying the sign (+ or -) of &lt;code&gt;Difference&lt;/code&gt;, to to &lt;code&gt;Rank&lt;/code&gt; (that is, if &lt;code&gt;Difference&lt;/code&gt; is &amp;lt; 0, then &lt;code&gt;SignedRank&lt;/code&gt; is &lt;code&gt;-Rank&lt;/code&gt;, otherwise &lt;code&gt;SignedRank&lt;/code&gt; is &lt;code&gt;Rank&lt;/code&gt;).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;SignedRank &amp;lt;- ifelse(NATR332.DAT$Difference &amp;lt; 0, - NATR332.DAT$Rank, + NATR332.DAT$Rank)
 
NATR332.DAT$SignedRank&amp;lt;- round(SignedRank, 0)
NATR332.DAT&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     Y1  Y2 Difference Rank SignedRank
## 1  146 141          5  7.0          7
## 2  141 143         -2  2.0         -2
## 3  135 139         -4  6.0         -6
## 4  142 139          3  4.5          4
## 6  143 141          2  2.0          2
## 8  137 140         -3  4.5         -4
## 10 136 138         -2  2.0         -2&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;part-d.-1&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Part d.&lt;/h2&gt;
&lt;p&gt;Compute the sum of the positive ranks, and the absolute value of the sum of the negative ranks. Let &lt;span class=&#34;math inline&#34;&gt;\(W\)&lt;/span&gt; be the minimum of these two sums. Print &lt;span class=&#34;math inline&#34;&gt;\(W\)&lt;/span&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;positive.sum = sum(NATR332.DAT$SignedRank[NATR332.DAT$SignedRank &amp;gt; 0])
positive.sum&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 13&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;abs.negative.sum = abs(sum(NATR332.DAT$SignedRank[NATR332.DAT$SignedRank &amp;lt; 0]))
abs.negative.sum&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 14&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Let $W$ be the minimum of these two sums.
W = min(abs.negative.sum, positive.sum)
W&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 13&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The expected mean of &lt;span class=&#34;math inline&#34;&gt;\(W\)&lt;/span&gt; is calculated by&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[\mu_W = N_r*(N_r+1)/4\]&lt;/span&gt;
with a standard deviation of&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\sigma_W = \sqrt{\frac{N_r(N_r+1)(2N_r+1)}{6}}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;where &lt;span class=&#34;math inline&#34;&gt;\(N_r\)&lt;/span&gt; is the number of ranked values (excluding differences of 0). Calculate a &lt;span class=&#34;math inline&#34;&gt;\(z\)&lt;/span&gt; score by&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[z_W = (W - \mu_W)/\sigma_W\]&lt;/span&gt;
Print both &lt;span class=&#34;math inline&#34;&gt;\(\mu_W\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(z_W\)&lt;/span&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mu_W = (7*(7+1))/4
mu_W&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 14&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sigma_W = sqrt((7*(7+1)*(2*7+1))/6)
sigma_W&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 11.83216&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;z_W = (W - mu_W)/sigma_W
z_W&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] -0.08451543&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;p&amp;lt;- pnorm(z_W, lower.tail = TRUE)
p&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.4663233&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The p-value matches with the value calculated using Wilcoxon test below.&lt;/p&gt;
&lt;p&gt;The NIST page gives a p-values based on the continuity correction. We are not computing this correction. You can compute the &lt;span class=&#34;math inline&#34;&gt;\(P(z&amp;gt;z_W)\)&lt;/span&gt; of your &lt;span class=&#34;math inline&#34;&gt;\(z_W\)&lt;/span&gt; (using the normal distribution) and compare it to&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;wilcox.test(NATR332.DAT$Y1, NATR332.DAT$Y2, paired = TRUE, correct = FALSE, alternative = &amp;quot;less&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in wilcox.test.default(NATR332.DAT$Y1, NATR332.DAT$Y2, paired =
## TRUE, : cannot compute exact p-value with ties&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##  Wilcoxon signed rank test
## 
## data:  NATR332.DAT$Y1 and NATR332.DAT$Y2
## V = 13.5, p-value = 0.466
## alternative hypothesis: true location shift is less than 0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;while the corrected p-values are given by&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;wilcox.test(NATR332.DAT$Y1, NATR332.DAT$Y2, paired = TRUE, correct = TRUE, alternative = &amp;quot;less&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in wilcox.test.default(NATR332.DAT$Y1, NATR332.DAT$Y2, paired =
## TRUE, : cannot compute exact p-value with ties&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##  Wilcoxon signed rank test with continuity correction
## 
## data:  NATR332.DAT$Y1 and NATR332.DAT$Y2
## V = 13.5, p-value = 0.5
## alternative hypothesis: true location shift is less than 0&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;wilcox.test(NATR332.DAT$Y1, NATR332.DAT$Y2, paired = TRUE, correct = TRUE, alternative = &amp;quot;greater&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Warning in wilcox.test.default(NATR332.DAT$Y1, NATR332.DAT$Y2, paired =
## TRUE, : cannot compute exact p-value with ties&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##  Wilcoxon signed rank test with continuity correction
## 
## data:  NATR332.DAT$Y1 and NATR332.DAT$Y2
## V = 13.5, p-value = 0.5677
## alternative hypothesis: true location shift is greater than 0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Data tables</title>
      <link>/achalneupane.github.io/post/data_tables/</link>
      <pubDate>Thu, 15 Aug 2019 17:26:23 -0500</pubDate>
      <guid>/achalneupane.github.io/post/data_tables/</guid>
      <description>


&lt;script type=&#34;text/javascript&#34; src=&#34;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML&#34;&gt;
&lt;/script&gt;
&lt;div id=&#34;exercise-1.&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Exercise 1.&lt;/h1&gt;
&lt;p&gt;This exercise will repeat Exercise 1 from Homework 4, but using a data table.&lt;/p&gt;
&lt;div id=&#34;part-a.&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Part a.&lt;/h3&gt;
&lt;p&gt;Create a data table or frame with 3 defined columns:
- Let &lt;code&gt;M1&lt;/code&gt; be a sequence of means from 320-420, incremented by 10.
- Let &lt;code&gt;M2&lt;/code&gt; be 270.
- Let &lt;code&gt;SD&lt;/code&gt; be a pooled standard deviation of 150.&lt;/p&gt;
&lt;p&gt;Define and print the tabke in the space below. Do not create individual vectors for this exercise, outside of the data frame, if you use R. In SAS, you may use IML to create a matrix and save the matrix as a data table, or define a sequence (&lt;code&gt;DO&lt;/code&gt;) in the DATA step. I’ve included framework code in the SAS template.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;M.table &amp;lt;- data.frame(M1= seq(320, 420, 10), M2= 270, SD = 150)
M.table&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     M1  M2  SD
## 1  320 270 150
## 2  330 270 150
## 3  340 270 150
## 4  350 270 150
## 5  360 270 150
## 6  370 270 150
## 7  380 270 150
## 8  390 270 150
## 9  400 270 150
## 10 410 270 150
## 11 420 270 150&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Add to the data table a column containing required replicates, letting &lt;span class=&#34;math inline&#34;&gt;\(s_i = s_j = s_{pooled}\)&lt;/span&gt;. Also add a column containing Cohen’s &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;To show results, either print the table or plot required replicates versus &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt; as in the previous homework.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Using combined function from last week to calculate effect size and Required replicates
combined &amp;lt;- function (m1,m2 = 270, s_pooled = 150, alpha = 0.05, beta = 0.2){
  cv &amp;lt;- (s_pooled)/((m1+m2)/2)
  percent.diff &amp;lt;- ((m1-m2)/((m1+m2)/2))
  cohens_d &amp;lt;-(abs(m1-m2)/(s_pooled))
  n &amp;lt;- 2*(((cv/percent.diff)^2)*(qnorm((1-alpha/2)) + qnorm((1-beta)))^2) 
  n &amp;lt;- round(n,0)
  value &amp;lt;- (list(CV = cv, PercentDiff= percent.diff, RequiredReplicates = round(n,0), EffectSize = cohens_d))
  return(value)
}

data &amp;lt;- combined(m1 = M.table$M1, s_pooled = M.table$SD)
M.table$RequiredReplicates &amp;lt;- data$RequiredReplicates
M.table$EffectSize &amp;lt;- data$EffectSize
# Wanted table
M.table&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##     M1  M2  SD RequiredReplicates EffectSize
## 1  320 270 150                141  0.3333333
## 2  330 270 150                 98  0.4000000
## 3  340 270 150                 72  0.4666667
## 4  350 270 150                 55  0.5333333
## 5  360 270 150                 44  0.6000000
## 6  370 270 150                 35  0.6666667
## 7  380 270 150                 29  0.7333333
## 8  390 270 150                 25  0.8000000
## 9  400 270 150                 21  0.8666667
## 10 410 270 150                 18  0.9333333
## 11 420 270 150                 16  1.0000000&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Now plotting
# attach(M.table)
# cal.lm &amp;lt;- lm(M.table$RequiredReplicates ~ M.table$EffectSize)
# plot(RequiredReplicates ~ EffectSize)
plot(M.table$RequiredReplicates ~ M.table$EffectSize)
# abline(cal.lm)
abline(v = 0.5, col= &amp;#39;red&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/achalneupane.github.io/achal.github.io/post/data_tables_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;exercise-2&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Exercise 2&lt;/h1&gt;
&lt;div id=&#34;part-a.-1&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Part a.&lt;/h3&gt;
&lt;p&gt;You will repeat the calculations from Homework 4, Ex 2, but this time, using a data table. However, instead of a &lt;span class=&#34;math inline&#34;&gt;\(5 \times 6\)&lt;/span&gt; matrix, the result with be a table with 30 rows, each corresponding to a unique combination of CV from &lt;span class=&#34;math inline&#34;&gt;\(8, 12, ..., 28\)&lt;/span&gt; and Diff from &lt;span class=&#34;math inline&#34;&gt;\(5,10, ... , 25\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;The table should look something like&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\left\{
 \begin{array}{cc}
     CV &amp;amp; Diff \\
     8 &amp;amp; 5  \\
     8 &amp;amp; 10  \\
     8 &amp;amp; 15  \\
     \vdots &amp;amp; \vdots \\
     12 &amp;amp; 5  \\
     12 &amp;amp; 10  \\
     12 &amp;amp; 15  \\
     \vdots &amp;amp; \vdots \\
     28 &amp;amp; 5  \\
     28 &amp;amp; 10  \\
     28 &amp;amp; 15  \\
   \end{array}
   \right\}
\]&lt;/span&gt;
Test your required replicates calculations by calculating required replicates for each combination of CV and Diff using the default values for &lt;span class=&#34;math inline&#34;&gt;\(\alpha\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(\beta\)&lt;/span&gt;. Name this column &lt;code&gt;Moderate&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Calculate required replicaes again, but this time let &lt;span class=&#34;math inline&#34;&gt;\(\alpha = 0.01\)&lt;/span&gt; and let &lt;span class=&#34;math inline&#34;&gt;\(\beta = 0.1\)&lt;/span&gt;. Label this column &lt;code&gt;Conservative&lt;/code&gt;. Repeat the calculations, but this time let &lt;span class=&#34;math inline&#34;&gt;\(\alpha = 0.1\)&lt;/span&gt; and let &lt;span class=&#34;math inline&#34;&gt;\(\beta = 0.2\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;If you choose SAS, you can use the framework code from the first exercise.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;newdata.dat &amp;lt;- data.frame(CV = rep(seq(8,28,4), each = 5), Diff = rep(seq(5,25,5),6))
newdata.dat&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    CV Diff
## 1   8    5
## 2   8   10
## 3   8   15
## 4   8   20
## 5   8   25
## 6  12    5
## 7  12   10
## 8  12   15
## 9  12   20
## 10 12   25
## 11 16    5
## 12 16   10
## 13 16   15
## 14 16   20
## 15 16   25
## 16 20    5
## 17 20   10
## 18 20   15
## 19 20   20
## 20 20   25
## 21 24    5
## 22 24   10
## 23 24   15
## 24 24   20
## 25 24   25
## 26 28    5
## 27 28   10
## 28 28   15
## 29 28   20
## 30 28   25&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;combined &amp;lt;- function (cv, percent.diff, alpha = 0.05, beta = 0.2){
  cv &amp;lt;- cv
  percent.diff &amp;lt;- percent.diff
  n &amp;lt;- 2*(((cv/percent.diff)^2)*(qnorm((1-alpha/2)) + qnorm((1-beta)))^2) 
  n &amp;lt;- round(n,0)
  value &amp;lt;- list(CV = cv, PercentDiff= percent.diff, RequiredReplicates = round(n,0))
  return(value)
}
value &amp;lt;- combined(cv = newdata.dat$CV, percent.diff = newdata.dat$Diff)

# Adding Moderate column
newdata.dat$Moderate &amp;lt;- value$RequiredReplicates

# Adding Conservative column
value &amp;lt;- combined(cv = newdata.dat$CV, percent.diff = newdata.dat$Diff, alpha = 0.01, beta = 0.1)

newdata.dat$Conservative &amp;lt;- value$RequiredReplicates

# Repeat the calculations, but this time let $\alpha = 0.1$ and let $\beta =
# 0.2$.

# Adding Liberal column
value &amp;lt;- combined(cv = newdata.dat$CV, percent.diff = newdata.dat$Diff, alpha = 0.1, beta = 0.2)

newdata.dat$Liberal &amp;lt;- value$RequiredReplicates
# Print the table
# newdata.dat&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To show your work, some ideas for graphs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Plot required replicates vs CV and Diff, using different colors or symbols for &lt;code&gt;Moderate&lt;/code&gt;,&lt;code&gt;Conservative&lt;/code&gt; and &lt;code&gt;Liberal&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;attach(newdata.dat)

# Effect size Vs Required replicates
plot(CV, Moderate, col = &amp;quot;black&amp;quot;, type = &amp;#39;b&amp;#39;, pch = 8, xlab=&amp;quot;Effect Size&amp;quot;, ylab=&amp;quot;Required replicates&amp;quot;, ylim = c(min(Moderate, Conservative, Liberal),max(Moderate, Conservative, Liberal)))
points(CV, Conservative, type = &amp;#39;b&amp;#39;, pch = 2,  col = &amp;quot;red&amp;quot;)
points(CV, Liberal, type = &amp;#39;b&amp;#39;, pch = 20,  col = &amp;quot;blue&amp;quot;)
legend(&amp;quot;topleft&amp;quot;, 
       legend = c(&amp;quot;Moderate&amp;quot;, &amp;quot;Conservative&amp;quot;, &amp;quot;Liberal&amp;quot;), 
       col = c(&amp;quot;black&amp;quot;, &amp;quot;red&amp;quot;, &amp;quot;blue&amp;quot;),
       bty = &amp;quot;o&amp;quot;, 
       pch = c(8, 2, 20),
       pt.cex = 2, 
       cex = 1.2, 
       text.col = &amp;quot;black&amp;quot;, 
       horiz = F , 
       inset = c(0.1, 0.1))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/achalneupane.github.io/achal.github.io/post/data_tables_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Percent diff vs Required replicates
plot(Diff, Moderate, col = &amp;quot;black&amp;quot;, type = &amp;#39;b&amp;#39;,pch = 8, xlab=&amp;quot;Percent diff&amp;quot;, ylab=&amp;quot;Required replicates&amp;quot;, ylim = c(min(Moderate, Conservative, Liberal),max(Moderate, Conservative, Liberal)))
points(Diff, Conservative, type = &amp;#39;b&amp;#39;, pch = 2,  col = &amp;quot;red&amp;quot;)
points(Diff, Liberal, type = &amp;#39;b&amp;#39;, pch = 20,  col = &amp;quot;blue&amp;quot;)
legend(&amp;quot;topright&amp;quot;, 
       legend = c(&amp;quot;Moderate&amp;quot;, &amp;quot;Conservative&amp;quot;, &amp;quot;Liberal&amp;quot;), 
       col = c(&amp;quot;black&amp;quot;, &amp;quot;red&amp;quot;, &amp;quot;blue&amp;quot;),
       bty = &amp;quot;o&amp;quot;, 
       pch = c(8, 2, 20),
       pt.cex = 2, 
       cex = 1.2, 
       text.col = &amp;quot;black&amp;quot;, 
       horiz = F , 
       inset = c(0.1, 0.1))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/achalneupane.github.io/achal.github.io/post/data_tables_files/figure-html/unnamed-chunk-4-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Plot &lt;code&gt;Conservative&lt;/code&gt; vs &lt;code&gt;Moderate&lt;/code&gt; and &lt;code&gt;Liberal&lt;/code&gt; vs &lt;code&gt;Moderate&lt;/code&gt;, including a line with slope 1 and intercept 0.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;attach(newdata.dat)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following objects are masked from newdata.dat (pos = 3):
## 
##     Conservative, CV, Diff, Liberal, Moderate&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Conservative Vs Moderate
plot(Conservative ~ Moderate, type = &amp;#39;b&amp;#39;, col = &amp;quot;black&amp;quot;)
abline(a=1, b = 0)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/achalneupane.github.io/achal.github.io/post/data_tables_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#Liberal Vs Moderate
plot(Liberal ~ Moderate, type = &amp;#39;b&amp;#39;, col = &amp;quot;black&amp;quot;)
abline(a=1, b = 0)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/achalneupane.github.io/achal.github.io/post/data_tables_files/figure-html/unnamed-chunk-5-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;exercise-3&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Exercise 3&lt;/h1&gt;
&lt;p&gt;You’ll work with data from U.S. Wholesale price for pumpkins 2018 (&lt;a href=&#34;https://www.ers.usda.gov/newsroom/trending-topics/pumpkins-background-statistics/&#34; class=&#34;uri&#34;&gt;https://www.ers.usda.gov/newsroom/trending-topics/pumpkins-background-statistics/&lt;/a&gt;, Table 1)&lt;/p&gt;
&lt;div id=&#34;part-a&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Part a&lt;/h2&gt;
&lt;p&gt;Download the file &lt;code&gt;pumpkins.csv&lt;/code&gt; from D2L and read the file into a data frame. Print a summary of the table.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pumpkins &amp;lt;- read.csv(&amp;quot;https://raw.githubusercontent.com/achalneupane/data/master/pumpkins.csv&amp;quot;, header = TRUE, sep = &amp;quot;,&amp;quot;)
pumpkins &amp;lt;- data.frame(pumpkins)
attach(pumpkins)
print(summary(pumpkins))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        Month         Week              Class        Size   
##  October  :15   Min.   :1.000   Blue      : 6   Large :18  
##  September:15   1st Qu.:3.000   Cinderella: 7   Medium:12  
##                 Median :4.500   Howden    :10              
##                 Mean   :4.433   Pie       : 7              
##                 3rd Qu.:6.000                              
##                 Max.   :7.000                              
##      Price      
##  Min.   :121.0  
##  1st Qu.:130.2  
##  Median :175.0  
##  Mean   :178.1  
##  3rd Qu.:216.2  
##  Max.   :257.0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;part-b&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Part b&lt;/h2&gt;
&lt;p&gt;To show that the data was read correctly, create three plots. Plot
1. Price vs Week
2. Price vs Class
3. Size vs Class&lt;/p&gt;
&lt;p&gt;These three plots should reproduce the three types of plots shown in the &lt;code&gt;RegressionEtcPlots&lt;/code&gt; video, &lt;strong&gt;Categorical vs Categorical&lt;/strong&gt;, &lt;strong&gt;Continuous vs Continuous&lt;/strong&gt; and &lt;strong&gt;Continuous vs Categorical&lt;/strong&gt;. Add these as titles to your plots, as appropriate.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;attach(pumpkins)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## The following objects are masked from pumpkins (pos = 3):
## 
##     Class, Month, Price, Size, Week&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(Price ~ Week, main = &amp;quot;**Continuous vs Continuous**&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/achalneupane.github.io/achal.github.io/post/data_tables_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(Price ~ Class, main = &amp;quot;**Continuous vs Categorical**&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/achalneupane.github.io/achal.github.io/post/data_tables_files/figure-html/unnamed-chunk-7-2.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(Size ~ Class, main = &amp;quot;**Categorical vs Categorical**&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/achalneupane.github.io/achal.github.io/post/data_tables_files/figure-html/unnamed-chunk-7-3.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;From these plots, you should be able to answer these questions:&lt;/p&gt;
&lt;ol style=&#34;list-style-type: decimal&#34;&gt;
&lt;li&gt;&lt;p&gt;Are some Weeks missing Price observations?
Yes some Weeks are missing some Price observations.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Do Prices vary more for some Classes?
Yes, prices vary more for some classes, such as Pie.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Do all Classes have the same Sizes?
No, they are of different sizes.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;exercise-4&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Exercise 4&lt;/h1&gt;
&lt;p&gt;Calculate a one-way analysis of variance from the pumpkin data in Exercise 3.&lt;/p&gt;
&lt;div id=&#34;option-a&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Option A&lt;/h2&gt;
&lt;p&gt;Let &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt; be the &lt;code&gt;Price&lt;/code&gt;. Let the &lt;span class=&#34;math inline&#34;&gt;\(k\)&lt;/span&gt; treatments be &lt;code&gt;Class&lt;/code&gt;. Let &lt;span class=&#34;math inline&#34;&gt;\(T_i\)&lt;/span&gt; be the &lt;code&gt;Price&lt;/code&gt; total for &lt;code&gt;Class&lt;/code&gt; &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt; and let &lt;span class=&#34;math inline&#34;&gt;\(r_i\)&lt;/span&gt; be the number of observations for &lt;code&gt;Class&lt;/code&gt; &lt;span class=&#34;math inline&#34;&gt;\(i\)&lt;/span&gt;. Denote the total number of observations &lt;span class=&#34;math inline&#34;&gt;\(N = \sum r_i\)&lt;/span&gt;.&lt;/p&gt;
&lt;div id=&#34;part-a-1&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Part a&lt;/h3&gt;
&lt;p&gt;Find the treatment totals &lt;span class=&#34;math inline&#34;&gt;\(\mathbf{T} = T_1 \dots T_k\)&lt;/span&gt; and replicates per treatment &lt;span class=&#34;math inline&#34;&gt;\(\mathbf{r} = r_1 \dots r_k\)&lt;/span&gt; from the pumpkin data, using group summary functions and compute a grand total &lt;span class=&#34;math inline&#34;&gt;\(G\)&lt;/span&gt; for &lt;code&gt;Price&lt;/code&gt;. Print &lt;span class=&#34;math inline&#34;&gt;\(\mathbf{T}\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(\mathbf{r}\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(G\)&lt;/span&gt; below. In SAS, you can use &lt;code&gt;proc summary&lt;/code&gt; or &lt;code&gt;proc means&lt;/code&gt; to compute &lt;span class=&#34;math inline&#34;&gt;\(T\)&lt;/span&gt; adn &lt;span class=&#34;math inline&#34;&gt;\(r\)&lt;/span&gt; and output a summary table. I find the rest is easier in IML (see &lt;code&gt;use&lt;/code&gt; to access data tables in IML).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pumpkins.dat &amp;lt;- read.table(&amp;quot;https://raw.githubusercontent.com/achalneupane/data/master/pumpkins.csv&amp;quot;, header = TRUE, sep = &amp;quot;,&amp;quot;)
head(pumpkins.dat)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       Month Week Class   Size Price
## 1 September    1   Pie Medium   175
## 2 September    2   Pie Medium   199
## 3 September    3   Pie Medium   224
## 4 September    4   Pie Medium   224
## 5   October    5   Pie Medium   219
## 6   October    6   Pie Medium   219&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;class(pumpkins.dat)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;data.frame&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;k &amp;lt;- length(levels(pumpkins.dat$Class))
k&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 4&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;T &amp;lt;- tapply(pumpkins.dat$Price, pumpkins.dat$Class, sum)
# can also use aggregate 
# T &amp;lt;- aggregate(pumpkins.dat$Price, by = list(pumpkins.dat$Class), FUN = sum)
T&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       Blue Cinderella     Howden        Pie 
##       1050       1529       1279       1484&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;r &amp;lt;- table(pumpkins.dat$Class)
# can also use aggregate
# aggregate(pumpkins.dat$Class, by = list(pumpkins.dat$Class), FUN = length)
r&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
##       Blue Cinderella     Howden        Pie 
##          6          7         10          7&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;N &amp;lt;- sum(r)
G &amp;lt;- sum(pumpkins.dat$Price)
G&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 5342&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;part-b-1&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Part b&lt;/h3&gt;
&lt;p&gt;Calculate sums of squares as&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
\text{Correction Factor : } C &amp;amp;= \frac{G^2}{N} \\
\text{Total SS : } &amp;amp;= \sum y^2 - C \\
\text{Treatments SS : }  &amp;amp;= \sum \frac{T_i^2}{r_i} -C \\
\text{Error SS : }  &amp;amp;= \text{Total SS} - \text{Treatments SS} \\
\end{aligned}
\]&lt;/span&gt;
and calcute &lt;span class=&#34;math inline&#34;&gt;\(MSB = (\text{Treatments SS})/(k-1)\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(MSW = (\text{Error SS})/(N-k)\)&lt;/span&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;C &amp;lt;- G^2/N
C&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 951232.1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;TotalSS &amp;lt;- sum((pumpkins.dat$Price)^2)-C
TotalSS&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 48805.87&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;TreatmentsSS &amp;lt;- sum(T^2/r) - C
TreatmentsSS&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 44687.25&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ErrorSS &amp;lt;- TotalSS - TreatmentsSS
ErrorSS&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 4118.614&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;MSB &amp;lt;- TreatmentsSS/(k-1)
MSB&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 14895.75&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;MSW &amp;lt;- ErrorSS/(N-k)
MSW&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 158.4082&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;part-c.&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Part c.&lt;/h3&gt;
&lt;p&gt;Calculate an F-ratio and a &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; for this &lt;span class=&#34;math inline&#34;&gt;\(F\)&lt;/span&gt;, using the &lt;span class=&#34;math inline&#34;&gt;\(F\)&lt;/span&gt; distribution with &lt;span class=&#34;math inline&#34;&gt;\(k-1\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(N-k\)&lt;/span&gt; degrees of freedom. Use &lt;span class=&#34;math inline&#34;&gt;\(\alpha=0.05\)&lt;/span&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;F.ratio &amp;lt;- MSB/MSW
F.ratio&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 94.03394&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df1 &amp;lt;- k-1
df2 &amp;lt;- N-k
p.value &amp;lt;- pf(F.ratio, df1, df2, lower.tail = FALSE)
p.value&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 4.421291e-14&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To check your work, use &lt;code&gt;aov&lt;/code&gt; as illustated in the chunk below:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(aov(Price ~ Class, data=pumpkins.dat))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##             Df Sum Sq Mean Sq F value   Pr(&amp;gt;F)    
## Class        3  44687   14896   94.03 4.42e-14 ***
## Residuals   26   4119     158                     
## ---
## Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;option-b&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Option B&lt;/h2&gt;
&lt;p&gt;You may resue code from Exercise 6, Homework 4. Use group summary functions to calculate means, standard deviations and replicates from the pumpkin data, then calculate &lt;span class=&#34;math inline&#34;&gt;\(MSW\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(MSB\)&lt;/span&gt; as previously. Report the F-ratio and &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; value as above.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mean.groups &amp;lt;- aggregate(pumpkins.dat$Price, by = list(pumpkins.dat$Class), FUN = mean)
mean.groups&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      Group.1        x
## 1       Blue 175.0000
## 2 Cinderella 218.4286
## 3     Howden 127.9000
## 4        Pie 212.0000&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;mean.groups &amp;lt;- mean.groups$x
sd.groups &amp;lt;- aggregate(pumpkins.dat$Price, by = list(pumpkins.dat$Class), FUN = sd)
sd.groups&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      Group.1         x
## 1       Blue  0.000000
## 2 Cinderella 17.924445
## 3     Howden  3.695342
## 4        Pie 18.565200&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;sd.groups &amp;lt;- sd.groups$x

k &amp;lt;- length(mean.groups)
k&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 4&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;length.groups &amp;lt;- aggregate(pumpkins.dat$Price, by = list(pumpkins.dat$Class), FUN = length)

# We have n samples in each pumpkin.dat Class; so our population size is N:
n &amp;lt;- length.groups$x
n&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1]  6  7 10  7&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;N &amp;lt;- sum(n)
N&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 30&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#calculating MSB 
mean.mean.groups &amp;lt;- mean(mean.groups)
MSB = (sum(n*(mean.groups-mean.mean.groups)^2))/(k-1)
MSB&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 15173&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;MSW &amp;lt;- sum((n-1) * sd.groups^2)/(N-k)
MSW&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 158.4082&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;F.ratio &amp;lt;- MSB/MSW
F.ratio&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 95.78418&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;df1 &amp;lt;- k-1
df2 &amp;lt;- N-k
p.value &amp;lt;- pf(F.ratio, df1, df2, lower.tail = FALSE)
p.value&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 3.551828e-14&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;exercise-5&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Exercise 5&lt;/h1&gt;
&lt;div id=&#34;part-a-2&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Part a&lt;/h2&gt;
&lt;p&gt;Go to &lt;a href=&#34;http://www.itl.nist.gov/div898/strd/anova/SiRstv.html&#34; class=&#34;uri&#34;&gt;http://www.itl.nist.gov/div898/strd/anova/SiRstv.html&lt;/a&gt; and use the data listed under &lt;code&gt;Data File in Table Format&lt;/code&gt; (&lt;a href=&#34;https://www.itl.nist.gov/div898/strd/anova/SiRstvt.dat&#34; class=&#34;uri&#34;&gt;https://www.itl.nist.gov/div898/strd/anova/SiRstvt.dat&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;part-b-2&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Part b&lt;/h2&gt;
&lt;p&gt;Edit this into a file that can be read into R or SAS, or find an appropriate function that can read the file as-is. You will need to upload the edited file to D2L along with your Rmd/SAS files. Provide a brief comment on changes you make, or assumptions about the file needed for you file to be read into R/SAS. Read the data into a data frame or data table.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Here we read the .dat file first skipping the 59 lines as indicated in SiRstvt.dat file.
df &amp;lt;- read.table(&amp;quot;https://raw.githubusercontent.com/achalneupane/data/master/SiRstvt.dat&amp;quot;, header = FALSE, skip = 59)
# read file as dataframe
df &amp;lt;- as.data.frame(df)
# We need to change the column names as alpha-numeric to work with ease
names(df) &amp;lt;- paste0(&amp;quot;col_&amp;quot;, seq(1,5,1))
df&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      col_1    col_2    col_3    col_4    col_5
## 1 196.3052 196.3042 196.1303 196.2795 196.2119
## 2 196.1240 196.3825 196.2005 196.1748 196.1051
## 3 196.1890 196.1669 196.2889 196.1494 196.1850
## 4 196.2569 196.3257 196.0343 196.1485 196.0052
## 5 196.3403 196.0422 196.1811 195.9885 196.2090&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;part-c&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Part c&lt;/h2&gt;
&lt;p&gt;There are 5 columns in these data. Calculate mean and sd and sample size for each column in this data, using column summary functions. Print the results below&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Calculating the mean (or summary)
sapply(df, mean)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    col_1    col_2    col_3    col_4    col_5 
## 196.2431 196.2443 196.1670 196.1481 196.1432&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# summary(df, digits = 7)
print(data.frame(sapply(df, summary)))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##            col_1    col_2    col_3    col_4    col_5
## Min.    196.1240 196.0422 196.0343 195.9885 196.0052
## 1st Qu. 196.1890 196.1669 196.1303 196.1485 196.1051
## Median  196.2569 196.3042 196.1811 196.1494 196.1850
## Mean    196.2431 196.2443 196.1670 196.1481 196.1432
## 3rd Qu. 196.3052 196.3257 196.2005 196.1748 196.2090
## Max.    196.3403 196.3825 196.2889 196.2795 196.2119&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# calculating length for all columns
sapply(df, length)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## col_1 col_2 col_3 col_4 col_5 
##     5     5     5     5     5&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# calculating sd for all columns
sapply(df, sd)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      col_1      col_2      col_3      col_4      col_5 
## 0.08747329 0.13797498 0.09372413 0.10422674 0.08844797&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Determine the largest and smallest means, and their corresponding standard deviations, and calculate an effect size and required replicates to experimentally detect this effect.&lt;/p&gt;
&lt;p&gt;If you defined functions in the previous exercises, you should be able to call them here.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tt&amp;lt;- as.data.frame(sapply(df, summary))
# Assigning smallest mean as m1 (Col_5)
m1 &amp;lt;- min(tt[rownames(tt)==&amp;quot;Mean&amp;quot;,])
m1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 196.1432&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Assigning largest mean as m2 (col_2)
m2 &amp;lt;- max(tt[rownames(tt)==&amp;quot;Mean&amp;quot;,])
m2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 196.2443&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Now, getting sd for column 2 (largest mean) and 5 (smallest mean)
sd &amp;lt;- sapply(df, sd)
# SD from smallest mean column and largest mean column
# SD for column 5 (smallest mean)
s1 &amp;lt;- as.numeric(sd[5])
s1&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.08844797&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# SD for column 2 (largest mean)
s2 &amp;lt;- as.numeric(sd[2])
s2&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.137975&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Calculating the effect size
cohen.d &amp;lt;- function(m1,s1,m2,s2){
  cohens_d &amp;lt;-(abs(m1-m2)/sqrt((s1^2+s2^2)/2))
  return(cohens_d)
}

cohen.d(m1 = m1, s1 = s1, m2 = m2, s2 = s2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.8720476&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# calculating the Required replicates
required.replicates &amp;lt;- function (m1,s1, m2,s2, alpha=0.05, beta=0.2){
  n &amp;lt;- 2* ((((sqrt((s1^2 + s2^2)/2))/(m1-m2))^2) * (qnorm((1-alpha/2)) + qnorm((1-beta)))^2) 
  return(round(n,0))
}

# required replicates
required.replicates(m1 = m1, s1 = s1, m2 = m2, s2 = s2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 21&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;exercise-6&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Exercise 6&lt;/h1&gt;
&lt;p&gt;There is a web site (&lt;a href=&#34;https://www.wrestlestat.com/rankings/starters&#34; class=&#34;uri&#34;&gt;https://www.wrestlestat.com/rankings/starters&lt;/a&gt;) that ranks college wrestlers using an ELO scoring system (&lt;a href=&#34;https://en.wikipedia.org/wiki/Elo_rating_system&#34; class=&#34;uri&#34;&gt;https://en.wikipedia.org/wiki/Elo_rating_system&lt;/a&gt;). I was curious how well the rankings predicted performance, so I gathered data from th 2018 NCAA Wrestling Championships (&lt;a href=&#34;https://i.turner.ncaa.com/sites/default/files/external/gametool/brackets/wrestling_d1_2018.pdf&#34; class=&#34;uri&#34;&gt;https://i.turner.ncaa.com/sites/default/files/external/gametool/brackets/wrestling_d1_2018.pdf&lt;/a&gt;). Part of the data are on D2L in the file &lt;code&gt;elo.csv&lt;/code&gt;. You will need to download the file to your computer for this exercise.&lt;/p&gt;
&lt;p&gt;Read the dzta below and print a summary. The dzta were created by writing a data frame from R to csv (&lt;code&gt;write.csv&lt;/code&gt;), so the first column is row number and does not have a header entry (the header name is an empty string).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;elo.dat &amp;lt;- read.table(&amp;quot;https://raw.githubusercontent.com/achalneupane/data/master/elo.csv&amp;quot;, header = TRUE, row.names = 1, sep = &amp;quot;,&amp;quot;)
# elo.dat
print(summary(elo.dat))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      Weight        Conference      ELO        ActualFinish
##  Min.   :125.0   Big Ten:87   Min.   :1228   AA     :80   
##  1st Qu.:141.0   EIWA   :55   1st Qu.:1342   cons 12:40   
##  Median :157.0   Big 12 :52   Median :1372   cons 16:40   
##  Mean   :170.9   ACC    :40   Mean   :1379   cons 24:79   
##  3rd Qu.:184.0   MAC    :34   3rd Qu.:1410   cons 32:80   
##  Max.   :285.0   Pac 12 :25   Max.   :1584   cons 33:10   
##                  (Other):36                               
##     ExpectedFinish
##  E[AA]     :80    
##  E[cons 12]:36    
##  E[cons 16]:36    
##  E[cons 24]:66    
##  E[cons 32]:46    
##  E[NQ]     :65    
## &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Each row corresponds to an individual wrestler, his weight class and collegiate conference. The WrestleStat ELO score is listed, along with his tournament finish round (i.e. &lt;code&gt;AA&lt;/code&gt; = 1-8 place, &lt;code&gt;cons 12&lt;/code&gt; = lost in the final consolation round, etc.). I calculated an expected finish based on his ELO ranking within the weight class, where &lt;code&gt;E[AA]&lt;/code&gt; = top 8 ranked, expected to finish as AA, etc.&lt;/p&gt;
&lt;p&gt;Produce group summaries or plots to answer the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What are the mean and standard deviations of ELO by Expected Finish and by Actual Finish?&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# By both groups
# mean.ExActFinish &amp;lt;- aggregate(elo.dat$ELO, by = list(elo.dat$ExpectedFinish, elo.dat$ActualFinish), mean)
# mean.ExActFinish

# First By Expected Finish:
mean.ExFinish &amp;lt;- aggregate(elo.dat$ELO, by = list(elo.dat$ExpectedFinish), FUN = mean)
mean.ExFinish&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      Group.1        x
## 1      E[AA] 1451.336
## 2 E[cons 12] 1395.442
## 3 E[cons 16] 1379.404
## 4 E[cons 24] 1357.369
## 5 E[cons 32] 1334.704
## 6      E[NQ] 1332.821&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;SD.ExFinish &amp;lt;- aggregate(elo.dat$ELO, by = list(elo.dat$ExpectedFinish), FUN = sd)
SD.ExFinish&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      Group.1        x
## 1      E[AA] 41.04978
## 2 E[cons 12] 17.77768
## 3 E[cons 16] 13.11593
## 4 E[cons 24] 16.02282
## 5 E[cons 32] 18.02051
## 6      E[NQ] 52.69272&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Now, by Actual Finish
mean.ActFinish &amp;lt;- aggregate(elo.dat$ELO, by = list(elo.dat$ActualFinish), FUN = mean)
mean.ActFinish&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   Group.1        x
## 1      AA 1444.556
## 2 cons 12 1400.708
## 3 cons 16 1371.745
## 4 cons 24 1355.130
## 5 cons 32 1333.270
## 6 cons 33 1343.795&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;SD.ActFinish &amp;lt;- aggregate(elo.dat$ELO, by = list(elo.dat$ActualFinish), FUN = sd)
SD.ActFinish&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   Group.1        x
## 1      AA 50.93285
## 2 cons 12 29.22633
## 3 cons 16 34.28861
## 4 cons 24 30.95125
## 5 cons 32 34.08563
## 6 cons 33 28.30588&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Do all conferences have similar quality, or might we suspect one or more conferences have better wrestlers than the rest? (You don’t need to perform an analysis, just argue, based on the summary, if a deeper analysis is warranted).&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;aggregate(elo.dat$Conference, by = list(elo.dat$ExpectedFinish, elo.dat$ActualFinish), FUN = summary)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       Group.1 Group.2 x.ACC x.Big 12 x.Big Ten x.EIWA x.EWL x.MAC x.Pac 12
## 1       E[AA]      AA     7        4        30      8     1     3        4
## 2  E[cons 12]      AA     2        3         1      1     1     1        0
## 3  E[cons 16]      AA     1        1         4      0     0     0        0
## 4  E[cons 24]      AA     0        1         0      0     0     0        0
## 5  E[cons 32]      AA     0        1         0      0     0     0        0
## 6       E[NQ]      AA     0        1         2      0     0     2        1
## 7       E[AA] cons 12     2        3         2      4     1     1        0
## 8  E[cons 12] cons 12     1        1         4      4     1     0        1
## 9  E[cons 16] cons 12     1        1         1      0     0     1        0
## 10 E[cons 24] cons 12     0        2         2      1     0     0        1
## 11      E[NQ] cons 12     0        1         1      0     0     1        0
## 12      E[AA] cons 16     2        0         2      1     0     0        2
## 13 E[cons 12] cons 16     0        0         1      0     2     0        1
## 14 E[cons 16] cons 16     0        1         4      1     0     0        1
## 15 E[cons 24] cons 16     0        1         3      3     0     1        0
## 16 E[cons 32] cons 16     1        1         2      2     0     0        0
## 17      E[NQ] cons 16     1        1         2      0     1     0        2
## 18      E[AA] cons 24     1        0         1      1     0     0        0
## 19 E[cons 12] cons 24     1        1         1      4     0     1        0
## 20 E[cons 16] cons 24     5        2         1      1     0     1        1
## 21 E[cons 24] cons 24     8        4         5      4     3     4        1
## 22 E[cons 32] cons 24     0        3         3      5     1     3        1
## 23      E[NQ] cons 24     0        2         4      2     1     2        1
## 24 E[cons 12] cons 32     0        0         0      2     0     0        0
## 25 E[cons 16] cons 32     0        2         1      1     1     0        1
## 26 E[cons 24] cons 32     1        5         3      2     2     2        1
## 27 E[cons 32] cons 32     2        4         3      4     3     5        1
## 28      E[NQ] cons 32     3        6         3      2     4     4        4
## 29 E[cons 16] cons 33     0        0         1      0     0     0        0
## 30 E[cons 24] cons 33     0        0         0      1     0     2        1
## 31 E[cons 32] cons 33     0        0         0      1     0     0        0
## 32      E[NQ] cons 33     1        0         0      0     0     0        0
##    x.SoCon
## 1        0
## 2        0
## 3        0
## 4        0
## 5        0
## 6        0
## 7        0
## 8        1
## 9        1
## 10       0
## 11       0
## 12       0
## 13       0
## 14       0
## 15       0
## 16       0
## 17       1
## 18       0
## 19       0
## 20       0
## 21       0
## 22       0
## 23       0
## 24       0
## 25       0
## 26       1
## 27       0
## 28       7
## 29       0
## 30       1
## 31       0
## 32       2&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# aggregate(elo.dat$Conference, by = list(elo.dat$ExpectedFinish, elo.dat$ActualFinish), length)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Based on this table, Big Ten seems to have better wrestlers.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How well does ELO predict finish? Use a contingency table or mosaic plot to show how often, say, and &lt;code&gt;AA&lt;/code&gt; finish corresponds to an &lt;code&gt;E[AA]&lt;/code&gt; finish.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;contingency.table &amp;lt;- table(elo.dat$ExpectedFinish, elo.dat$ActualFinish)
# Contingency table
contingency.table&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##             
##              AA cons 12 cons 16 cons 24 cons 32 cons 33
##   E[AA]      57      13       7       3       0       0
##   E[cons 12]  9      13       4       8       2       0
##   E[cons 16]  6       5       7      11       6       1
##   E[cons 24]  1       6       8      29      17       5
##   E[cons 32]  1       0       6      16      22       1
##   E[NQ]       6       3       8      12      33       3&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# # can convert table to dataframe
# contingency.table.dat &amp;lt;- as.data.frame.matrix(contingency.table)
# Also, plot
attach(elo.dat)
plot(ActualFinish ~ ExpectedFinish)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/achalneupane.github.io/achal.github.io/post/data_tables_files/figure-html/unnamed-chunk-19-1.png&#34; width=&#34;672&#34; /&gt;
Based on the contingency table, &lt;code&gt;E[AA]&lt;/code&gt; &lt;code&gt;AA&lt;/code&gt; are associated 57 times&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Does this data set include non-qualifiers? (The NCAA tournament only allows 33 wreslers per weight class).&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;table(elo.dat$Weight)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## 
## 125 133 141 149 157 165 174 184 197 285 
##  33  33  33  33  33  33  33  33  32  33&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Based on this, all weight class have 33 wrestlers with only 32 wrestlers in 197 weigh class&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Functions</title>
      <link>/achalneupane.github.io/post/functions/</link>
      <pubDate>Thu, 15 Aug 2019 17:26:23 -0500</pubDate>
      <guid>/achalneupane.github.io/post/functions/</guid>
      <description>


&lt;script type=&#34;text/javascript&#34; src=&#34;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML&#34;&gt;
&lt;/script&gt;
&lt;div id=&#34;exercise-1&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Exercise 1&lt;/h1&gt;
&lt;p&gt;Implement Cohen’s &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt; as a function of&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
d = f(m_1, s_1, m_2, s_2) = \frac{|m_1-m_2|}{s_{pooled}}
\]&lt;/span&gt;
where &lt;span class=&#34;math inline&#34;&gt;\(s_{pooled}\)&lt;/span&gt; is a pooled standard deviation. Use the formula &lt;span class=&#34;math inline&#34;&gt;\(s_{pooled} = \sqrt{(s_1^2 + s_2^2)/2}\)&lt;/span&gt;. You may implement pooled standard deviation as a function as well.&lt;/p&gt;
&lt;p&gt;Calculate the effect size &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt; for the differences among calories per serving, 1936 versus 2006, 1936 vs 1997 and 1997 vs 2006. Use the values from Wansink, Table 1 as given in Homework 1 or in the course outline. Name this function &lt;code&gt;cohen.d&lt;/code&gt; (or similar if using SAS)&lt;/p&gt;
&lt;div id=&#34;answer&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Answer&lt;/h2&gt;
&lt;p&gt;Define your function(s) in the code chunk below, then call the function with appropriate arguments in the following sections&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# function definition
# Variables m1 and m2 are means, and s1 and s2 are standard deviations
# for two dates of comparison among calories per serving we are interested in, respectively. 
cohen.d &amp;lt;- function(m1,s1,m2,s2){
  cohens_d &amp;lt;-(abs(m1-m2)/sqrt((s1^2+s2^2)/2))
  return(cohens_d)
  }&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;versus-2006&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;1936 versus 2006&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;m1=268.1
m2=384.4
s1=124.8
s2=168.3
cohen.d(m1=m1,s1=s1,m2=m2,s2=s2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.7849876&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;versus-1997&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;1936 versus 1997&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;m1=268.1
m2=288.6
s1=124.8
s2=122.0
cohen.d(m1=m1,s1=s1,m2=m2,s2=s2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.1661157&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;versus-2006-1&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;1997 versus 2006&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;m1=288.6
m2=384.4
s1=122.0
s2=168.3
cohen.d(m1=m1,s1=s1,m2=m2,s2=s2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.6517694&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Check your work by comparing with the previous homework.
-Answers match with previous homework!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;exercise-2.&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Exercise 2.&lt;/h1&gt;
&lt;p&gt;Implement the required replicates calculation as a function of &lt;span class=&#34;math inline&#34;&gt;\(m_1\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(s_1\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(m_2\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(s_2\)&lt;/span&gt; as required parameters, and &lt;span class=&#34;math inline&#34;&gt;\(\alpha\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(\beta\)&lt;/span&gt; as optional parameters. Let &lt;code&gt;alpha=0.05&lt;/code&gt; and &lt;code&gt;beta=0.2&lt;/code&gt;, so you’ll need to compute quantiles for &lt;code&gt;1-alpha/2&lt;/code&gt; and &lt;code&gt;1-beta&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Your function should return an integer &lt;span class=&#34;math inline&#34;&gt;\(n\)&lt;/span&gt;, such that&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
n \ge 2\times \left( \frac{CV}{\%Diff} \right)^2 \times \left(z_{\alpha/2}+ z_\beta \right)^2
\]&lt;/span&gt;
where &lt;span class=&#34;math inline&#34;&gt;\(\%Diff = \frac{m_1 - m_2}{(m_1 + m_2)/2}\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(CV = \frac{sd_{pooled}}{(m_1 + m_2)/2}\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;You may use the pooled standarad deviation function from Ex. 1 (if you defined such a function).&lt;/p&gt;
&lt;p&gt;Name this function &lt;code&gt;required.replicates&lt;/code&gt; (or similar if using SAS)&lt;/p&gt;
&lt;div id=&#34;answer-1&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Answer&lt;/h2&gt;
&lt;p&gt;Define your function(s) in the code chunk below, then call the function with appropriate arguments in the following sections&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# function definition
# Variables m1 and m2 are means, and s1 and s2 are standard deviations
# for two dates of comparison among calories per serving we are interested in, respectively. 
required.replicates &amp;lt;- function (m1,m2, s1,s2, alpha=0.05, beta=0.2){
  n &amp;lt;- 2* ((((sqrt((s1^2 + s2^2)/2))/(m1-m2))^2) * (qnorm((1-alpha/2)) + qnorm((1-beta)))^2) 
  return(round(n,0))
}&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;versus-2006-2&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;1936 versus 2006&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;m1=268.1
m2=384.4
s1=124.8
s2=168.3
required.replicates(m1=m1, m2=m2, s1=s1, s2=s2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 25&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;versus-1997-1&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;1936 versus 1997&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;m1=268.1
m2=288.6
s1=124.8
s2=122.0
required.replicates(m1=m1, m2=m2, s1=s1, s2=s2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 569&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;versus-2006-3&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;1997 versus 2006&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;m1=288.6
m2=384.4
s1=122.0
s2=168.3
required.replicates(m1=m1, m2=m2, s1=s1, s2=s2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 37&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Check your work by comparing with the previous homework.
-Answers match with previous homework!&lt;/p&gt;
&lt;p&gt;Note:
for Alpha=0.05 , we can use the r function qnorm(1-alpha/2) assuming u=0 and sd=1,
As for Beta, we need additional information.
z-score is the a standardized value of the value the hypothesized x.
and alpha is about rejecting the value x when its true.
but beta is about x failing to reject in when it is false… which means there is other value of x which we don’t have in the formula z=(x-u)/sd.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;exercise-3&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Exercise 3&lt;/h1&gt;
&lt;p&gt;Implement the likelihood formula as a function or macro.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
L (x ; \mu, \sigma^2) = \frac{1}{\sigma \sqrt{2 \pi}^{}} e^{- \frac{(x - \mu)^2}{2 \sigma^2}}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Define &lt;span class=&#34;math inline&#34;&gt;\(\mu\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(\sigma\)&lt;/span&gt; as optional parameters, taking values &lt;code&gt;mu=0&lt;/code&gt; and &lt;code&gt;sigma=1&lt;/code&gt;. Name this function &lt;code&gt;norm.pdf&lt;/code&gt;&lt;/p&gt;
&lt;div id=&#34;answer-2&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Answer&lt;/h2&gt;
&lt;p&gt;Define your function(s) in the code chunk below, then call the function with appropriate arguments in the following sections&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# function definition
# Function to calcuate the values for log liklihood from above equation.
# First, we define the values for sigma as variance, 
# mu as mean of a normal population to be used for a liklihood of a x observation.
norm.pdf &amp;lt;- function(x,mu=0,sigma=1){
  l&amp;lt;-1/(sigma*sqrt(pi*2))*exp(-((x-mu)^2)/(2*sigma^2))
  return(l)
}&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;x-0.1&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;span class=&#34;math inline&#34;&gt;\(x=-0.1\)&lt;/span&gt;&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x=-0.1
norm.pdf(x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.3969525&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;x0.0&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;span class=&#34;math inline&#34;&gt;\(x=0.0\)&lt;/span&gt;&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x=0.0
norm.pdf(x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.3989423&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;x0.1&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;span class=&#34;math inline&#34;&gt;\(x=0.1\)&lt;/span&gt;&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x=0.1
norm.pdf(x)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.3969525&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Check your work by comparing with the previous homework.
-Answers match with previous homework!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;exercise-4&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Exercise 4&lt;/h1&gt;
&lt;p&gt;The probability mass function for value &lt;span class=&#34;math inline&#34;&gt;\(y\)&lt;/span&gt; from Poisson data with a mean and variance &lt;span class=&#34;math inline&#34;&gt;\(\lambda\)&lt;/span&gt; is given by&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
f(x;\lambda) = \frac{e^{-\lambda} \lambda^x}{x!} = exp(-\lambda)(\frac{1}{x!}) exp[x\times log(\lambda)]
\]&lt;/span&gt;
Write a function &lt;code&gt;pois.pmf&lt;/code&gt; that accepts two parameters, &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;lambda&lt;/code&gt;. Use the built in &lt;code&gt;factorial&lt;/code&gt; function for &lt;span class=&#34;math inline&#34;&gt;\(x!\)&lt;/span&gt;. Note that &lt;span class=&#34;math inline&#34;&gt;\(x\)&lt;/span&gt; should be an integer value, so call a rounding function inside your function.
Test your function with &lt;span class=&#34;math inline&#34;&gt;\(\lambda = 12\)&lt;/span&gt; at &lt;span class=&#34;math inline&#34;&gt;\(x = 8,12,16\)&lt;/span&gt;&lt;/p&gt;
&lt;div id=&#34;answer-3&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Answer&lt;/h2&gt;
&lt;p&gt;Define your function(s) in the code chunk below, then call the function with appropriate arguments in the following sections&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# function definition
# The function to calculate probability mass function for poisson 
# data with a mean and variance lambda. 
  pois.pmf &amp;lt;- function(x, lambda){
    poisson.d &amp;lt;- exp(-lambda)*(1/(factorial(round(x,0))))*exp(round(x,0)*(log(lambda)))
  return(poisson.d)
  }&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;x4&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;span class=&#34;math inline&#34;&gt;\(x=4\)&lt;/span&gt;&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lambda=12
x=4
pois.pmf(x=x, lambda = lambda)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.005308599&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;x12&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;span class=&#34;math inline&#34;&gt;\(x=12\)&lt;/span&gt;&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lambda=12
x=12
pois.pmf(x=x, lambda = lambda)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.1143679&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;x20&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;&lt;span class=&#34;math inline&#34;&gt;\(x=20\)&lt;/span&gt;&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;lambda=12
x=20
pois.pmf(x=x, lambda = lambda)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.009682032&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can check your work against the built in Poisson distribution functions.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Using built-in function &amp;#39;dpois&amp;#39;, we can check our answers:
# for x=4
x= 4
lambda=12
dpois(x=x, lambda = lambda)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.005308599&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# #or
# ppois(x,lambda)-ppois(x-1,lambda)

# for x =12
x= 12
lambda=12
dpois(x=x, lambda = lambda)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.1143679&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# for x=20
x= 20
lambda=12
dpois(x=x, lambda = lambda)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.009682032&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# which was correct for all three x&amp;#39;s&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Something to ponder. Note that there are two formula given. Can you implement both forms in R/IML/Macro language? Would there be a difference in computational speed or efficiency?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Implementation of the first formula
pois.pmf.first &amp;lt;- function (x, lambda){
  poisson.d &amp;lt;- (exp(-lambda)*((lambda^(round(x,0))))/(factorial(round(x,0))))
  return(poisson.d)
}
# To test the execution time of two formulas:
library(microbenchmark)
lambda =12
x=20

mbm &amp;lt;- microbenchmark(&amp;quot;Using first formula&amp;quot; = pois.pmf.first(x=x, lambda = lambda), 
                      &amp;quot;Using second formula&amp;quot; = pois.pmf(x=x, lambda = lambda))
mbm&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Unit: microseconds
##                  expr   min     lq     mean median     uq      max neval
##   Using first formula 2.478 2.5830 66.55456 2.6430 2.6945 6367.856   100
##  Using second formula 2.687 2.7335  2.84033 2.7675 2.8175    6.687   100
##  cld
##    a
##    a&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggplot2)
autoplot(mbm)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Coordinate system already present. Adding new coordinate system, which will replace the existing one.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/achalneupane.github.io/achal.github.io/post/Functions_files/figure-html/unnamed-chunk-18-1.png&#34; width=&#34;672&#34; /&gt;
Based on the execution time, looks like using the first formula takes a bit longer time to execute.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;exercise-5&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Exercise 5&lt;/h1&gt;
&lt;p&gt;Write a function, &lt;code&gt;stat.power&lt;/code&gt; that combines calculations from Exercises 1 and 2. This function should accept &lt;span class=&#34;math inline&#34;&gt;\(m_1, s_1, m_2\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(s_2\)&lt;/span&gt; as required parameters, and &lt;span class=&#34;math inline&#34;&gt;\(\alpha\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(\beta\)&lt;/span&gt; as optional parameters. This function must return a list with named elements &lt;code&gt;CV&lt;/code&gt;, &lt;code&gt;PercentDiff&lt;/code&gt;, &lt;code&gt;EffectSize&lt;/code&gt; and &lt;code&gt;RequiredReplicates&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you choose to do this exercise in SAS, you will need to write a subroutine that accepts the same parameters as the R function, but also accepts output parameters &lt;code&gt;CV&lt;/code&gt;, &lt;code&gt;PercentDiff&lt;/code&gt;, &lt;code&gt;EffectSize&lt;/code&gt; and &lt;code&gt;RequiredReplicates&lt;/code&gt;. See &lt;a href=&#34;https://blogs.sas.com/content/iml/2012/08/20/how-to-return-multiple-values-from-a-sasiml-function.html&#34; class=&#34;uri&#34;&gt;https://blogs.sas.com/content/iml/2012/08/20/how-to-return-multiple-values-from-a-sasiml-function.html&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Another option for SAS is to package the calculations in a macro and create a data table, using the code from
Course Outline SAS Source (under Course Outline &amp;gt; Outline Source and Output Files), about line 320.&lt;/p&gt;
&lt;div id=&#34;answer-4&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Answer&lt;/h2&gt;
&lt;p&gt;Define your function(s) in the code chunk below, the call the function with appropriate parameters in the following sections&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# function definition
combined &amp;lt;- function (m1,m2, s1,s2, alpha=0.05, beta=0.2){
  n &amp;lt;- 2* ((((sqrt((s1^2 + s2^2)/2))/(m1-m2))^2) * (qnorm((1-alpha/2)) + qnorm((1-beta)))^2)
  cohens_d &amp;lt;-(abs(m1-m2)/sqrt((s1^2+s2^2)/2))
  cv &amp;lt;- (sqrt((s1^2+s2^2)/2))/((m1+m2)/2)
  percentdiff &amp;lt;- ((m1-m2)/((m1+m2)/2))
  tt &amp;lt;- (list(CV=cv, PercentDiff= percentdiff, RequiredReplicates=round(n,0), EffectSize=cohens_d))
  # attributes(tt)
  # names(tt)
  attr(tt, &amp;quot;class&amp;quot;) &amp;lt;- &amp;quot;stat.power&amp;quot; #Setting a new class
  print.stat.power(tt) #use print.stat.power function below
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you define the &lt;code&gt;class&lt;/code&gt; of the list returned by your function as &lt;code&gt;stat.power&lt;/code&gt;, this function should work automatically; you shouln’t need to call the function explicity.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print.stat.power &amp;lt;- function(value) {
  cat(paste(&amp;quot;Coefficient of Variation :&amp;quot;,value$CV*100,&amp;quot;\n&amp;quot;))
  cat(paste(&amp;quot;Percent Difference :&amp;quot;,value$PercentDiff*100,&amp;quot;\n&amp;quot;))
  cat(paste(&amp;quot;Effect Size :&amp;quot;,value$EffectSize,&amp;quot;\n&amp;quot;))
  cat(paste(&amp;quot;Required Replicates :&amp;quot;,value$RequiredReplicates,&amp;quot;\n&amp;quot;))
}&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;versus-2006-4&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;1936 versus 2006&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;m1=268.1
m2=384.4
s1=124.8
s2=168.3
combined(m1=m1, m2=m2, s1=s1, s2=s2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Coefficient of Variation : 45.4115573274988 
## Percent Difference : -35.647509578544 
## Effect Size : 0.784987603958648 
## Required Replicates : 25&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;versus-1997-2&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;1936 versus 1997&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;m1=268.1
m2=288.6
s1=124.8
s2=122.0
combined(m1=m1, m2=m2, s1=s1, s2=s2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Coefficient of Variation : 44.3355277160504 
## Percent Difference : -7.36482845338602 
## Effect Size : 0.166115727787307 
## Required Replicates : 569&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;versus-2006-5&#34; class=&#34;section level4&#34;&gt;
&lt;h4&gt;1997 versus 2006&lt;/h4&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;m1=288.6
m2=384.4
s1=122.0
s2=168.3
combined(m1=m1, m2=m2, s1=s1, s2=s2)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## Coefficient of Variation : 43.6803881088188 
## Percent Difference : -28.4695393759287 
## Effect Size : 0.651769377712577 
## Required Replicates : 37&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>/achalneupane.github.io/post/getting_started/</link>
      <pubDate>Thu, 15 Aug 2019 17:26:23 -0500</pubDate>
      <guid>/achalneupane.github.io/post/getting_started/</guid>
      <description>


&lt;script type=&#34;text/javascript&#34; src=&#34;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML&#34;&gt;
&lt;/script&gt;
&lt;div id=&#34;instructions&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Instructions&lt;/h1&gt;
&lt;p&gt;This document runs a simple analysis of the Table 1 from &lt;span class=&#34;citation&#34;&gt;[@wansink2009joy]&lt;/span&gt;. Edit the header information to show your name and the date you complete the assignment.&lt;/p&gt;
&lt;p&gt;Modify this document to analyze either Calories per Serving or Servings per Recipe. Document any changes you make in the literate portion of the file. Comment on your choice of measure to analyze.&lt;/p&gt;
&lt;p&gt;Change the name of this file to match your user name on D2L, keeping the ‘Rmd’ extension, and include week number in the title (for example, &lt;code&gt;Peter.Claussen.1.Rmd&lt;/code&gt;). Upload this file to D2L. Typeset this file to Word or PDF and upload the result to D2L as well.&lt;/p&gt;
&lt;div id=&#34;data&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Data&lt;/h2&gt;
&lt;table&gt;
&lt;caption&gt;Mean and (SD) for selected recipes from “Joy of Cooking”&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col width=&#34;16%&#34; /&gt;
&lt;col width=&#34;12%&#34; /&gt;
&lt;col width=&#34;12%&#34; /&gt;
&lt;col width=&#34;12%&#34; /&gt;
&lt;col width=&#34;12%&#34; /&gt;
&lt;col width=&#34;12%&#34; /&gt;
&lt;col width=&#34;12%&#34; /&gt;
&lt;col width=&#34;12%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th align=&#34;left&#34;&gt;Measure&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;1936&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;1946&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;1951&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;1963&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;1975&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;1997&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;2006&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;calories per recipe (SD)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2123.8 (1050.0)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2122.3 (1002.3)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2089.9 (1009.6)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2250.0 (1078.6)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2234.2 (1089.2)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;2249.6 (1094.8)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;3051.9 (1496.2)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td align=&#34;left&#34;&gt;calories per serving (SD)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;268.1 (124.8)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;271.1 (124.2)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;280.9 (116.2)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;294.7 (117.7)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;285.6 (118.3)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;288.6 (122.0)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;384.4 (168.3)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td align=&#34;left&#34;&gt;servings per recipe (SD)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.9 (13.3)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.9 (13.3)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;13.0 (14.5)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.7 (14.6)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.4 (14.3)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.4 (14.3)&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;12.7 (13.0)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;analysis&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Analysis&lt;/h1&gt;
&lt;div id=&#34;enter-data&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Enter data&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;CookingTooMuch.dat &amp;lt;- data.frame(
  Year=c(1936, 1946, 1951, 1963, 1975, 1997, 2006),
  CaloriesPerRecipeMean = c(2123.8, 2122.3, 2089.9, 2250.0, 2234.2, 2249.6, 3051.9),
  CaloriesPerRecipeSD = c(1050.0, 1002.3, 1009.6, 1078.6, 1089.2, 1094.8, 1496.2),
  CaloriesPerServingMean = c(268.1, 271.1, 280.9, 294.7, 285.6, 288.6, 384.4),
  CaloriesPerServingSD = c(124.8, 124.2, 116.2, 117.7, 118.3, 122.0, 168.3),
  ServingsPerRecipeMean = c(12.9, 12.9, 13.0, 12.7, 12.4, 12.4, 12.7),
  ServingsPerRecipeSD = c(13.3, 13.3, 14.5, 14.6, 14.3, 14.3, 13.0)
)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;create-values-for-confidence-interval-plot&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Create values for confidence interval plot&lt;/h3&gt;
&lt;p&gt;Wansink reports that 18 recipes were analyzed.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;n &amp;lt;- 18&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Assume a significance level &lt;span class=&#34;math inline&#34;&gt;\(\alpha\)&lt;/span&gt; of 5%.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;alpha &amp;lt;- 0.05&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Use standard formula for standard error &lt;span class=&#34;math inline&#34;&gt;\(\sigma / \sqrt{n}\)&lt;/span&gt; and confidence interval &lt;span class=&#34;math inline&#34;&gt;\(t_{\alpha/2} \times s.e.\)&lt;/span&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;StandardError &amp;lt;- function(sigma, n) {
  sigma/sqrt(n)
}
ConfidenceInterval &amp;lt;- function(sigma, n) {
  qt(1-alpha/2, Inf)*StandardError(sigma,n)
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Create a variable for plotting and calculate upper and lower bounds using confidence intervals.
For this assignment, I am plotting ServingsPerRecipe.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;PlotCookingTooMuch.dat &amp;lt;- CookingTooMuch.dat
PlotCookingTooMuch.dat$ServingsPerRecipe &amp;lt;-
  PlotCookingTooMuch.dat$ServingsPerRecipeMean
PlotCookingTooMuch.dat$Lower &amp;lt;-
  PlotCookingTooMuch.dat$ServingsPerRecipe - ConfidenceInterval(CookingTooMuch.dat$ServingsPerRecipeSD, n)
PlotCookingTooMuch.dat$Upper &amp;lt;-
  PlotCookingTooMuch.dat$ServingsPerRecipe + ConfidenceInterval(CookingTooMuch.dat$ServingsPerRecipeSD, n)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, we are selecting only ServingsPerRecipe variable for plotting.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;PlotCookingTooMuch.dat &amp;lt;-
  PlotCookingTooMuch.dat[, c(&amp;quot;Year&amp;quot;, &amp;quot;ServingsPerRecipe&amp;quot;, &amp;quot;Lower&amp;quot;, &amp;quot;Upper&amp;quot;)]&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Examine the values to make sure we’ve entered correctly.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(PlotCookingTooMuch.dat)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   Year ServingsPerRecipe    Lower    Upper
## 1 1936              12.9 6.755826 19.04417
## 2 1946              12.9 6.755826 19.04417
## 3 1951              13.0 6.301465 19.69854
## 4 1963              12.7 5.955268 19.44473
## 5 1975              12.4 5.793858 19.00614
## 6 1997              12.4 5.793858 19.00614
## 7 2006              12.7 6.694417 18.70558&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Couldn’t find the confidence intervals for ServingsPerRecipe in Wanskins report
for 1936 and 2006. So I am using the Reference CI as calculated CI using
confidence interval function above. So here, I am using ComValues as
ReferneceValues&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;CompValues &amp;lt;- PlotCookingTooMuch.dat[c(1, 7), c(&amp;quot;Lower&amp;quot;, &amp;quot;Upper&amp;quot;)]
#ReferenceValues &amp;lt;- matrix(c(1638.7, 2608.9, 2360.7, 3743.1),nrow=2,byrow=TRUE)
ReferenceValues &amp;lt;- CompValues
CompValues&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      Lower    Upper
## 1 6.755826 19.04417
## 7 6.694417 18.70558&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ReferenceValues&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      Lower    Upper
## 1 6.755826 19.04417
## 7 6.694417 18.70558&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;any(abs(CompValues - ReferenceValues) &amp;gt; 0.1)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] FALSE&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We no longer need the original data.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;CookingTooMuch.dat &amp;lt;- NULL&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;plot-the-table&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Plot the table&lt;/h1&gt;
&lt;p&gt;#Here, changed the title and y and x labels to Servings Per Recipe&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(
  ServingsPerRecipe ~ Year,
  data = PlotCookingTooMuch.dat,
  col = &amp;quot;blue&amp;quot;,
  pch = 19,
  main = &amp;quot;Servings per Recipe&amp;quot;,
  ylab = &amp;quot;Servings&amp;quot;,
  ylim = c(
    min(PlotCookingTooMuch.dat$Lower),
    max(PlotCookingTooMuch.dat$Upper)
  )
)
lines(
  ServingsPerRecipe ~ Year,
  data = PlotCookingTooMuch.dat,
  lty = &amp;quot;dashed&amp;quot;,
  col = &amp;quot;blue&amp;quot;,
  lend = 2
)
segments(
  x0 = PlotCookingTooMuch.dat$Year,
  y0 = PlotCookingTooMuch.dat$Lower,
  x1 = PlotCookingTooMuch.dat$Year,
  y1 = PlotCookingTooMuch.dat$Upper
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/achalneupane.github.io/achal.github.io/post/Getting_started_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;comments&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Comments&lt;/h1&gt;
&lt;p&gt;From this plot, it appears that average servings per recipe doesn’t seem to
change from 1936 to 2006.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;references&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;References&lt;/h1&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Processing text</title>
      <link>/achalneupane.github.io/post/processing_text/</link>
      <pubDate>Thu, 15 Aug 2019 17:26:23 -0500</pubDate>
      <guid>/achalneupane.github.io/post/processing_text/</guid>
      <description>


&lt;script type=&#34;text/javascript&#34; src=&#34;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML&#34;&gt;
&lt;/script&gt;
&lt;p&gt;There are six exercises below. You are required to provide solutions for at least four of the six. You are required to solve at least one exercise in R, and at least one in SAS. You are required to provide five solutions, each solution will be worth 10 points. Thus, you may choose to provide both R and SAS solutions for a single exercise, or you may solve five of the sixth problems, mixing the languages as you wish.&lt;/p&gt;
&lt;p&gt;If you choose SAS for an exercise, you may use &lt;code&gt;IML&lt;/code&gt;, &lt;code&gt;DATA&lt;/code&gt; operations or &lt;code&gt;PROC SQL&lt;/code&gt; at your discretion.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Warning&lt;/em&gt; I will continue restricting the use of external libraries in R, particularly &lt;code&gt;tidyverse&lt;/code&gt; libraries. You may choose to use &lt;code&gt;ggplot2&lt;/code&gt;, but take care that the plots you produce are at least as readable as the equivalent plots in base R. You will be allowed to use whatever libraries tickle your fancy in the midterm and final projects.&lt;/p&gt;
&lt;div id=&#34;reuse&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Reuse&lt;/h2&gt;
&lt;p&gt;For many of these exercises, you may be able to reuse functions written in prior homework. Define those functions here.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Functions:
# Ex 1
collapse_df &amp;lt;- function(x) {
createPattern &amp;lt;- function(n) {
sprintf(&amp;quot;(%s[^,]+),&amp;quot;, strrep(&amp;quot;[^,]+,&amp;quot;, n - 1))
}

mystring &amp;lt;-
do.call(paste, c(as.list(colnames(x)), sep = &amp;quot;,&amp;quot;, do.call(paste, c(x, sep =
&amp;quot;,&amp;quot;))))
my_pattern &amp;lt;- createPattern(ncol(x))
gsub(my_pattern, &amp;quot;\\1\n&amp;quot;, paste(mystring, collapse = &amp;quot;,&amp;quot;))
}

# Exercise 4
reformat &amp;lt;- function(x) {
x &amp;lt;-  unlist(strsplit(x, split = &amp;#39;|&amp;#39;, fixed = TRUE))
x &amp;lt;- gsub(&amp;quot; &amp;quot;, &amp;quot;&amp;quot;, x)[-1]
return(as.numeric(x))
}

# Exercise 5
# Function to calculate R-square
lm_eqn &amp;lt;- function(df) {
m &amp;lt;- lm(Weight2019 ~ Weight2015, df)

eq &amp;lt;-
substitute(
italic(Weight2019) == a + b %.% italic(Weight2015) * &amp;quot;,&amp;quot; ~  ~ italic(r) ^
2 ~ &amp;quot;=&amp;quot; ~ r2,
list(
a = format(unname(coef(m)[1]), digits = 2),
b = format(unname(coef(m)[2]), digits = 2),
r2 = format(summary(m)$r.squared, digits = 3)
)
)
as.character(as.expression(eq))

}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;exercise-1.&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Exercise 1.&lt;/h1&gt;
&lt;p&gt;Write a loop or a function to convert a matrix to a &lt;code&gt;CSV&lt;/code&gt; compatible string. Given a matrix of the form&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;C1&lt;/th&gt;
&lt;th&gt;C2&lt;/th&gt;
&lt;th&gt;C3&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;a&lt;/td&gt;
&lt;td&gt;b&lt;/td&gt;
&lt;td&gt;c&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;d&lt;/td&gt;
&lt;td&gt;e&lt;/td&gt;
&lt;td&gt;f&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;g&lt;/td&gt;
&lt;td&gt;h&lt;/td&gt;
&lt;td&gt;i&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;produce a string of the form&lt;/p&gt;
&lt;p&gt;&lt;code&gt;a,b,c\nd,e,f\ng,h,i&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;where &lt;code&gt;\n&lt;/code&gt; is the newline character.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;my.dat &amp;lt;-
  setNames(as.data.frame(matrix(
  letters[1:9], ncol = 3, byrow = TRUE
  )), c(&amp;quot;C1&amp;quot;, &amp;quot;C2&amp;quot;, &amp;quot;C3&amp;quot;))

  collapse_df(my.dat)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;C1,C2,C3\na,b,c\nd,e,f\ng,h,i&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You are only required to convert a matrix to CSV format, but you may choose to write code to convert data tables to CSV; in this case, include column names in the output string. Use &lt;code&gt;NATR332.DAT&lt;/code&gt; as a test case.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;NATR332.DAT &amp;lt;- data.frame(
  Y1 = c(146,141,135,142,140,143,138,137,142,136),
  Y2 = c(141,143,139,139,140,141,138,140,142,138)
)

# Test our function
collapse_df(NATR332.DAT)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] &amp;quot;Y1,Y2\n146,141\n141,143\n135,139\n142,139\n140,140\n143,141\n138,138\n137,140\n142,142\n136,138&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you choose SAS, I’ve include the NATR332 data table and framework code for IML in the template. I used the &lt;code&gt;CATX&lt;/code&gt; function in IML. I found I could do this in one line in R, with judicious use of &lt;code&gt;apply&lt;/code&gt;, but I haven’t found the equivalent in IML. Instead, I used a pair of nested loops to “accumulate” an increasingly longer string.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;exercise-2.&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Exercise 2.&lt;/h1&gt;
&lt;p&gt;Create an ordered treatment pairs table from the pumpkin data, as described in Homework 7. Before printing the table, iterate over each row to create a vector of row names that are more descriptive. First, use &lt;code&gt;levels&lt;/code&gt; to get the text associated with each &lt;code&gt;Class&lt;/code&gt;, then combine the &lt;code&gt;Class&lt;/code&gt; text to create a row name of the form:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Blue vs Cinderella&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;(where &lt;code&gt;Blue&lt;/code&gt; is the Class description for class 1, &lt;code&gt;Cinderella&lt;/code&gt; is the description for class 2. This text should be the row name in the row corresponding to &lt;span class=&#34;math inline&#34;&gt;\(i=1\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(j=2\)&lt;/span&gt;). You may choose to add a column with the specified descriptions, if you wish, but this must be the first column of the printed table.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pumpkins.dat = read.table(
  &amp;quot;https://raw.githubusercontent.com/achalneupane/data/master/pumpkins.csv&amp;quot;,
  header = T,
  sep = &amp;quot;,&amp;quot;
)


# There are 4 classes, so 4 choose 2:
class.level &amp;lt;- levels(pumpkins.dat$Class)
comb.matrix &amp;lt;- setNames(as.data.frame(t(combn(4,2))), c(&amp;quot;CLASSi&amp;quot;, &amp;quot;CLASSj&amp;quot;))

# Now we loop over the class level indices to get the row names
for (i in 1:nrow(comb.matrix)) {
  rownames(comb.matrix)[i] &amp;lt;-
    paste(class.level[comb.matrix$CLASSi[i]], class.level[comb.matrix$CLASSj[i]], sep = &amp;quot; Vs &amp;quot;)
}

# This is how the combination matrix would look like
comb.matrix&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                      CLASSi CLASSj
## Blue Vs Cinderella        1      2
## Blue Vs Howden            1      3
## Blue Vs Pie               1      4
## Cinderella Vs Howden      2      3
## Cinderella Vs Pie         2      4
## Howden Vs Pie             3      4&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# In addition to this, if we also want to see actual class levels on the same matrix:
for (i in 1:length(comb.matrix$V1)) {
comb.matrix$CLASSi.Names[i] &amp;lt;-   class.level[comb.matrix$CLASSi[i]]
comb.matrix$col2j.Names[i] &amp;lt;-   class.level[comb.matrix$CLASSj[i]]
}

comb.matrix&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                      CLASSi CLASSj CLASSi.Names col2j.Names
## Blue Vs Cinderella        1      2         Blue  Cinderella
## Blue Vs Howden            1      3         Blue  Cinderella
## Blue Vs Pie               1      4         Blue  Cinderella
## Cinderella Vs Howden      2      3         Blue  Cinderella
## Cinderella Vs Pie         2      4         Blue  Cinderella
## Howden Vs Pie             3      4         Blue  Cinderella&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;exercise-3.&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Exercise 3.&lt;/h1&gt;
&lt;p&gt;Calculate MSW, MSB, &lt;span class=&#34;math inline&#34;&gt;\(F\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt; for the data from Wansink Table 1 (Homework 4, Exercise 6) where&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
MSB = \frac{\sum_i n_i(x_i-\bar{x})^2}{k-1}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
MSW =  \frac{\sum_i (n_i-1)s_i^2}{N-k}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Start with the strings:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Means &amp;lt;- &amp;quot;268.1 271.1 280.9 294.7 285.6 288.6 384.4&amp;quot;
StandardDeviations &amp;lt;- &amp;quot;124.8 124.2 116.2 117.7 118.3 122.0 168.3&amp;quot;
SampleSizes &amp;lt;- &amp;quot;18 18 18 18 18 18 18&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Tokenize the strings, then convert the tokens to a create vectors of numeric values. Use these vectors to compute and print &lt;span class=&#34;math inline&#34;&gt;\(MSW\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(MSB\)&lt;/span&gt;, &lt;span class=&#34;math inline&#34;&gt;\(F\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(p\)&lt;/span&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Means&amp;lt;-strsplit(Means, split = &amp;quot; &amp;quot;)
x&amp;lt;-as.numeric(Means[[1]])
Sd&amp;lt;- strsplit(StandardDeviations, split = &amp;quot; &amp;quot;)
s&amp;lt;-as.numeric(Sd[[1]])
n&amp;lt;-strsplit(SampleSizes, split= &amp;quot; &amp;quot;)
n&amp;lt;-as.numeric(n[[1]])
k&amp;lt;-length(n)
N&amp;lt;-18*k

## MSB iteration  
sum.x=0
for (i in 1:k) {
  sum.x=sum.x + x[i]
}
x_mean=sum.x/k

ss.x=0 
for (i in 1:k){
    ss.x=ss.x + n[i]*(x[i] - x_mean)^2
}
MSB=ss.x/(k-1)
MSB&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 28815.96&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;## MSW iteration  
ss.w=0 
for (i in 1:k){
  ss.w=ss.w + ((n[i]-1)*(s[i])^2)
}
MSW=ss.w/(N-k)
MSW&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 16508.6&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;F_ratio = MSB/MSW
F_ratio&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1.745512&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;P_value = pf(F_ratio, df1=k-1, df2=N-k, lower.tail=FALSE)
P_value&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.1163133&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you use SAS, I’ve provided macro variables that can be tokenized in either macro language or using SAS functions. You can mix and match macro, DATA, IML or SQL processing as you wish, but you must write code to convert the text into numeric tokens before processing.&lt;/p&gt;
&lt;p&gt;Compare your results from previous homework, or to the resource given in previous homework, to confirm that the text was correctly converted to numeric values.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;exercise-4.&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Exercise 4.&lt;/h1&gt;
&lt;p&gt;Repeat the regression analysis from Homework 4, Exercise 5, but start with the text&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Rate &amp;lt;- &amp;quot;Rate   | 23000   | 24000   | 25000   | 26000    | 27000   | 28000   | 29000&amp;quot;
Yield &amp;lt;- &amp;quot;Yield  | 111.4216 | 155.0326 | 181.1176 | 227.5800 | 233.4623 | 242.1753 | 231.3890&amp;quot;
Rate &amp;lt;- reformat(Rate)
Yield &amp;lt;- reformat(Yield)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that by default, &lt;code&gt;strsplit&lt;/code&gt; in R will read &lt;code&gt;split&lt;/code&gt; as a regular expression, and &lt;code&gt;|&lt;/code&gt; is a special character in regular expressions. You will need to change one of the default parameters for this exercise.&lt;/p&gt;
&lt;p&gt;Tokenize these strings and convert to numeric vectors, then use these vectors to define&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
y =\left( \begin{array}{c}
111.4216 \\
155.0326 \\
\vdots \\
231.3890 
 \end{array}\right) 
 =
 \left(\begin{array}{rr}
 1 &amp;amp; 23000 \\
 1 &amp;amp; 24000  \\
\vdots &amp;amp; \vdots \\
 1 &amp;amp; 29000
 \end{array}\right) 
 \left(\begin{array}{c}
 \beta_1 \\
 \beta_2
 \end{array}\right)^t = \mathbf{X} \mathbf{\beta}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Solve for and print &lt;span class=&#34;math inline&#34;&gt;\(\hat{\beta}\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;If you use SAS, I’ve provided macro variables that can be tokenized in either macro language or using SAS functions. You can mix and match macro, DATA, IML or SQL processing as you wish, but you must write code to convert the text into numeric tokens before processing.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;y &amp;lt;- as.vector( Yield)
y&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 111.4216 155.0326 181.1176 227.5800 233.4623 242.1753 231.3890&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#creating a matrix for bias term
bias=rep(1:1, length.out=length(y))
bias&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 1 1 1 1 1 1 1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;cx &amp;lt;- Rate
X=matrix(c(bias,cx), ncol = 2)
X&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##      [,1]  [,2]
## [1,]    1 23000
## [2,]    1 24000
## [3,]    1 25000
## [4,]    1 26000
## [5,]    1 27000
## [6,]    1 28000
## [7,]    1 29000&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#multplication of transpose of x and x
tX=t(X)
tX&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##       [,1]  [,2]  [,3]  [,4]  [,5]  [,6]  [,7]
## [1,]     1     1     1     1     1     1     1
## [2,] 23000 24000 25000 26000 27000 28000 29000&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Xm=tX%*%X
Xm&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##        [,1]     [,2]
## [1,]      7 1.82e+05
## [2,] 182000 4.76e+09&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;A=solve(Xm)

hat.beta=A%*%(tX%*%y)
hat.beta&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##               [,1]
## [1,] -347.18307857
## [2,]    0.02094758&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Compare your results from previous homework, or to the resource given in previous homework, to confirm that the text was correctly converted to numeric values.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;exercise-5.&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Exercise 5.&lt;/h1&gt;
&lt;p&gt;Use the file &lt;code&gt;openmat2015.csv&lt;/code&gt; from D2L. These data are from &lt;a href=&#34;https://news.theopenmat.com/high-school-wrestling/high-school-wrestling-rankings/final-2015-clinch-gear-national-high-school-wrestling-individual-rankings/57136&#34; class=&#34;uri&#34;&gt;https://news.theopenmat.com/high-school-wrestling/high-school-wrestling-rankings/final-2015-clinch-gear-national-high-school-wrestling-individual-rankings/57136&lt;/a&gt;. This is a list of top-ranked high school wrestlers in 2015, their high &lt;code&gt;School&lt;/code&gt;, &lt;code&gt;Weight&lt;/code&gt; class and in some cases the &lt;code&gt;College&lt;/code&gt; where they expected to enroll and compete after high school.&lt;/p&gt;
&lt;p&gt;We wish to know how many went on to compete in the national championship in 2019, so we will merge this table with the data from Homework 7, &lt;code&gt;ncaa2019.csv&lt;/code&gt;. The &lt;code&gt;openmat2015.csv&lt;/code&gt; data contains only a single column, &lt;code&gt;Name&lt;/code&gt;. You will need to split the text in this column to create the columns &lt;code&gt;First&lt;/code&gt; and &lt;code&gt;Last&lt;/code&gt; required to merge with &lt;code&gt;ncaa2019.csv&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Do not print these tables in the submitted work&lt;/strong&gt; Instead, print a contingency table comparing &lt;code&gt;Weight&lt;/code&gt; for 2015 and &lt;code&gt;Weight&lt;/code&gt; for 2019. What is the relationship between high school and college weight classes? You may instead produce a scatter plot or box-whisker plot, using high school weight class as the independent variable.&lt;/p&gt;
&lt;p&gt;If you do this in SAS, use the &lt;code&gt;openmat2015SAS.csv&lt;/code&gt; file, it will import &lt;code&gt;College&lt;/code&gt; correctly.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;openmat2015 &amp;lt;-
  read.delim2(
    &amp;quot;https://raw.githubusercontent.com/achalneupane/data/master/openmat2015.csv&amp;quot;,
    header = T,
    sep = &amp;quot;,&amp;quot;
  )
openmat2015$Weight2015 &amp;lt;- openmat2015$Weight

openmat2015$First &amp;lt;- sapply(strsplit(as.character(openmat2015$Name),&amp;#39; &amp;#39;), &amp;quot;[&amp;quot;, 1)
# sapply(strsplit(as.character(openmat2015$Name),&amp;#39; &amp;#39;), function(x){x[1]})
openmat2015$Last &amp;lt;- sapply(strsplit(as.character(openmat2015$Name),&amp;#39; &amp;#39;), &amp;quot;[&amp;quot;, 2)
# sapply(strsplit(as.character(openmat2015$Name),&amp;#39; &amp;#39;), function(x){x[2]})
head(openmat2015)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   Weight Rank              Name Year           School State College
## 1    106    1       Cade Olivas  Fr.   St. John Bosco    CA        
## 2    106    2 Roman Bravo-Young  Fr.        Sunnyside    AZ        
## 3    106    3    Gavin Teasdale  Fr. Jefferson-Morgan    PA        
## 4    106    4       Drew Mattin  So.            Delta    OH        
## 5    106    5        Real Woods  Fr. Montini Catholic    IL        
## 6    106    6     Jacori Teemer  Fr.       Long Beach    NY        
##   Previous Weight2015  First        Last
## 1        1        106   Cade      Olivas
## 2        2        106  Roman Bravo-Young
## 3        3        106  Gavin    Teasdale
## 4        5        106   Drew      Mattin
## 5        6        106   Real       Woods
## 6        7        106 Jacori      Teemer&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ncaa2019.dat = read.table(
  &amp;quot;https://raw.githubusercontent.com/achalneupane/data/master/ncaa2019.csv&amp;quot;,
  header = T,
  sep = &amp;quot;,&amp;quot;
)
ncaa2019.dat$Weight2019 &amp;lt;- ncaa2019.dat$Weight

head(ncaa2019.dat)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   Weight       Last     First Finish Weight2019
## 1    125        Lee   Spencer      1        125
## 2    125    Mueller      Jack      2        125
## 3    125     Rivera Sebastian      3        125
## 4    125     Arujau    Vitali      4        125
## 5    125 Piccininni  Nicholas      5        125
## 6    125      Glory       Pat      6        125&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;merged.dat &amp;lt;- merge(x = openmat2015, y = ncaa2019.dat, by = c(&amp;quot;First&amp;quot;, &amp;quot;Last&amp;quot;), all = TRUE)
head(merged.dat)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##   First    Last Weight.x Rank          Name Year        School State
## 1  A.C. Headlee      132    3  A.C. Headlee  Sr.    Waynesburg    PA
## 2 Aaron Burkett      106   18 Aaron Burkett  Jr. Chesnut Ridge    PA
## 3  Adam  Hudson      160   17   Adam Hudson  Sr.   Shelbyville    IL
## 4    AJ Nevills       NA   NA          &amp;lt;NA&amp;gt; &amp;lt;NA&amp;gt;          &amp;lt;NA&amp;gt;  &amp;lt;NA&amp;gt;
## 5    Al Beattie      285   15    Al Beattie  Sr.       Burrell    PA
## 6  Alan    Hart      113   20     Alan Hart  So.        Edward    OH
##          College Previous Weight2015 Weight.y  Finish Weight2019
## 1 North Carolina        4        132       NA    &amp;lt;NA&amp;gt;         NA
## 2                      NR        106       NA    &amp;lt;NA&amp;gt;         NA
## 3                      NR        160       NA    &amp;lt;NA&amp;gt;         NA
## 4           &amp;lt;NA&amp;gt;     &amp;lt;NA&amp;gt;         NA      285 cons 32        285
## 5 Pitt Johnstown       18        285       NA    &amp;lt;NA&amp;gt;         NA
## 6                      17        113       NA    &amp;lt;NA&amp;gt;         NA&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;merged.dat &amp;lt;- merged.dat[!is.na(merged.dat$Weight2015) &amp;amp; !is.na(merged.dat$Weight2019),]


weight_contingency &amp;lt;-
  table(
    merged.dat$Weight2015,
    merged.dat$Weight2019,
    dnn = c(&amp;quot;Weight for 2015&amp;quot;, &amp;quot;Weight for 2019&amp;quot;)
  )

weight_contingency&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                Weight for 2019
## Weight for 2015 125 133 141 149 157 165 174 184 197 285
##             106   2   1   0   0   1   0   0   0   0   0
##             113   1   1   1   0   0   0   0   0   0   0
##             120   5   3   1   1   0   0   0   0   0   0
##             126   0   1   1   0   0   0   0   0   0   0
##             132   2   2   4   1   0   0   0   0   0   0
##             138   0   0   2   1   1   0   0   0   0   0
##             145   0   0   1   1   4   0   0   0   0   0
##             152   0   0   0   1   1   2   2   0   0   0
##             160   0   0   0   0   0   4   4   0   0   0
##             170   0   0   0   0   0   2   2   2   0   0
##             182   0   0   0   0   0   0   2   2   3   1
##             195   0   0   0   0   0   0   0   2   1   1
##             220   0   0   0   0   0   0   0   0   0   5
##             285   0   0   0   0   0   0   0   0   0   1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggplot2)
p &amp;lt;- ggplot(merged.dat, aes(x=Weight2015, y=Weight2019)) +
  geom_point( size=1, shape=21, fill=&amp;quot;white&amp;quot;) 
  # geom_abline()


# Now we paste the R-square value to our relationship plot
p + geom_text(x = 150, y = 300, label = lm_eqn(merged.dat), parse = TRUE) +
  xlab(&amp;quot;HighSchool Weight&amp;quot;) +
  ylab(&amp;quot;College Weight&amp;quot;) + 
  geom_smooth(method = &amp;#39;lm&amp;#39;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/achalneupane.github.io/achal.github.io/post/Processing_Text_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;p&gt;The relationship between highschool weight and college weight is almost linear.
# Exercise 6&lt;/p&gt;
&lt;p&gt;Use file &lt;code&gt;openmat2015.csv&lt;/code&gt; from Exercise 6, and use partial text matching to answer these questions. To show your results, print only the rows from the table that match the described text patterns, but to save space, print only &lt;code&gt;Name&lt;/code&gt;, &lt;code&gt;School&lt;/code&gt; and &lt;code&gt;College&lt;/code&gt;. Each of these can be answered in a single step.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;openmat2015 &amp;lt;-
  read.delim2(
  &amp;quot;https://raw.githubusercontent.com/achalneupane/data/master/openmat2015.csv&amp;quot;,
  header = T,
  sep = &amp;quot;,&amp;quot;
  )

# head(openmat2015)&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Which wrestlers come from a &lt;code&gt;School&lt;/code&gt; with a name starting with &lt;code&gt;St.&lt;/code&gt;?&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;openmat2015[grepl(&amp;quot;St.&amp;quot;, openmat2015$School), c(&amp;quot;Name&amp;quot;, &amp;quot;School&amp;quot;, &amp;quot;College&amp;quot;)]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                  Name                  School        College
## 1         Cade Olivas          St. John Bosco               
## 17        John Tropea     St. Joseph Montvale               
## 30        Mitch Moore        St. Paris Graham               
## 37         Joey Prata       St. Christopher&amp;#39;s               
## 50       Eli Stickley        St. Paris Graham      Wisconsin
## 64     Mitchell McKee St. Michael-Albertville  Minnesota &amp;#39;16
## 67        Eli Seipel         St. Paris Graham     Pittsburgh
## 76       Ben Lamantia            St. Anthonys       Michigan
## 82         Kaid Brock              Stillwater Oklahoma State
## 94    Austin O&amp;#39;Connor                St. Rita               
## 99    Hunter Ladnier               St. Edward               
## 128       Brent Moore        St. Paris Graham               
## 134     Tristan Moran              Stillwater Oklahoma State
## 153       Kyle Lawson        St. Paris Graham               
## 161    Alex Marinelli        St. Paris Graham       Iowa &amp;#39;16
## 182  Anthony Valencia          St. John Bosco  Arizona State
## 183       Logan Massa               St. Johns       Michigan
## 185         Joe Smith              Stillwater Oklahoma State
## 201    Zahid Valencia          St. John Bosco  Arizona State
## 217     Jordan Joseph St. Michael-Albertville               
## 251 Christian Colucci        St. Peter&amp;#39;s Prep         Lehigh
## 255   Ian Butterbrodt          St. Johns Prep          Brown&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Which wrestlers were intending to attend an Iowa &lt;code&gt;College&lt;/code&gt;?&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;openmat2015[grepl(&amp;quot;Iowa&amp;quot;, openmat2015$College), c(&amp;quot;Name&amp;quot;, &amp;quot;School&amp;quot;, &amp;quot;College&amp;quot;)]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                Name                 School       College
## 21     Justin Mejia                 Clovis      Iowa &amp;#39;17
## 24   Jason Renteria  Oak Park-River Forest      Iowa &amp;#39;17
## 65   Markus Simmons           Broken Arrow    Iowa State
## 121 Michael Kemerer      Franklin Regional          Iowa
## 122     Max Thomsen        Union Community Northern Iowa
## 155     Kaleb Young           Punxsutawney      Iowa &amp;#39;16
## 161  Alex Marinelli       St. Paris Graham      Iowa &amp;#39;16
## 166   Bryce Steiert     Waverly-Shell Rock Northern Iowa
## 176     Paden Moore Jackson County Central Northern Iowa
## 194   Isaiah Patton       Dowling Catholic Northern Iowa
## 196 Jacob Holschlag                  Union Northern Iowa
## 197 Colston DiBlasi              Park Hill    Iowa State
## 204    Taylor Lujan             Carrollton Northern Iowa
## 233     Cash Wilcke                OA-BCIG          Iowa
## 244    Ryan Parmely       Maquoketa Valley    Upper Iowa&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Which wrestlers were intending to start &lt;code&gt;College&lt;/code&gt; in 2016 or 2017 (&lt;code&gt;College&lt;/code&gt; will end with 16 or 17)?&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;openmat2015[grepl(&amp;quot;16$|17$&amp;quot;, openmat2015$College), c(&amp;quot;Name&amp;quot;, &amp;quot;School&amp;quot;, &amp;quot;College&amp;quot;)]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##               Name                  School           College
## 21    Justin Mejia                  Clovis          Iowa &amp;#39;17
## 24  Jason Renteria   Oak Park-River Forest          Iowa &amp;#39;17
## 45   Kyle Norstrem                 Brandon Virginia Tech &amp;#39;16
## 46    Jack Mueller        Wyoming Seminary      Virginia &amp;#39;16
## 51      Ty Agaisse               Delbarton     Princeton &amp;#39;16
## 64  Mitchell McKee St. Michael-Albertville     Minnesota &amp;#39;16
## 126  Hayden Hidlay          Mifflin County      NC State &amp;#39;16
## 145   Jake Wentzel              South Park          Pitt &amp;#39;16
## 155    Kaleb Young            Punxsutawney          Iowa &amp;#39;16
## 161 Alex Marinelli        St. Paris Graham          Iowa &amp;#39;16
## 186    Nick Reenan        Wyoming Seminary  Northwestern &amp;#39;16&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;Which wrestlers are intending compete in a sport other than wrestling? (look for a sport in parenthesis in the &lt;code&gt;College&lt;/code&gt; column. Note - &lt;code&gt;(&lt;/code&gt; is a special character in regular expressions, so to match the exact character, it needs to be preceded by the escape character &lt;code&gt;\&lt;/code&gt;. However, &lt;code&gt;\&lt;/code&gt; in strings is a special character, so itself must be preceded by the escape character.&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# all.sports.brackets &amp;lt;-
#   openmat2015[grepl(&amp;quot;\\(&amp;quot;, openmat2015$College), ]

openmat2015[grepl(&amp;quot;\\(&amp;quot;, openmat2015$College), ][!grepl(&amp;quot;Wrestling&amp;quot;, openmat2015[grepl(&amp;quot;\\(&amp;quot;, openmat2015$College), ]$College, ignore.case = TRUE), c(&amp;quot;Name&amp;quot;, &amp;quot;School&amp;quot;, &amp;quot;College&amp;quot;)]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                Name           School                      College
## 218    Chase Osborn             Penn         Minnesota (Baseball)
## 225   Tevis Barlett    Cheyenne East              Washington (FB)
## 230     Jan Johnson Governor Mifflin                    Akron(FB)
## 261 Michael Johnson Montini Catholic              Yale (Football)
## 264   Gage Cervenka          Emerald           Clemson (Football)
## 267     Jake Marnin   Southeast Polk Southern Illinois (Football)
## 277     Que Overton            Jenks          Oklahoma (Football)
## 279  Norman Oglesby   Benjamin Davis        Cincinnati (Football)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Resampling</title>
      <link>/achalneupane.github.io/post/resampling/</link>
      <pubDate>Thu, 15 Aug 2019 17:26:23 -0500</pubDate>
      <guid>/achalneupane.github.io/post/resampling/</guid>
      <description>


&lt;script type=&#34;text/javascript&#34; src=&#34;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-MML_HTMLorMML&#34;&gt;
&lt;/script&gt;
&lt;div id=&#34;instructions&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Instructions&lt;/h1&gt;
&lt;p&gt;There are four exercises below. All are optional. You may solve these, one solution per exercise, and submit them for extra credit. You use R, SAS or Python as you wish.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;exercise-1.&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Exercise 1.&lt;/h1&gt;
&lt;p&gt;Consider the Hidalgo data set from Homework 9. Load the data, and calculate mean and median.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;hidalgo.dat = read.table(&amp;quot;/Users/owner1/Box/sdsu/statistical_programming_course/Week_9/hidalgo.dat&amp;quot;,
                         header = T,
                         sep = &amp;quot;,&amp;quot;
)

mean.hidalgo &amp;lt;- mean(hidalgo.dat$X.060)
mean.hidalgo&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.08607851&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;median.hidalgo &amp;lt;- median(hidalgo.dat$X.060)
median.hidalgo&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.08&lt;/code&gt;&lt;/pre&gt;
&lt;div id=&#34;part-a.&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Part a.&lt;/h3&gt;
&lt;p&gt;Calculate a jackknife estimate of the mean, and jackknife standard error of the mean, of these data. Are these values what you expect?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;y &amp;lt;- hidalgo.dat$X.060
n &amp;lt;- length(y)
hat.theta.rep &amp;lt;- {}
for(i in 1:n){
  hat.theta.rep[i] = mean(y[-i])
}
bar.theta &amp;lt;- mean(hat.theta.rep)
# jackknife estimate of the mean
bar.theta&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.08607851&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;hat.theta &amp;lt;- mean.hidalgo
# bias
print(bias.jack &amp;lt;- (n-1) * (bar.theta - hat.theta))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;#jackknife standard error for mean would be 
jackknife.stderr.mean &amp;lt;- sqrt((n-1) * mean((hat.theta.rep - mean(hat.theta.rep))^2))
jackknife.stderr.mean&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.0006787497&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# which can also be calculated as:
variance.of.hat.theta.rep &amp;lt;- var(hat.theta.rep)
jackknife.var = ((n-1)^2/n)*variance.of.hat.theta.rep
jackknife.stderr.mean = sqrt(jackknife.var)
jackknife.stderr.mean&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.0006787497&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Yes, I think these values are what we should expect.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;part-b.&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Part b.&lt;/h3&gt;
&lt;p&gt;Calculate a jackknife estimate of the median, and jackknife standard error of the median, of these data. Are these values what you expect?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;print(hat.theta &amp;lt;- median(y))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.08&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;  n &amp;lt;- length(y)
  hat.theta.rep &amp;lt;- {}
  for(i in 1:n){
    hat.theta.rep[i] = median(y[-i])
  }
  bar.theta &amp;lt;- mean(hat.theta.rep)
  bar.theta&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.08&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;  hat.theta &amp;lt;- median.hidalgo
  # bias
  print(bias.jack &amp;lt;- (n-1) * (bar.theta - hat.theta))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;  #jackknife standard error for median would be 
  jackknife.stderr.median &amp;lt;- sqrt((n-1) * mean((hat.theta.rep - mean(hat.theta.rep))^2))
  jackknife.stderr.median&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;  # # Also can be calculated as
  # variance.of.ests &amp;lt;- var(hat.theta.rep)
  # jackknife.var = ((n-1)^2/n)*variance.of.ests
  # jackknife.stderr = sqrt(jackknife.var)
  # jackknife.stderr
  
  # Or as:
  
  # n &amp;lt;-length(y)
  # theta &amp;lt;- median(y)
  # jk &amp;lt;- sapply(1:n, function(i) median(y[-i]))
  # 
  # thetaBar &amp;lt;- mean(jk)
  # thetaBar
  # biasEst &amp;lt;- (n - 1) * (thetaBar - theta)
  # biasEst
  # seEst &amp;lt;- sqrt((n - 1) * mean((jk - thetaBar) ^ 2))
  # seEst
  
  
  
  # # To check our answer, we can check with the bootstrap package
  # 
  # library(bootstrap)
  # out &amp;lt;- jackknife(y, median)
  # out$jack.se
  # out$jack.bias&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;part-c.&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Part c.&lt;/h3&gt;
&lt;p&gt;Calculate a bootstrap estimate of the mean, and of the median, of the Hidalgo data. Use &lt;span class=&#34;math inline&#34;&gt;\(B = 1000\)&lt;/span&gt; samples.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt; B &amp;lt;- 1000
  star.theta.rep &amp;lt;- rep(0,B)
  star.theta &amp;lt;- mean(y)
  for(i in 1:B) {
    star.theta.rep[i] &amp;lt;- mean(sample(y,replace=TRUE))
  }
  # bootstrap estimate of the mean
  star.bar.theta &amp;lt;- mean (star.theta.rep)
  star.bar.theta&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.08609793&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;  # BS estimate of standard error for mean
  se.boot.mean &amp;lt;- sd(star.theta.rep - mean(star.theta.rep))
  se.boot.mean&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.0006879024&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;  bstraps &amp;lt;- c()
  for (i in 1:1000) {
    bsample &amp;lt;- sample(y, length(y), replace=T)
    bstraps &amp;lt;- c(median(bsample), bstraps)}
  star.hat.theta &amp;lt;- median(bstraps)
  
  # bootstrap estimate of median
  star.hat.theta&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.08&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;  # BS estimate of standard error for mean
  se.boot.median &amp;lt;- sd(star.theta.rep - median(star.theta.rep))
  se.boot.median&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.0006879024&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;part-d.&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Part d.&lt;/h3&gt;
&lt;p&gt;When data are normally distributed, and for large samples, the standard error of the median can be approximated by
&lt;span class=&#34;math display&#34;&gt;\[
s.e._{med} = 1.253 \times s.e._{mean}
\]&lt;/span&gt;
where &lt;span class=&#34;math inline&#34;&gt;\(s.e._{mean} = \sigma /\sqrt{n}\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;How do the jackknife and bootstrap estimates of standard error compare to the parametric estimates?&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;std &amp;lt;- function(x) sd(x)/sqrt(length(x))
s.e.mean &amp;lt;- std(hidalgo.dat$X.060)
s.e.mean&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.0006787497&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;s.e.median &amp;lt;- s.e.mean * 1.253
s.e.median&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.0008504733&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# compared to 
jackknife.stderr.mean&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.0006787497&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;jackknife.stderr.median&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;se.boot.mean&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.0006879024&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;se.boot.median&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.0006879024&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;exercise-2.&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Exercise 2.&lt;/h1&gt;
&lt;p&gt;Consider the data from Homework 6.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;NATR332.DAT &amp;lt;- data.frame(
  Y1 = c(146,141,135,142,140,143,138,137,142,136),
  Y2 = c(141,143,139,139,140,141,138,140,142,138)
)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let &lt;span class=&#34;math inline&#34;&gt;\(\theta\)&lt;/span&gt; be the ratio of the two population means:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\theta = \frac{\mu_{Y1}}{\mu_{Y2}}
\]&lt;/span&gt;
Calculate jackknife and bootstrap estimates for &lt;span class=&#34;math inline&#34;&gt;\(\widehat{\theta}\)&lt;/span&gt;, and for the standard error for &lt;span class=&#34;math inline&#34;&gt;\(\widehat{\theta}\)&lt;/span&gt;.&lt;/p&gt;
&lt;div id=&#34;part-a.-jacknife.&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Part a. Jacknife.&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;  n &amp;lt;- nrow(NATR332.DAT)
  y &amp;lt;- NATR332.DAT$Y1
  z &amp;lt;- NATR332.DAT$Y2
  theta.hat &amp;lt;- mean(y)/ mean(z)
  
  # computing jackknife replicates leaving one-out estimates
  theta.jack &amp;lt;- numeric(n)
  
  for( i in 1:n){
    theta.jack[i] &amp;lt;- mean(y[-i])/mean(z[-1])
  }
  bias &amp;lt;- (n-1) * (mean(theta.jack)- theta.hat)
  bias&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.006423983&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;  # now, we calculate standard error for jackknife
  se.jack &amp;lt;- sqrt((n-1) * mean((theta.jack - mean(theta.jack))^2))
  se.jack&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.007824608&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;part-b.-bootstrap.&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Part b. Bootstrap.&lt;/h3&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# For Bootstrap
  
  # let
  B = 1000
  theta.b &amp;lt;- numeric(B)
  theta.hat &amp;lt;- mean(NATR332.DAT$Y1)/mean(NATR332.DAT$Y2)
  
  n &amp;lt;- nrow(NATR332.DAT)
  
  for(b in 1:B){
    i &amp;lt;- sample (1:n, size = n, replace = TRUE)
    y &amp;lt;- NATR332.DAT$Y1[i]
    z &amp;lt;- NATR332.DAT$Y2[i]
    theta.b[b] &amp;lt;- mean(y)/mean(z)
  }
  
  bias &amp;lt;- mean(theta.b) - theta.hat
  se.boot &amp;lt;- sd(theta.b)
  
  print(list(est = theta.hat, bias = bias, cv  = bias/se.boot, standard_error_bootstrap = se.boot))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $est
## [1] 0.9992862
## 
## $bias
## [1] 7.696709e-05
## 
## $cv
## [1] 0.012534
## 
## $standard_error_bootstrap
## [1] 0.006140666&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;exercise-3&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Exercise 3&lt;/h1&gt;
&lt;div id=&#34;part-a.-1&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Part a.&lt;/h3&gt;
&lt;p&gt;Consider the ELO data. Subset the data to exclude non-qualifiers - &lt;code&gt;NQ&lt;/code&gt; - then create a factor &lt;code&gt;AA&lt;/code&gt;. This will indicate if the wrestler that as All-American (top 8 places), or did not place in the tournament. Use &lt;code&gt;ActualFinish&lt;/code&gt; equals &lt;code&gt;AA&lt;/code&gt;. Next, calculate an effect size &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt; for the difference in ELO scores between All-American and non-All-American wrestlers; you will need to calculate means and standard deviations as necessary. Since the populations are unbalanced, you will need to use a pooled sd of the form&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
s_{pooled} = \sqrt{\frac{(n_1-1) s_1^2 + (n_2-1) s_2^2} {n_1 + n_2 -2}}
\]&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;elo.dat &amp;lt;- read.table(&amp;quot;/Users/owner1/Box/sdsu/statistical_programming_course/Week5/elo.csv&amp;quot;, header = TRUE, row.names = 1, sep = &amp;quot;,&amp;quot;)
head(elo.dat)&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##    Weight Conference     ELO ActualFinish ExpectedFinish
## 3     125        ACC 1380.84      cons 24     E[cons 16]
## 4     125        ACC 1404.51      cons 12     E[cons 12]
## 5     125        ACC 1348.79      cons 24     E[cons 24]
## 6     125     Big 12 1312.73      cons 32          E[NQ]
## 8     125     Big 12 1373.79      cons 24     E[cons 16]
## 12    125     Big 12 1398.16      cons 12          E[NQ]&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;elo.exNQ &amp;lt;- elo.dat[!grepl(&amp;quot;NQ&amp;quot;, elo.dat$ExpectedFinish),]
# elo.exNQ$ActualFinish &amp;lt;- as.factor(elo.exNQ$ActualFinish[grepl(&amp;quot;AA&amp;quot;, elo.exNQ$ActualFinish)])

# Creating a new column with AA and other
elo.exNQ$AA.Other &amp;lt;- as.factor(ifelse(grepl(&amp;#39;AA&amp;#39;, elo.exNQ$ActualFinish), &amp;#39;AA&amp;#39;,
                            ifelse(!grepl(&amp;#39;AA&amp;#39;, elo.exNQ$ActualFinish), &amp;#39;Other&amp;#39;, NA)))

# # meand AA
# mean.dat &amp;lt;- setNames(aggregate(elo.exNQ$ELO, list(elo.exNQ$AA.Other), mean), c(&amp;quot;group&amp;quot;, &amp;quot;mean&amp;quot;))
# sd.dat &amp;lt;- setNames(aggregate(elo.exNQ$ELO, list(elo.exNQ$AA.Other), sd), c(&amp;quot;group&amp;quot;, &amp;quot;SD&amp;quot;))
# count.dat &amp;lt;- setNames(aggregate(elo.exNQ$ELO, list(elo.exNQ$AA.Other), length), c(&amp;quot;group&amp;quot;, &amp;quot;Count&amp;quot;))

mean.dat &amp;lt;- setNames(aggregate(elo.exNQ$ELO, list(elo.exNQ$ExpectedFinish), mean), c(&amp;quot;group1&amp;quot;, &amp;quot;mean&amp;quot;))
sd.dat &amp;lt;- setNames(aggregate(elo.exNQ$ELO, list(elo.exNQ$ExpectedFinish), sd), c(&amp;quot;group1&amp;quot;, &amp;quot;SD&amp;quot;))
count.dat &amp;lt;- setNames(aggregate(elo.exNQ$ELO, list(elo.exNQ$ExpectedFinish), length), c(&amp;quot;group1&amp;quot;, &amp;quot;Count&amp;quot;))



Mean_SD_Count.dat &amp;lt;- Reduce(function(...)
  merge(..., by = c(&amp;quot;group1&amp;quot;), all.x = TRUE),
  lapply(
    list(mean.dat, sd.dat, count.dat),
    transform
    # grp = ave(seq_along(group), group, FUN = seq_along)
  ))

# Here as well, we will relabel our groups as &amp;#39;AA&amp;#39; and &amp;#39;Other&amp;#39;
Mean_SD_Count.dat$group &amp;lt;- as.factor(ifelse(grepl(&amp;#39;AA&amp;#39;, Mean_SD_Count.dat$group1), &amp;#39;AA&amp;#39;,
                       ifelse(!grepl(&amp;#39;AA&amp;#39;, Mean_SD_Count.dat$group1), &amp;#39;Other&amp;#39;, NA)))

sd_pooled  &amp;lt;- lapply( split(Mean_SD_Count.dat, Mean_SD_Count.dat$group),
                                  function(dd) sqrt( sum( dd$SD^2 * (dd$Count-1) )/(sum(dd$Count-1)-nrow(dd)) ) )
sd_pooled&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## $AA
## [1] 41.31208
## 
## $Other
## [1] 16.58026&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Now we get the mean of mean
Mean &amp;lt;- lapply(split(Mean_SD_Count.dat, Mean_SD_Count.dat$group), function(dd) mean(dd$mean))

# Now  for Counts
Count &amp;lt;- lapply(split(Mean_SD_Count.dat, Mean_SD_Count.dat$group), function(dd) sum(dd$Count))
# combine two lists as a dataframe
table.mean.sd &amp;lt;- do.call(rbind, Map(data.frame, Mean = Mean, sd_pooled = sd_pooled, Count = Count))


cohen.d &amp;lt;- function(m1, s1, m2, s2){
  cohens_d &amp;lt;-(abs(m1-m2)/sqrt((s1^2+s2^2)/2))
  return(cohens_d)
}

required.replicates &amp;lt;- function (m1, s1, m2, s2, alpha=0.05, beta=0.2){
  n &amp;lt;- 2* ((((sqrt((s1^2 + s2^2)/2))/(m1-m2))^2) * (qnorm((1-alpha/2)) + qnorm((1-beta)))^2) 
  return(round(n,0))
}


effect_size &amp;lt;- cohen.d(
  m1 = table.mean.sd$Mean[1],
  s1 = table.mean.sd$sd_pooled[1],
  m2 = table.mean.sd$Mean[2],
  s2 = table.mean.sd$sd_pooled[2]
)
effect_size&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 2.687879&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;Req.Replicates &amp;lt;- required.replicates(
  m1 = table.mean.sd$Mean[1],
  s1 = table.mean.sd$sd_pooled[1],
  m2 = table.mean.sd$Mean[2],
  s2 = table.mean.sd$sd_pooled[2]
)
Req.Replicates&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 2&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;part-b.-1&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Part b.&lt;/h3&gt;
&lt;p&gt;Calculate jackknife and bootstrap estimates of the error of &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt;. Since ELO is determined by a wrestlers success within a weight class, you will need to honor this grouping (or sampling) of the data. Calculate the jackknife by excluding one &lt;code&gt;Weight&lt;/code&gt; at a time from the data, and recalculating &lt;span class=&#34;math inline&#34;&gt;\(d\)&lt;/span&gt;; since there are 10 weight classes there should be 10 jackknife replicates.&lt;/p&gt;
&lt;p&gt;For the bootstrap, sample from the 10 weight classes (use &lt;code&gt;unique&lt;/code&gt; or &lt;code&gt;levels&lt;/code&gt;). Note that you will not be able simply subset the data on something like &lt;code&gt;Weight %in% samples&lt;/code&gt;, since the bootstrap will require duplicate samples. Instead, iterate over weight class samples and merge subsets of the original data.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;part-c.-1&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Part c.&lt;/h3&gt;
&lt;p&gt;Compare your estimates of standard error to the parametric estimate, approximated by&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
s.e._d ~ \sqrt{\frac{n_1 + n_2}{n_1 n_2} + \frac{d^2} {2(n_1 + n_2)}}
\]&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;n1 = table.mean.sd$Count[1]
n2 = table.mean.sd$Count[2]
d = effect_size

# parametric estimate of standard error
s.e_d &amp;lt;- sqrt((((n1 + n2)/(n1*n2))) + ((d^2)/(2*(n1+n2))))
s.e_d&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0.1778143&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;exercise-4&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Exercise 4&lt;/h1&gt;
&lt;p&gt;Consider the data for U.S. Wholesale price for pumpkins 2018 in &lt;code&gt;pumpkins.csv&lt;/code&gt;.&lt;/p&gt;
&lt;div id=&#34;part-a.-2&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Part a.&lt;/h3&gt;
&lt;p&gt;Load the data, and calculate the &lt;span class=&#34;math inline&#34;&gt;\(F\)&lt;/span&gt; test and the parametric &lt;span class=&#34;math inline&#34;&gt;\(P(&amp;gt;F)\)&lt;/span&gt; using the code below. (set &lt;code&gt;eval=TRUE&lt;/code&gt;).&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;pumpkins.dat &amp;lt;- read.csv(&amp;quot;/Users/owner1/Box/sdsu/statistical_programming_course/Week5/pumpkins.csv&amp;quot;, header = TRUE, sep = &amp;quot;,&amp;quot;)
attach(pumpkins.dat)
# print(summary(pumpkins.dat))&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(aov(Price ~ Class, data=pumpkins.dat))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##             Df Sum Sq Mean Sq F value   Pr(&amp;gt;F)    
## Class        3  44687   14896   94.03 4.42e-14 ***
## Residuals   26   4119     158                     
## ---
## Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tt &amp;lt;- summary(aov(Price ~ Class, data = pumpkins.dat))
# p value
tt[[1]][[&amp;quot;Pr(&amp;gt;F)&amp;quot;]][1]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 4.421291e-14&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# F test
tt[[1]][[&amp;quot;F value&amp;quot;]][1]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 94.03394&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;part-b.-2&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Part b.&lt;/h3&gt;
&lt;p&gt;Permute &lt;code&gt;Price&lt;/code&gt; over &lt;code&gt;Class&lt;/code&gt; - that assume create a new data set on the assumption that &lt;code&gt;Class&lt;/code&gt; has not influence on &lt;code&gt;Price&lt;/code&gt;. Do this 1000 times, and calculate the &lt;span class=&#34;math inline&#34;&gt;\(F\)&lt;/span&gt; ratio for each. Plot the distribution of &lt;span class=&#34;math inline&#34;&gt;\(F\)&lt;/span&gt;, and calculate how many &lt;span class=&#34;math inline&#34;&gt;\(F\)&lt;/span&gt; are greater than the &lt;span class=&#34;math inline&#34;&gt;\(F\)&lt;/span&gt; from part a. How does this compare with the parametric estimate for &lt;span class=&#34;math inline&#34;&gt;\(P(&amp;gt;F\)&lt;/span&gt;? Do you need to increase the number of permutations?&lt;/p&gt;
&lt;p&gt;Answer: I do not see any of the calculated F-statistics greater then the F-statistics calculated from part a. Perhaps I need to increase the number of permutations.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;B &amp;lt;- 1000
perm.theta.rep &amp;lt;- rep(0,B)
F_ratio &amp;lt;- {}
for(i in 1:B) {
  y.s &amp;lt;- sample(Price)
  gg &amp;lt;- aov(y.s ~ Class)
  # summary(tt)[[1]][[&amp;quot;Pr(&amp;gt;F)&amp;quot;]]
  F_ratio.tmp &amp;lt;- summary(gg)[[1]][[&amp;quot;F value&amp;quot;]][1]
  F_ratio &amp;lt;- c(F_ratio, F_ratio.tmp)
}

F_ratio[1:10]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] 2.0607382 0.3019736 0.3944886 1.8049371 9.4249732 0.5467785 0.6190417
##  [8] 4.1575200 0.8452027 1.1795127&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Distribution of F-ratio
hist(F_ratio)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/achalneupane.github.io/achal.github.io/post/Resampling_files/figure-html/unnamed-chunk-15-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# how many $F$ are greater than the $F$ from part a
sum(F_ratio &amp;gt; tt[[1]][[&amp;quot;F value&amp;quot;]][1])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;part-c.-2&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Part c.&lt;/h3&gt;
&lt;p&gt;Repeat part b, but this time, honor the &lt;code&gt;Week&lt;/code&gt; grouping. That is, permute &lt;code&gt;Price&lt;/code&gt; over &lt;code&gt;Class&lt;/code&gt; only within observations grouped by &lt;code&gt;Week&lt;/code&gt;. Compare this to&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(aov(Price ~ Class + as.factor(Week), data=pumpkins.dat))&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##                 Df Sum Sq Mean Sq F value   Pr(&amp;gt;F)    
## Class            3  44687   14896  76.833 3.75e-11 ***
## as.factor(Week)  6    241      40   0.207     0.97    
## Residuals       20   3877     194                     
## ---
## Signif. codes:  0 &amp;#39;***&amp;#39; 0.001 &amp;#39;**&amp;#39; 0.01 &amp;#39;*&amp;#39; 0.05 &amp;#39;.&amp;#39; 0.1 &amp;#39; &amp;#39; 1&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;B &amp;lt;- 1000
perm.theta.rep &amp;lt;- rep(0,B)
F_ratio &amp;lt;- {}
for(i in 1:B) {
  y.s &amp;lt;- sample(Price)
  gg &amp;lt;- aov(y.s ~ Class + as.factor(Week))
  # summary(tt)[[1]][[&amp;quot;Pr(&amp;gt;F)&amp;quot;]]
  F_ratio.tmp &amp;lt;- summary(gg)[[1]][[&amp;quot;F value&amp;quot;]][1]
  F_ratio &amp;lt;- c(F_ratio, F_ratio.tmp)
}

F_ratio[1:10]&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;##  [1] 0.7431674 2.1164829 0.2572306 0.2782830 0.7235510 0.3795191 2.1433168
##  [8] 0.9127464 0.3869931 0.9630900&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# Distribution of F-ratio
hist(F_ratio)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/achalneupane.github.io/achal.github.io/post/Resampling_files/figure-html/unnamed-chunk-17-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tt &amp;lt;- summary(aov(Price ~ Class + as.factor(Week), data = pumpkins.dat))
sum(F_ratio &amp;gt; tt[[1]][[&amp;quot;F value&amp;quot;]][1])&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;## [1] 0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which are more appropriate for these data?&lt;/p&gt;
&lt;p&gt;I think having more number of permutations help in getting better statistics for these data.&lt;/p&gt;
&lt;p&gt;Comments:
Ex 3. For the bootstrap, something like&lt;/p&gt;
&lt;p&gt;weights &amp;lt;- unique(elo.dat&lt;span class=&#34;math inline&#34;&gt;\(Weight) for (i in 1:samples) { weight.samples &amp;lt;- sample(weights,replace=TRUE) elo.sub &amp;lt;- c() for(w in weight.samples) { elo.sub &amp;lt;- elo.dat[(elo.dat\)&lt;/span&gt;Weight == w),]
}&lt;/p&gt;
&lt;p&gt;It is a harder exercise, because we need to respect the sampling method of the original data, and for these data, wrestlers are grouped by weight class, so we need to sample weight classes. Similarly, for Ex 4, we want to sample Price observations within Week groups, so&lt;/p&gt;
&lt;p&gt;weeks &amp;lt;- unique(pumpkins.dat&lt;span class=&#34;math inline&#34;&gt;\(Week) for(i in 1:10000) {  for(week in weeks) {  mask &amp;lt;- pumpkins.dat\)&lt;/span&gt;Week==week
pumpkins.dat&lt;span class=&#34;math inline&#34;&gt;\(Price[mask] &amp;lt;- sample(pumpkins.dat\)&lt;/span&gt;Price[mask])
}
pumpkins.dat&lt;span class=&#34;math inline&#34;&gt;\(Price[mask] &amp;lt;-sample(pumpkins.dat\)&lt;/span&gt;Price[mask])
}&lt;/p&gt;
&lt;p&gt;Consider if Ex 4 had been executed as a randomized complete block design, with Week as block. You would have independently randomized and applied treatment (Class) to each experimental unit within the block. We need to do the same thing with the bootstrap.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Roles of argonautes  and dicers on Sclerotinia sclerotiorum antiviral RNA silencing</title>
      <link>/achalneupane.github.io/publication/neupane_etal_2019_frontiers/</link>
      <pubDate>Tue, 30 Jul 2019 00:00:00 -0500</pubDate>
      <guid>/achalneupane.github.io/publication/neupane_etal_2019_frontiers/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;RNA silencing or RNA interference (RNAi) is an essential mechanism in animals, fungi, and plants that functions in gene regulation and defense against foreign nucleic acids. In fungi, RNA silencing has been shown to function primarily in defense against invasive nucleic acids. We previously determined that mycoviruses are triggers and targets of RNA silencing in Sclerotinia sclerotiorum. However, recent progresses in RNAi or dsRNA-based pest control requires more detailed characterization of the RNA silencing pathways in S. sclerotiorum to investigate the utility of dsRNA-based strategy for white mold control. This study elucidates the roles of argonaute enzymes, agl-2 and agl-4, in small RNA metabolism in S. sclerotiorum. Gene disruption mutants of agl-2 and agl-4 were compared for changes in phenotype, virulence, viral susceptibility, and small RNA profiles. The Δagl-2 mutant but not the Δagl-4 mutant had significantly slower growth and virulence prior to virus infection. Similarly, the Δagl-2 mutant but not the Δagl-4 mutant, showed greater debilitation under virus infection compared to uninfected strains. The responses were confirmed in complementation studies and revealed the antiviral role of agl-2. Gene disruption mutants of agl-2, agl-4, Dicer-like (dcl)-1, and dcl-2 did not change the stability of the most abundant endogenous small RNAs, which suggests the existence of alternative enzymes/pathways for small RNA biogenesis in S. sclerotiorum. Furthermore, in vitro synthesized dsRNA targeting agl-2 showed a significantly reduced average lesion diameter (P &amp;lt; 0.05) on canola leaves with agl-2 down-regulated compared to controls. This is the first report describing the effectiveness of RNA pesticides targeting S. sclerotiorum RNA silencing pathway for the control of the economically important pathogen.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Profiling the Classes of the RNA Editing in Virus-derived small RNAs in White Mold Sclerotinia sclerotiorum</title>
      <link>/achalneupane.github.io/talk/asv_2019/</link>
      <pubDate>Wed, 24 Jul 2019 00:00:00 -0500</pubDate>
      <guid>/achalneupane.github.io/talk/asv_2019/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Profiling the classes of the RNA silencing, also known as RNA interference, is
an essential mechanism in plants, animals and fungi
that functions in gene regulation and defense against
foreign nucleic acids. In fungi, RNA silencing has
been shown to function primarily in defense against
invasive nucleic acids. RNA-silencing- deficient fungi
show increased susceptibility to virus infection. Little
is known about the classes of RNA editing in virus-
derived small RNA which will teach us the nature
of self-nonself recognition and ways to modulate
RNA modification to control fungal infections.
The present study dissects the RNA silencing pathway
in &lt;em&gt;S&lt;/em&gt;. &lt;em&gt;sclerotiorum&lt;/em&gt; by disrupting its key silencing
genes using the split-marker recombination method
in order to probe the contributions of these genes,
specifically argonautes, to fungal virulence and viral
defense mechanisms. Following gene disruption,
mutants were studied for changes in phenotype,
pathogenicity, viral susceptibility, and small RNA
processing compared to the wild-type strain, DK3.
Among the argonaute mutants, the agl-2 mutant
had significantly slower growth and virulence prior
to and following virus infection. Additional analyses
indicated that the virus-infected wild-type strain
accumulated virus-derived small RNAS (vsiRNAs)
with distinct patterns of internal and terminal
nucleotide mismatches. Dicer 1 mutant produced
less vsiRNA compared to dicer 2 mutant and the wild
type strain, suggesting the two dicers are not in the
state of complete redundancy. This finding expands
our overall understanding of S. sclerotiorum and has
important implications for any current or future uses
of dsRNA and mycoviruses as disease control agents.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Identification and Characterization of Mitogen-Activated Protein Kinase (MAPK) Genes in Sunflower (Helianthus annuus L.)</title>
      <link>/achalneupane.github.io/publication/surendra_et_al_2019_plants/</link>
      <pubDate>Tue, 22 Jan 2019 00:00:00 -0600</pubDate>
      <guid>/achalneupane.github.io/publication/surendra_et_al_2019_plants/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Mitogen-Activated Protein Kinase (MAPK) genes encode proteins that regulate biotic and abiotic stresses in plants through signaling cascades comprised of three major subfamilies: MAP Kinase (MPK), MAPK Kinase (MKK), and MAPKK Kinase (MKKK). The main objectives of this research were to conduct genome-wide identification of MAPK genes in Helianthus annuus and examine functional divergence of these genes in relation to those in nine other plant species (Amborella trichopoda, Aquilegia coerulea, Arabidopsis thaliana, Daucus carota, Glycine max, Oryza sativa, Solanum lycopersicum, Sphagnum fallax, and Vitis vinifera), representing diverse taxonomic groups of the Plant Kingdom. A Hidden Markov Model (HMM) profile of the MAPK genes utilized reference sequences from A. thaliana and G. max, yielding a total of 96 MPKs and 37 MKKs in the genomes of A. trichopoda, A. coerulea, C. reinhardtii, D. carota, H. annuus, S. lycopersicum, and S. fallax. Among them, 28 MPKs and eight MKKs were confirmed in H. annuus. Phylogenetic analyses revealed four clades within each subfamily. Transcriptomic analyses showed that at least 19 HaMPK and seven HaMKK genes were induced in response to salicylic acid (SA), sodium chloride (NaCl), and polyethylene glycol (Peg) in leaves and roots. Of the seven published sunflower microRNAs, five microRNA families are involved in targeting eight MPKs. Additionally, we discussed the need for using MAP Kinase nomenclature guidelines across plant species. Our identification and characterization of MAP Kinase genes would have implications in sunflower crop improvement, and in advancing our knowledge of the diversity and evolution of MAPK genes in the Plant Kingdom.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Roles of Dicers and Argonautes on Sclerotinia sclerotiorum Antiviral Small RNA Processing</title>
      <link>/achalneupane.github.io/talk/pag_2019/</link>
      <pubDate>Sat, 12 Jan 2019 00:00:00 -0600</pubDate>
      <guid>/achalneupane.github.io/talk/pag_2019/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;ProfilingRNA silencing, also known as RNA interference, is an essential mechanism in plants, animals and fungi that functions in gene regulation and defense against foreign nucleic acids. In fungi, RNA silencing has been shown to function primarily in defense against invasive nucleic acids. RNA-silencing- deficient fungi show increased susceptibility to virus infection. Plant pathogenic fungi also utilize RNA silencing to silence plant host immunity genes through the delivery of fungal small RNAs into plants. This cross-kingdom RNA silencing facilitates fungal infection of plants. Overall, these findings demonstrate the significant contributions of fungal RNA silencing pathways to fungal virulence and viral defense. This study dissects the RNA silencing pathway in S. sclerotiorum by disrupting its key silencing genes using the split-marker recombination method in order to probe the contributions of these genes, specifically argonautes, to fungal virulence and viral defense mechanisms. Following gene disruption, mutants were studied for changes in phenotype, pathogenicity, viral susceptibility, and small RNA processing compared to the wild-type strain, DK3. Among the argonaute mutants, the ∆agl-2 mutant had significantly slower growth and virulence prior to and following virus infection. Additional studies indicated that the virus-infected wild-type strain accumulated virus-derived smallRNAs(vsiRNAs) with distinct patterns of internal and terminal nucleotide mismatches. Additionally, dicer 1 mutant produced less vsiRNA compared to dicer 2 mutant and the wild type strain. These results together support that S. sclerotiorum has robust RNAsilencing mechanisms that function primarily in antiviral defense but also in endogenous gene regulation processes. This finding expands our overall understanding of S. sclerotiorum and has important implications for any current or future uses of mycoviruses as biological control agents, an emerging area of interest in fungal control research.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Metatranscriptomic analysis and in silico approach identified mycoviruses in the arbuscular mycorrhizal fungus Rhizophagus spp.</title>
      <link>/achalneupane.github.io/publication/neupane_etal_viruses_2018/</link>
      <pubDate>Wed, 12 Dec 2018 00:00:00 -0600</pubDate>
      <guid>/achalneupane.github.io/publication/neupane_etal_viruses_2018/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Arbuscular mycorrhizal fungi (AMF), including Rhizophagus spp., can play important roles in nutrient cycling of the rhizosphere. However, the effect of virus infection on AMF’s role in nutrient cycling cannot be determined without first knowing the diversity of the mycoviruses in AMF. Therefore, in this study, we sequenced the R. irregularis isolate-09 due to its previously demonstrated high efficiency in increasing the N/P uptake of the plant. We identified one novel mitovirus contig of 3685 bp, further confirmed by reverse transcription-PCR. Also, publicly available Rhizophagus spp. RNA-Seq data were analyzed to recover five partial virus sequences from family Narnaviridae, among which four were from R. diaphanum MUCL-43196 and one was from R. irregularis strain-C2 that was similar to members of the Mitovirus genus. These contigs coded genomes larger than the regular mitoviruses infecting pathogenic fungi and can be translated by either a mitochondrial translation code or a cytoplasmic translation code, which was also reported in previously found mitoviruses infecting mycorrhizae. The five newly identified virus sequences are comprised of functionally conserved RdRp motifs and formed two separate subclades with mitoviruses infecting Gigaspora margarita and Rhizophagus clarus, further supporting virus-host co-evolution theory. This study expands our understanding of virus diversity. Even though AMF is notably hard to investigate due to its biotrophic nature, this study demonstrates the utility of whole root metatranscriptome.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Transcriptional and small RNA responses of the white mold fungus Sclerotinia sclerotiorum to infection by a virulence-attenuating hypovirus</title>
      <link>/achalneupane.github.io/publication/marzano_etal_viruses_2018/</link>
      <pubDate>Mon, 10 Dec 2018 00:00:00 -0600</pubDate>
      <guid>/achalneupane.github.io/publication/marzano_etal_viruses_2018/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Mycoviruses belonging to the family Hypoviridae cause persistent infection of many different host fungi. We previously determined that the white mold fungus, Sclerotinia sclerotiorum, infected with Sclerotinia sclerotiorum hypovirus 2-L (SsHV2-L) exhibits reduced virulence, delayed/reduced sclerotial formation, and enhanced production of aerial mycelia. To gain better insight into the cellular basis for these changes, we characterized changes in mRNA and small RNA (sRNA) accumulation in S. sclerotiorum to infection by SsHV2-L. A total of 958 mRNAs and 835 sRNA-producing loci were altered after infection by SsHV2-L, among which &amp;gt;100 mRNAs were predicted to encode proteins involved in the metabolism and trafficking of carbohydrates and lipids. Both S. sclerotiorum endogenous and virus-derived sRNAs were predominantly 22 nt in length suggesting one dicer-like enzyme cleaves both. Novel classes of endogenous small RNAs were predicted, including phasiRNAs and tRNA-derived small RNAs. Moreover, S. sclerotiorum phasiRNAs, which were derived from noncoding RNAs and have the potential to regulate mRNA abundance in trans, showed differential accumulation due to virus infection. tRNA fragments did not accumulate differentially after hypovirus infection. Hence, in-depth analysis showed that infection of S. sclerotiorum by a hypovirulence-inducing hypovirus produced selective, large-scale reprogramming of mRNA and sRNA production.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Genome-Wide Identification of NBS-Encoding Resistance Genes in Sunflower (Helianthus annuus L.)</title>
      <link>/achalneupane.github.io/publication/surendra_et_al_2018_july_genes/</link>
      <pubDate>Sat, 30 Jun 2018 00:00:00 -0500</pubDate>
      <guid>/achalneupane.github.io/publication/surendra_et_al_2018_july_genes/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Nucleotide Binding Site-Leucine-Rich Repeat (NBS-LRR) genes encode disease resistance proteins involved in plants&amp;rsquo; defense against their pathogens. Although sunflower is affected by many diseases, only a few molecular details have been uncovered regarding pathogenesis and resistance mechanisms. Recent availability of sunflower whole genome sequences in publicly accessible databases allowed us to accomplish a genome-wide identification of Toll-interleukin-1 receptor-like Nucleotide-binding site Leucine-rich repeat (TNL), Coiled Coil (CC)-NBS-LRR (CNL), Resistance to powdery mildew 8 (RPW8)-NBS-LRR (RNL) and NBS-LRR (NL) protein encoding genes. Hidden Markov Model (HMM) profiling of 52,243 putative protein sequences from sunflower resulted in 352 NBS-encoding genes, among which 100 genes belong to CNL group including 64 genes with RX_CC like domain, 77 to TNL, 13 to RNL, and 162 belong to NL group. We also identified signal peptides and nuclear localization signals present in the identified genes and their homologs. We found that NBS genes were located on all chromosomes and formed 75 gene clusters, one-third of which were located on chromosome 13. Phylogenetic analyses between sunflower and Arabidopsis NBS genes revealed a clade-specific nesting pattern in CNLs, with RNLs nested in the CNL-A clade, and species-specific nesting pattern for TNLs. Surprisingly, we found a moderate bootstrap support (BS = 50%) for CNL-A clade being nested within TNL clade making both the CNL and TNL clades paraphyletic. Arabidopsis and sunflower showed 87 syntenic blocks with 1049 high synteny hits between chromosome 5 of Arabidopsis and chromosome 6 of sunflower. Expression data revealed functional divergence of the NBS genes with basal level tissue-specific expression. This study represents the first genome-wide identification of NBS genes in sunflower paving avenues for functional characterization and potential crop improvement.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Privacy Policy</title>
      <link>/achalneupane.github.io/privacy/</link>
      <pubDate>Thu, 28 Jun 2018 00:00:00 +0100</pubDate>
      <guid>/achalneupane.github.io/privacy/</guid>
      <description>&lt;p&gt;&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Terms</title>
      <link>/achalneupane.github.io/terms/</link>
      <pubDate>Thu, 28 Jun 2018 00:00:00 +0100</pubDate>
      <guid>/achalneupane.github.io/terms/</guid>
      <description>&lt;p&gt;&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mycoviruses as Triggers and Targets of RNA Silencing in White Mold Fungus Sclerotinia sclerotiorum</title>
      <link>/achalneupane.github.io/publication/mochama_et_al/</link>
      <pubDate>Wed, 18 Apr 2018 00:00:00 -0500</pubDate>
      <guid>/achalneupane.github.io/publication/mochama_et_al/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This study aimed to demonstrate the existence of antiviral RNA silencing mechanisms in Sclerotinia sclerotiorum by infecting wild-type and RNA-silencing-deficient strains of the fungus with an RNA virus and a DNA virus. Key silencing-related genes were disrupted to dissect the RNA silencing pathway. Specifically, dicer genes (dcl-1, dcl-2, and both dcl-1/dcl-2) were displaced by selective marker(s). Disruption mutants were then compared for changes in phenotype, virulence, and susceptibility to virus infections. Wild-type and mutant strains were transfected with a single-stranded RNA virus, SsHV2-L, and copies of a single-stranded DNA mycovirus, SsHADV-1, as a synthetic virus constructed in this study. Disruption of dcl-1 or dcl-2 resulted in no changes in phenotype compared to wild-type S. sclerotiorum; however, the double dicer mutant strain exhibited significantly slower growth. Furthermore, the Δdcl-1/dcl-2 double mutant, which was slow growing without virus infection, exhibited much more severe debilitation following virus infections including phenotypic changes such as slower growth, reduced pigmentation, and delayed sclerotial formation. These phenotypic changes were absent in the single mutants, Δdcl-1 and Δdcl-2. Complementation of a single dicer in the double disruption mutant reversed viral susceptibility to the wild-type state. Virus-derived small RNAs were accumulated from virus-infected wild-type strains with strand bias towards the negative sense. The findings of these studies indicate that S. sclerotiorum has robust RNA silencing mechanisms that process both DNA and RNA mycoviruses and that, when both dicers are silenced, invasive nucleic acids can greatly debilitate the virulence of this fungus.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Gene Discovery in Acute Myeloid Leukaemia: somatic and germline mutations.</title>
      <link>/achalneupane.github.io/talk/leo_et_al/</link>
      <pubDate>Sun, 21 Aug 2016 00:00:00 -0500</pubDate>
      <guid>/achalneupane.github.io/talk/leo_et_al/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Background&lt;/strong&gt;
:&lt;/p&gt;

&lt;p&gt;Gene and mutation discovery in cancers is typically performed by sequencing somatic and germline samples from the same individuals and subtracting germline mutations.
However, in biobanked acute myeloid leukaemia (AML) samples, matched germline DNA is
frequently unavailable. When germline samples are available, sequencing both germline and somatic samples for each patient significantly increases costs. This study explores whether it is possible to utilise unrelated germline controls to identify ocogenic drivers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Methods&lt;/strong&gt;
:&lt;/p&gt;

&lt;p&gt;Whole exome sequencing was performed on somatic samples from 188 adults and children with AML (n=144 and n=44 respectively) and 429 control germline samples. The discovery process includes a rigorous statistical genetics approach whereby the AML cases and controls are age and ethnically matched. Residual population stratification is controlled by appropriate covariates. Burden tests are performed to detect mutations enriched in somatic samples compared to the unrelated germline controls. Statistical significance is determined by Q-Q plots against the null hypothesis.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Results&lt;/strong&gt;
:&lt;/p&gt;

&lt;p&gt;Burden tests that included damaging protein coding mutations identified genes
previously described with recurrent mutations in AML (e.g.
NPM1, DNMT3A, IDH2, NRAS, RUNX1, FLT3, IDH1, TET2, ASXL1) thus validating this bioinformatics approach.
Furthermore, this methodology resulted in the detection of several additional novel genes not previously identified in AML.
These mutations are currently undergoing conventional validation by Sanger sequencing, as well as bioinformatic validation using whole genome sequencing data from 128 of the same AML samples sequenced using the Complete Genomics platform.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Discussion&lt;/strong&gt;
:&lt;/p&gt;

&lt;p&gt;We demonstrate that this methodology can:
1) Identify technical artefacts from sequencing and alignment.
2) Enable statistical modelling of allele frequencies that can identify low frequency clones which are undetectable using standard genotyping approaches.
3) Provide a purely statistical approach to gene discovery, agnostic to mutation type
(synonymous, coding, non-coding etc).&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Conclusions&lt;/strong&gt;
:&lt;/p&gt;

&lt;p&gt;In summary, we have performed whole exome and whole genome sequencing on the largest cohort of AML samples in Australia. Innovative bioinformatic analysis has detected all previously identified, somatically mutated AML genes and has discovered a number of potentially significant novel mutations. The functional and prognostic impact of these events and the subsequent functional investigations will be discussed.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Updates</title>
      <link>/achalneupane.github.io/project/statistical-programming/</link>
      <pubDate>Wed, 27 Apr 2016 00:00:00 +0000</pubDate>
      <guid>/achalneupane.github.io/project/statistical-programming/</guid>
      <description></description>
    </item>
    
    <item>
      <title>MEK inhibitor resistance in acute myeloid leukaemia</title>
      <link>/achalneupane.github.io/talk/mek_brisbane_2016/</link>
      <pubDate>Wed, 16 Mar 2016 00:00:00 -0500</pubDate>
      <guid>/achalneupane.github.io/talk/mek_brisbane_2016/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Mutations of the RAS family of genes are frequent events in AML, occurring in 10% of children and 10-20% of adults.
NRASmutations promote proliferation through activation of the Ras/Raf/MEK/ERK signalling pathway. Several MEK
inhibitors have shown promising pre-clinical activity in AML, with a number of compounds currently in adult phase I/II
clinical trials, including AZD6244, GSK1120212 and AS703026. Given not all patients respond to MEK inhibitor
treatment we undertook a comprehensive preclinical evaluation of MEK inhibitors in AML and developed a clinically
relevant model of resistance.
The in vitroefficacy of 7 MEK inhibitors was determined using a diverse panel of 6 paediatric and 5 adult AML cell lines
(Table 1). All AML cell lines were sensitive to at least one MEK inhibitor with the exception of the Down syndrome
associated AML line, CMK, and the adult erythroblastic line, HEL, that showed overt resistance (IC50 &amp;gt;20μM) to MEK
inhibition (Table 1). In sensitive cell lines, the reduced proliferation was associated with apoptosis, as assessed by
Annexin V+ staining. To confirm mechanism of action, inhibition of MEK phosphorylation as well as the downstream
kinase, pERK, were assessed by immunoblotting. The level of basal MEK activation was variable across the cell line
panel and pMEK was increased upon exposure to active MEK inhibitors. In contrast, levels of pERK were reduced
suggesting that MEK inhibitors may disrupt the interaction of MEK with its downstream transducers rather than a direct
inhibition of MEK phosphorylation.
Molecular and clinical resistance to kinase inhibitors is well described for targets such as FLT3 and BCR-ABL1. Since
clinical responses to MEK inhibitors have been variable, we investigated the potential mechanisms of resistance to
MEK inhibitors in vitro. Long-term culture of THP-1 cells (MLL-rearranged, NRASmutated) with AZD6244 and
AS703026, resulted in high-level resistance. Importantly, cells displayed cross-resistance not only to these two
compounds but also a third MEK inhibitor, GSK1120212 (Table 2). Resistance was associated with reduced basal
pMEK expression. In order to establish the mechanism of resistance we performed comprehensive mutation and gene
expression analyses utilising whole-exome sequencing and RNAseq respectively. These data revealed a spectrum of
acquired molecular aberrations common to both resistant cell lines compared to the parental THP1 cells. Together,
these data indicate that whilst MEK inhibition is a promising strategy to treat AML, resistance to one MEK inhibitor may
lead to cross-resistance to other compounds targeting MEK.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sensitivity of Whole Exome Sequencing for the Detection of FLT3-ITD and NPM1 Mutations in Acute Myeloid Leukaemia</title>
      <link>/achalneupane.github.io/talk/esh_2015_buddapest/</link>
      <pubDate>Thu, 10 Sep 2015 00:00:00 -0500</pubDate>
      <guid>/achalneupane.github.io/talk/esh_2015_buddapest/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Whole exome sequencing (WES) can detect a high proportion of cancer causing genetic mutations, and therefore has the potential to replace targeted molecular assays and identify additional novel, patient-specific mutations. To test the ability of WES to detect variants of clinical consequence, we compared WES findings to results for FLT3-ITD and NPM1mut obtained by routine pathology testing (high-resolution fragment analysis (HRFA) and Matrix Assisted Laser Desorption/Ionization – Time of Flight Mass Spectrometry (MALDI-TOF) respectively), and to point mutation findings in DNMT3A, IDH1/2, JAK2, KRAS, NRAS and MPL, as determined by Sequenom, across a cohort of 188 AML samples from adults (n
= 144) and children (n = 44). All subjects provided written informed consent, and the study protocols had been approved by institutional research ethics committees. Median age at diagnosis was 51 years, (range 1-89) and median bone marrow blast percentage was 76% (range 8-100).
A discovery phase using 96 samples developed genotype algorithms and ascertained their sensitivity. NPM1mut were reliably detected using WES, with 100% (n=25 positive) concordance with MALDI-TOF. WES and Sequenom were 99.4% concordant over the selected gene panels (1594 measurements). The FLT3-ITD false negative rate initially exceeded 50%, leading us to optimize our discovery algorithms and develop a calibration curve which specified the sequence coverage needed over the FLT3-ITD region to reliably genotype at any allelic ratio (AR). We demonstrate that our algorithms can reliably detect FLT3-ITD with AR &amp;gt; 0.05 using exome capture with less than 100x coverage over the FLT3-ITD region.
Additionally, we tested the algorithms over another 900 germline controls with no false positive measurements.
In a validation phase using 78 samples, all NPM1mut samples (n=20 positive) were detected, including an additional NPM1mut (type A) initially missed using MALDI-TOF. Concordance with Sequenom again exceeded 99.5% (comparable to the error rate expected in this Sequenom panel). For FLT3-ITD, &lt;sup&gt;18&lt;/sup&gt;&amp;frasl;&lt;sub&gt;21&lt;/sub&gt; HRFA-positive samples were detected with all 3 false-negatives falling outside the predicted sensitivity threshold; two samples with AR &amp;lt;0.01 (which would require sequencing coverage of 500x for detection) and one with AR = 0.4 but with a sequence coverage of only 38x over the FLT3-ITD.
In conclusion, we have performed WES on one of the largest cohorts of adult and paediatric AML described to date and demonstrate that clinically relevant mutations, including FLT3-ITD and NPM1mut, can be simultaneously detected with a single exome capture platform with accuracy similar to or better than current methods.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Transcriptome analysis of western corn rootworm larvae and eggs</title>
      <link>/achalneupane.github.io/talk/wcr_neupane/</link>
      <pubDate>Mon, 14 Apr 2014 00:00:00 -0500</pubDate>
      <guid>/achalneupane.github.io/talk/wcr_neupane/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The     western     corn     rootworm,     Diabrotica     virgifera     virgifera(Coloeptera: Chrysomelidae), is one of the most devastating pests of corn causing nearly a billion dollars  of  financial  loss  both  in  terms  of  yield  loss  and  treatment  costs.  Although  Coleoptera  is  the  most  diverse  order  of  insects  comprising  more  than  400,000  species,  only  a  few  coleopteran  genomes  and  transcriptomes  (e.g.,  from  &lt;em&gt;Tribolium castaneum&lt;/em&gt;  and &lt;em&gt;Dendroctonus  ponderosae&lt;/em&gt;)  have  been  published  to  date.  The  genome size of haploid D. v.   virgifera is estimated to be ~2.58 GB, one of the largest among beetle species. Its complete genome sequence is currently in the draft stage. In this study, in order to identify the gene sets expressed in their larval stages (when the  most  damage  to  corn  is  caused)  and  to  contribute  to  improving  the  genome  assembly,  we  have  sequenced  and  assembled  transcriptomes  from  egg,  neonate,  and third-instar larval stages of D. v. virgifera using next-generation technologies. In total  ~700  gigabases  were  sequenced.  De  novo  transcriptome  assembly  was  performed using four different short read assemblers for individual  and  pooled  sets  of  reads.  Hybrid  assembly  using  both  Illumina  and  454  reads  was  also  performed.  After  examining  the  assembly  quality  based  on  contig  length  and  annotation  effectiveness  with  similarity  search,  we  chose  the  Trinity  assembly  from  the  pooled dataset  including  163,871  contigs  (the  average  length:  914  bp)  as  the  most  inclusive.  We  identified  and  annotated  genes  encoding  chemoreceptors,  gamma-aminobutyric  acid  (GABA)  type  A  receptor,  and  glycoside  hydrolase  families.  Compared  to  the  sequences  found  in  the  draft  genome,  we  observed  variations  in  sequences  as  well  as  in  the  number  of  introns.  We  also  examined  conservation  of  gene   structures   in   chemoreceptors   from   closely   related   insect   lineages.   Our   transcriptome sequences can contribute toward improved quality of the &lt;em&gt;D&lt;/em&gt;. &lt;em&gt;v&lt;/em&gt;. &lt;em&gt;virgiferagenome&lt;/em&gt; assembly and annotations.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Genetic diversity and population structure of sickleweed(Falcaria vulgaris; Apiaceae) in the upper Midwest USA</title>
      <link>/achalneupane.github.io/publication/piya_et_al_biological_invasions/</link>
      <pubDate>Sat, 22 Feb 2014 00:00:00 -0600</pubDate>
      <guid>/achalneupane.github.io/publication/piya_et_al_biological_invasions/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Sickleweed (Falcaria vulgaris), an intro-duced species native to Europe and Asia, grows as anaggressive weed in some areas of the upper Midwest inthe United States. We are reporting genetic diversityand  population  structure  of  sickleweed  populationsusing microsatellite markers and nuclear and chloro-plast   DNA   sequences.   Populations   showed   highgenetic  differentiation  but  did  not  show  significantgeographic  structure,  suggesting  random  establish-ment of different genotypes at different sites was likelydue to human mediated multiple introductions. Threegenetic  clusters  revealed  by  microsatellite  data  andpresence of six chlorotypes supported our hypothesisof multiple introductions. Chloroplast DNA sequencedata  revealed  six  chlorotypes  nested  into  two  mainlineages   suggesting   at   least   two   introductions   ofsickleweed  in  the  upper  Midwest.  Some  individualsexhibited more than two alleles at several microsatel-lite  loci suggesting  occurrence  of polyploidy, whichcould be a post-introduction development to mitigatethe  inbreeding  effects.  High  genetic  variation  in  theintroduced range attributable to multiple introductionsand  polyploidy  may  be  inducing  the  evolution  ofinvasiveness  in  sickleweed.  Results  of  this  studyprovide valuable insights into the evolution of sickle-weed and baseline data for designing proper manage-ment practices for controlling sickleweed in the UnitedStates.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Evolutionary history of mitogen-activated protein kinase (MAPK) genes in Lotus, Medicago, and Phaseolus</title>
      <link>/achalneupane.github.io/publication/mapk_legume/</link>
      <pubDate>Mon, 02 Dec 2013 00:00:00 -0600</pubDate>
      <guid>/achalneupane.github.io/publication/mapk_legume/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Mitogen-Activated Protein Kinase (MAPK) genes encode proteins that mediate various signaling pathways associated with biotic and abiotic stress responses in eukaryotes. The MAPK genes form a 3-tier signal transduction cascade between cellular stimuli and physiological responses. Recent identification of soybean MAPKs and availability of genome sequences from other legume species allowed us to identify their MAPK genes. The main objectives of this study were to identify MAPKs in 3 legume species, Lotus japonicus, Medicago truncatula, and Phaseolus vulgaris, and to assess their phylogenetic relationships. We used approaches in comparative genomics for MAPK gene identification and named the newly identified genes following Arabidopsis MAPK nomenclature model. We identified 19, 18, and 15 MAPKs and 7, 4, and 9 MAPKKs in the genome of Lotus japonicus, Medicago truncatula, and Phaseolus vulgaris, respectively. Within clade placement of MAPKs and MAPKKs in the 3 legume species were consistent with those in soybean and Arabidopsis. Among 5 clades of MAPKs, 4 founder clades were consistent to MAPKs of other plant species and orthologs of MAPK genes in the fifth clade-&amp;ldquo;Clade E&amp;rdquo; were consistent with those in soybean. Our results also indicated that some gene duplication events might have occurred prior to eudicot-monocot divergence. Highly diversified MAPKs in soybean relative to those in 3 other legume species are attributable to the polyploidization events in soybean. The identification of the MAPK genes in the legume species is important for the legume crop improvement; and evolutionary relationships and functional divergence of these gene members provide insights into plant genome evolution.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Identification, Nomenclature, and Evolutionary Relationships of Mitogen-Activated Protein Kinase (MAPK) Genes in Soybean</title>
      <link>/achalneupane.github.io/publication/mapk_soybean/</link>
      <pubDate>Sun, 22 Sep 2013 00:00:00 -0500</pubDate>
      <guid>/achalneupane.github.io/publication/mapk_soybean/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Mitogen-activated protein kinase (MAPK) genes in eukaryotes regulate various developmental and physiological processes
including those associated with biotic and abiotic stresses. Although MAPKs in some plant species including Arabidopsis have been
identified, they are yet to be identified in soybean. Major objectives of this study were to identify GmMAPKs, assess their evolutionary relationships, and analyze their functional divergence. We identified a total of 38 MAPKs, eleven MAPKKs, and 150 MAPKKKs in
soybean. Within the GmMAPK family, we also identified a new clade of six genes: four genes with TEY and two genes with TQY motifs
requiring further investigation into possible legume-specific functions. The results indicated the expansion of the GmMAPK families
attributable to the ancestral polyploidy events followed by chromosomal rearrangements. The GmMAPK and GmMAPKKK families
were substantially larger than those in other plant species. The duplicated GmMAPK members presented complex evolutionary relationships and functional divergence when compared to their counterparts in Arabidopsis. We also highlighted existing nomenclatural issues,
stressing the need for nomenclatural consistency. GmMAPK identification is vital to soybean crop improvement, and novel insights into
the evolutionary relationships will enhance our understanding about plant genome evolution.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Identification of Mitogen Activated Protein Kinase Family Members in Soybean</title>
      <link>/achalneupane.github.io/talk/bsa_neupane/</link>
      <pubDate>Wed, 11 Jul 2012 00:00:00 -0500</pubDate>
      <guid>/achalneupane.github.io/talk/bsa_neupane/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Mitogen Activated Protein Kinases (MAPKs) are serine/threonine specific kinases that are induced by various extracellular and intracellular stimuli, and are involved in signaling pathways in all eukaryotes. In plants, MAPKs are known to regulate various signal transduction pathways including those associated with biotic and abiotic stresses. The MAPK gene members belong to three functionally linked gene families called MAPKs, MAPKKs (MAPK Kinases) and MAPKKKs (MAPKK Kinases). Although, MAPKs of model plants such as &lt;em&gt;Arabidopsis&lt;/em&gt; and &lt;em&gt;Oryza&lt;/em&gt; have been identified and characterized, these genes in soybean (&lt;em&gt;Glycine max&lt;/em&gt;) are yet to be identified. In this study, we used approaches in comparative genomics and bioinformatics for the genome-wide identification of MAPKs, MAPKKs and MAPKKKs in soybean. &lt;em&gt;Arabidopsis&lt;/em&gt; reference sequences were used in protein BLAST to search the putative MAPKs of soybean from publicly available databases. In our in-silico analysis, the redundant sequences were removed to perform unbiased and rigorous phylogenetic analyses. We verified the presence of unique conserved domains and active sites in each putative MAPK gene member manually and by using Geneious and Pfam programs. From our three different confirmatory analyses, we identified 38 MAP Kinases, 11 MAPK Kinases and 115 MAPKK Kinases in soybean. &lt;em&gt;Arabidopsis&lt;/em&gt; nomenclature model was followed to assign numeric subscript to MAPK sequences grouped with &lt;em&gt;Arabidopsis&lt;/em&gt; sequences in phylogenetic tree. Lack of effective code of nomenclature lead us to a conundrum, which will be discussed in the meeting. Universal codes of gene nomenclature are crucial for understanding various signaling pathways. Therefore, an effective code of gene nomenclature is warranted. The results from this study will help us characterize soybean MAP Kinases paving avenue for the functional analyses of different cellular and physiological pathways in the order these genes function.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Population Genetics of *Falcaria vulgaris* (Sickleweed) in North America</title>
      <link>/achalneupane.github.io/talk/piya_bsa/</link>
      <pubDate>Wed, 11 Jul 2012 00:00:00 -0500</pubDate>
      <guid>/achalneupane.github.io/talk/piya_bsa/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introduction history and spread of Falcaria vulgaris Bernh. (Apiaceae) in the United States based on herbarium records</title>
      <link>/achalneupane.github.io/talk/piya_sd_academy/</link>
      <pubDate>Fri, 13 Apr 2012 00:00:00 -0500</pubDate>
      <guid>/achalneupane.github.io/talk/piya_sd_academy/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Nomenclatural Conundrum: Applying Existing Nomenclature to the Identification of Soybean (*Glycine max*) MAP Kinase Genes</title>
      <link>/achalneupane.github.io/talk/neupane_aspb/</link>
      <pubDate>Sat, 24 Mar 2012 00:00:00 -0500</pubDate>
      <guid>/achalneupane.github.io/talk/neupane_aspb/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Inferring Introduction History and Spread of Falcaria vulgaris Bernh.(Apiaceae) in the United States Based on Herbarium Records</title>
      <link>/achalneupane.github.io/publication/piya_et_al_proceedings_sd/</link>
      <pubDate>Wed, 22 Feb 2012 00:00:00 -0600</pubDate>
      <guid>/achalneupane.github.io/publication/piya_et_al_proceedings_sd/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Herbarium records were studied to infer the introduction history and spread of the exotic Eurasian sickleweed (Falcaria vulgaris Bernh.) in the United States. The spread of the plant was reconstructed using the location of early collections as the possible sites of primary introduction, and the location of subsequent collections as potential pathways along which this species spread. Herbarium records indicate that sickleweed was first introduced no later than 1922, and independent introduction of this plant took place in the East Coast and in the Midwest of the United States. The species has spread to 37 counties of 15 states of the United States. No recent sickleweed record has been reported for the last 17 years in the US except Iowa, Nebraska and South Dakota. The plant has been characterized as an aggressive weed by experts in the latter two states, where it is already well established and has infested the Fort Pierre National Grassland and Buffalo Gap National Grassland in South Dakota, and is reported from several sites along Nebraska roadsides. It is essential to verify the existence of sickleweed in the areas from where the herbarium specimens were previously collected to help identify the areas at risk. Control strategies need to be implemented and policy should be developed to establish the participation of public lands managers, transportation departments and private land-owners to control and manage this species before it becomes a more widespread invader.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Anticancer Activity of Novel Ionic Triorganotin Derivatives against MDA-MB 231 Breast Cancer Cells</title>
      <link>/achalneupane.github.io/talk/hbcu_neupane/</link>
      <pubDate>Thu, 29 Oct 2009 00:00:00 -0500</pubDate>
      <guid>/achalneupane.github.io/talk/hbcu_neupane/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Abstract&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The goal of this project was to study the responses of antibodies
against four influenza A viruses; PR8, RV6, Swine and J1. RV6,
Swine and J1 differ from PR8 by 1 amino acid (99.9% similarity),
20 amino acids, and more than 100 amino acids, respectively.
Despite several attempts of early diagnosis and chemotherapy,
breast cancer is one of the leading causes of cancer deaths in
United States claiming almost 40610 lives per year. Breast cancer
is more common in white women than in African American women
but the survival rate for 5 years for African American women is
comparatively less which is 77% than 90 % for white women.
Higher concentration of estrogen secretion has also been
associated with the risk factors of breast cancer.
These viruses resemble the different viruses that circulate in
people and that can have varying numbers of amino acid
differences, and we wanted to examine how these difference
affect the ability of antibodies to bind to different viruses using
different techniques. ELISA (Enzyme Linked Immunosorbent
Assay) was used to determine whether a particular antibody is
present in a blood sample and ELISPOT (ELISPOT-Enzyme-linked
Immunospot assay) was used for enumeration of B cells secreting
specific antibody.
In recent studies, metal-based anticancer drugs are found to be
very effective in the death of cancer cells proving it as a very
useful cancer chemotherapeutic. In this study we have
synthesized ionic triorganotin compounds with increased solubility
due to their partially ionic characteristic and tested their anticancer activity using MDA-MB 231 breast cancer cells.
Methods: Three compounds (1) Triphenyltin Hydroxide&lt;a href=&#34;2&#34; target=&#34;_blank&#34;&gt;parent
compound&lt;/a&gt; CA11 and (3) CA 32 derivatives were tested.
MDA-MB 231 cells were plated in 96-wellplate and treated with
varying concentration (1ng to 100ug) of various triorganotin
derivatives for 24, 48 and 72 hours. A combination of trypan blue
dye exclusion and WST-1 cell proliferation reagent was used to&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
